// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/loopholelabs/endkey/internal/ent/rootkey"
	"github.com/loopholelabs/endkey/internal/ent/userkey"
)

// UserKey is the model entity for the UserKey schema.
type UserKey struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Salt holds the value of the "salt" field.
	Salt []byte `json:"salt,omitempty"`
	// Hash holds the value of the "hash" field.
	Hash []byte `json:"hash,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the UserKeyQuery when eager-loading is set.
	Edges              UserKeyEdges `json:"edges"`
	root_key_user_keys *string
	selectValues       sql.SelectValues
}

// UserKeyEdges holds the relations/edges for other nodes in the graph.
type UserKeyEdges struct {
	// RootKey holds the value of the root_key edge.
	RootKey *RootKey `json:"root_key,omitempty"`
	// Authorities holds the value of the authorities edge.
	Authorities []*Authority `json:"authorities,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// RootKeyOrErr returns the RootKey value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e UserKeyEdges) RootKeyOrErr() (*RootKey, error) {
	if e.loadedTypes[0] {
		if e.RootKey == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: rootkey.Label}
		}
		return e.RootKey, nil
	}
	return nil, &NotLoadedError{edge: "root_key"}
}

// AuthoritiesOrErr returns the Authorities value or an error if the edge
// was not loaded in eager-loading.
func (e UserKeyEdges) AuthoritiesOrErr() ([]*Authority, error) {
	if e.loadedTypes[1] {
		return e.Authorities, nil
	}
	return nil, &NotLoadedError{edge: "authorities"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*UserKey) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case userkey.FieldSalt, userkey.FieldHash:
			values[i] = new([]byte)
		case userkey.FieldID, userkey.FieldName:
			values[i] = new(sql.NullString)
		case userkey.FieldCreatedAt:
			values[i] = new(sql.NullTime)
		case userkey.ForeignKeys[0]: // root_key_user_keys
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the UserKey fields.
func (uk *UserKey) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case userkey.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				uk.ID = value.String
			}
		case userkey.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				uk.CreatedAt = value.Time
			}
		case userkey.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				uk.Name = value.String
			}
		case userkey.FieldSalt:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field salt", values[i])
			} else if value != nil {
				uk.Salt = *value
			}
		case userkey.FieldHash:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field hash", values[i])
			} else if value != nil {
				uk.Hash = *value
			}
		case userkey.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field root_key_user_keys", values[i])
			} else if value.Valid {
				uk.root_key_user_keys = new(string)
				*uk.root_key_user_keys = value.String
			}
		default:
			uk.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the UserKey.
// This includes values selected through modifiers, order, etc.
func (uk *UserKey) Value(name string) (ent.Value, error) {
	return uk.selectValues.Get(name)
}

// QueryRootKey queries the "root_key" edge of the UserKey entity.
func (uk *UserKey) QueryRootKey() *RootKeyQuery {
	return NewUserKeyClient(uk.config).QueryRootKey(uk)
}

// QueryAuthorities queries the "authorities" edge of the UserKey entity.
func (uk *UserKey) QueryAuthorities() *AuthorityQuery {
	return NewUserKeyClient(uk.config).QueryAuthorities(uk)
}

// Update returns a builder for updating this UserKey.
// Note that you need to call UserKey.Unwrap() before calling this method if this UserKey
// was returned from a transaction, and the transaction was committed or rolled back.
func (uk *UserKey) Update() *UserKeyUpdateOne {
	return NewUserKeyClient(uk.config).UpdateOne(uk)
}

// Unwrap unwraps the UserKey entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (uk *UserKey) Unwrap() *UserKey {
	_tx, ok := uk.config.driver.(*txDriver)
	if !ok {
		panic("ent: UserKey is not a transactional entity")
	}
	uk.config.driver = _tx.drv
	return uk
}

// String implements the fmt.Stringer.
func (uk *UserKey) String() string {
	var builder strings.Builder
	builder.WriteString("UserKey(")
	builder.WriteString(fmt.Sprintf("id=%v, ", uk.ID))
	builder.WriteString("created_at=")
	builder.WriteString(uk.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(uk.Name)
	builder.WriteString(", ")
	builder.WriteString("salt=")
	builder.WriteString(fmt.Sprintf("%v", uk.Salt))
	builder.WriteString(", ")
	builder.WriteString("hash=")
	builder.WriteString(fmt.Sprintf("%v", uk.Hash))
	builder.WriteByte(')')
	return builder.String()
}

// UserKeys is a parsable slice of UserKey.
type UserKeys []*UserKey
