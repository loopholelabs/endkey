// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/loopholelabs/endkey/internal/ent/authority"
	"github.com/loopholelabs/endkey/internal/ent/rootkey"
	"github.com/loopholelabs/endkey/internal/ent/userkey"
)

// UserKeyCreate is the builder for creating a UserKey entity.
type UserKeyCreate struct {
	config
	mutation *UserKeyMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (ukc *UserKeyCreate) SetCreatedAt(t time.Time) *UserKeyCreate {
	ukc.mutation.SetCreatedAt(t)
	return ukc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (ukc *UserKeyCreate) SetNillableCreatedAt(t *time.Time) *UserKeyCreate {
	if t != nil {
		ukc.SetCreatedAt(*t)
	}
	return ukc
}

// SetName sets the "name" field.
func (ukc *UserKeyCreate) SetName(s string) *UserKeyCreate {
	ukc.mutation.SetName(s)
	return ukc
}

// SetSalt sets the "salt" field.
func (ukc *UserKeyCreate) SetSalt(b []byte) *UserKeyCreate {
	ukc.mutation.SetSalt(b)
	return ukc
}

// SetHash sets the "hash" field.
func (ukc *UserKeyCreate) SetHash(b []byte) *UserKeyCreate {
	ukc.mutation.SetHash(b)
	return ukc
}

// SetID sets the "id" field.
func (ukc *UserKeyCreate) SetID(s string) *UserKeyCreate {
	ukc.mutation.SetID(s)
	return ukc
}

// SetRootKeyID sets the "root_key" edge to the RootKey entity by ID.
func (ukc *UserKeyCreate) SetRootKeyID(id string) *UserKeyCreate {
	ukc.mutation.SetRootKeyID(id)
	return ukc
}

// SetNillableRootKeyID sets the "root_key" edge to the RootKey entity by ID if the given value is not nil.
func (ukc *UserKeyCreate) SetNillableRootKeyID(id *string) *UserKeyCreate {
	if id != nil {
		ukc = ukc.SetRootKeyID(*id)
	}
	return ukc
}

// SetRootKey sets the "root_key" edge to the RootKey entity.
func (ukc *UserKeyCreate) SetRootKey(r *RootKey) *UserKeyCreate {
	return ukc.SetRootKeyID(r.ID)
}

// AddAuthorityIDs adds the "authorities" edge to the Authority entity by IDs.
func (ukc *UserKeyCreate) AddAuthorityIDs(ids ...string) *UserKeyCreate {
	ukc.mutation.AddAuthorityIDs(ids...)
	return ukc
}

// AddAuthorities adds the "authorities" edges to the Authority entity.
func (ukc *UserKeyCreate) AddAuthorities(a ...*Authority) *UserKeyCreate {
	ids := make([]string, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return ukc.AddAuthorityIDs(ids...)
}

// Mutation returns the UserKeyMutation object of the builder.
func (ukc *UserKeyCreate) Mutation() *UserKeyMutation {
	return ukc.mutation
}

// Save creates the UserKey in the database.
func (ukc *UserKeyCreate) Save(ctx context.Context) (*UserKey, error) {
	ukc.defaults()
	return withHooks(ctx, ukc.sqlSave, ukc.mutation, ukc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (ukc *UserKeyCreate) SaveX(ctx context.Context) *UserKey {
	v, err := ukc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ukc *UserKeyCreate) Exec(ctx context.Context) error {
	_, err := ukc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ukc *UserKeyCreate) ExecX(ctx context.Context) {
	if err := ukc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ukc *UserKeyCreate) defaults() {
	if _, ok := ukc.mutation.CreatedAt(); !ok {
		v := userkey.DefaultCreatedAt()
		ukc.mutation.SetCreatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ukc *UserKeyCreate) check() error {
	if _, ok := ukc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "UserKey.created_at"`)}
	}
	if _, ok := ukc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "UserKey.name"`)}
	}
	if v, ok := ukc.mutation.Name(); ok {
		if err := userkey.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "UserKey.name": %w`, err)}
		}
	}
	if _, ok := ukc.mutation.Salt(); !ok {
		return &ValidationError{Name: "salt", err: errors.New(`ent: missing required field "UserKey.salt"`)}
	}
	if v, ok := ukc.mutation.Salt(); ok {
		if err := userkey.SaltValidator(v); err != nil {
			return &ValidationError{Name: "salt", err: fmt.Errorf(`ent: validator failed for field "UserKey.salt": %w`, err)}
		}
	}
	if _, ok := ukc.mutation.Hash(); !ok {
		return &ValidationError{Name: "hash", err: errors.New(`ent: missing required field "UserKey.hash"`)}
	}
	if v, ok := ukc.mutation.Hash(); ok {
		if err := userkey.HashValidator(v); err != nil {
			return &ValidationError{Name: "hash", err: fmt.Errorf(`ent: validator failed for field "UserKey.hash": %w`, err)}
		}
	}
	if v, ok := ukc.mutation.ID(); ok {
		if err := userkey.IDValidator(v); err != nil {
			return &ValidationError{Name: "id", err: fmt.Errorf(`ent: validator failed for field "UserKey.id": %w`, err)}
		}
	}
	return nil
}

func (ukc *UserKeyCreate) sqlSave(ctx context.Context) (*UserKey, error) {
	if err := ukc.check(); err != nil {
		return nil, err
	}
	_node, _spec := ukc.createSpec()
	if err := sqlgraph.CreateNode(ctx, ukc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected UserKey.ID type: %T", _spec.ID.Value)
		}
	}
	ukc.mutation.id = &_node.ID
	ukc.mutation.done = true
	return _node, nil
}

func (ukc *UserKeyCreate) createSpec() (*UserKey, *sqlgraph.CreateSpec) {
	var (
		_node = &UserKey{config: ukc.config}
		_spec = sqlgraph.NewCreateSpec(userkey.Table, sqlgraph.NewFieldSpec(userkey.FieldID, field.TypeString))
	)
	if id, ok := ukc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := ukc.mutation.CreatedAt(); ok {
		_spec.SetField(userkey.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := ukc.mutation.Name(); ok {
		_spec.SetField(userkey.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := ukc.mutation.Salt(); ok {
		_spec.SetField(userkey.FieldSalt, field.TypeBytes, value)
		_node.Salt = value
	}
	if value, ok := ukc.mutation.Hash(); ok {
		_spec.SetField(userkey.FieldHash, field.TypeBytes, value)
		_node.Hash = value
	}
	if nodes := ukc.mutation.RootKeyIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   userkey.RootKeyTable,
			Columns: []string{userkey.RootKeyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(rootkey.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.root_key_user_keys = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ukc.mutation.AuthoritiesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   userkey.AuthoritiesTable,
			Columns: []string{userkey.AuthoritiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(authority.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// UserKeyCreateBulk is the builder for creating many UserKey entities in bulk.
type UserKeyCreateBulk struct {
	config
	builders []*UserKeyCreate
}

// Save creates the UserKey entities in the database.
func (ukcb *UserKeyCreateBulk) Save(ctx context.Context) ([]*UserKey, error) {
	specs := make([]*sqlgraph.CreateSpec, len(ukcb.builders))
	nodes := make([]*UserKey, len(ukcb.builders))
	mutators := make([]Mutator, len(ukcb.builders))
	for i := range ukcb.builders {
		func(i int, root context.Context) {
			builder := ukcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*UserKeyMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ukcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ukcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ukcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ukcb *UserKeyCreateBulk) SaveX(ctx context.Context) []*UserKey {
	v, err := ukcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ukcb *UserKeyCreateBulk) Exec(ctx context.Context) error {
	_, err := ukcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ukcb *UserKeyCreateBulk) ExecX(ctx context.Context) {
	if err := ukcb.Exec(ctx); err != nil {
		panic(err)
	}
}
