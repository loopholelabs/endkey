// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/loopholelabs/endkey/internal/ent/apikey"
	"github.com/loopholelabs/endkey/internal/ent/authority"
	"github.com/loopholelabs/endkey/internal/ent/servertemplate"
)

// ServerTemplateCreate is the builder for creating a ServerTemplate entity.
type ServerTemplateCreate struct {
	config
	mutation *ServerTemplateMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (stc *ServerTemplateCreate) SetCreatedAt(t time.Time) *ServerTemplateCreate {
	stc.mutation.SetCreatedAt(t)
	return stc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (stc *ServerTemplateCreate) SetNillableCreatedAt(t *time.Time) *ServerTemplateCreate {
	if t != nil {
		stc.SetCreatedAt(*t)
	}
	return stc
}

// SetName sets the "name" field.
func (stc *ServerTemplateCreate) SetName(s string) *ServerTemplateCreate {
	stc.mutation.SetName(s)
	return stc
}

// SetCommonName sets the "common_name" field.
func (stc *ServerTemplateCreate) SetCommonName(s string) *ServerTemplateCreate {
	stc.mutation.SetCommonName(s)
	return stc
}

// SetTag sets the "tag" field.
func (stc *ServerTemplateCreate) SetTag(s string) *ServerTemplateCreate {
	stc.mutation.SetTag(s)
	return stc
}

// SetValidity sets the "validity" field.
func (stc *ServerTemplateCreate) SetValidity(s string) *ServerTemplateCreate {
	stc.mutation.SetValidity(s)
	return stc
}

// SetDNSNames sets the "dns_names" field.
func (stc *ServerTemplateCreate) SetDNSNames(s []string) *ServerTemplateCreate {
	stc.mutation.SetDNSNames(s)
	return stc
}

// SetAllowAdditionalDNSNames sets the "allow_additional_dns_names" field.
func (stc *ServerTemplateCreate) SetAllowAdditionalDNSNames(b bool) *ServerTemplateCreate {
	stc.mutation.SetAllowAdditionalDNSNames(b)
	return stc
}

// SetNillableAllowAdditionalDNSNames sets the "allow_additional_dns_names" field if the given value is not nil.
func (stc *ServerTemplateCreate) SetNillableAllowAdditionalDNSNames(b *bool) *ServerTemplateCreate {
	if b != nil {
		stc.SetAllowAdditionalDNSNames(*b)
	}
	return stc
}

// SetIPAddresses sets the "ip_addresses" field.
func (stc *ServerTemplateCreate) SetIPAddresses(s []string) *ServerTemplateCreate {
	stc.mutation.SetIPAddresses(s)
	return stc
}

// SetAllowAdditionalIps sets the "allow_additional_ips" field.
func (stc *ServerTemplateCreate) SetAllowAdditionalIps(b bool) *ServerTemplateCreate {
	stc.mutation.SetAllowAdditionalIps(b)
	return stc
}

// SetNillableAllowAdditionalIps sets the "allow_additional_ips" field if the given value is not nil.
func (stc *ServerTemplateCreate) SetNillableAllowAdditionalIps(b *bool) *ServerTemplateCreate {
	if b != nil {
		stc.SetAllowAdditionalIps(*b)
	}
	return stc
}

// SetID sets the "id" field.
func (stc *ServerTemplateCreate) SetID(s string) *ServerTemplateCreate {
	stc.mutation.SetID(s)
	return stc
}

// SetAuthorityID sets the "authority" edge to the Authority entity by ID.
func (stc *ServerTemplateCreate) SetAuthorityID(id string) *ServerTemplateCreate {
	stc.mutation.SetAuthorityID(id)
	return stc
}

// SetAuthority sets the "authority" edge to the Authority entity.
func (stc *ServerTemplateCreate) SetAuthority(a *Authority) *ServerTemplateCreate {
	return stc.SetAuthorityID(a.ID)
}

// AddAPIKeyIDs adds the "api_keys" edge to the APIKey entity by IDs.
func (stc *ServerTemplateCreate) AddAPIKeyIDs(ids ...string) *ServerTemplateCreate {
	stc.mutation.AddAPIKeyIDs(ids...)
	return stc
}

// AddAPIKeys adds the "api_keys" edges to the APIKey entity.
func (stc *ServerTemplateCreate) AddAPIKeys(a ...*APIKey) *ServerTemplateCreate {
	ids := make([]string, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return stc.AddAPIKeyIDs(ids...)
}

// Mutation returns the ServerTemplateMutation object of the builder.
func (stc *ServerTemplateCreate) Mutation() *ServerTemplateMutation {
	return stc.mutation
}

// Save creates the ServerTemplate in the database.
func (stc *ServerTemplateCreate) Save(ctx context.Context) (*ServerTemplate, error) {
	stc.defaults()
	return withHooks(ctx, stc.sqlSave, stc.mutation, stc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (stc *ServerTemplateCreate) SaveX(ctx context.Context) *ServerTemplate {
	v, err := stc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (stc *ServerTemplateCreate) Exec(ctx context.Context) error {
	_, err := stc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (stc *ServerTemplateCreate) ExecX(ctx context.Context) {
	if err := stc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (stc *ServerTemplateCreate) defaults() {
	if _, ok := stc.mutation.CreatedAt(); !ok {
		v := servertemplate.DefaultCreatedAt()
		stc.mutation.SetCreatedAt(v)
	}
	if _, ok := stc.mutation.AllowAdditionalDNSNames(); !ok {
		v := servertemplate.DefaultAllowAdditionalDNSNames
		stc.mutation.SetAllowAdditionalDNSNames(v)
	}
	if _, ok := stc.mutation.AllowAdditionalIps(); !ok {
		v := servertemplate.DefaultAllowAdditionalIps
		stc.mutation.SetAllowAdditionalIps(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (stc *ServerTemplateCreate) check() error {
	if _, ok := stc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "ServerTemplate.created_at"`)}
	}
	if _, ok := stc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "ServerTemplate.name"`)}
	}
	if v, ok := stc.mutation.Name(); ok {
		if err := servertemplate.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "ServerTemplate.name": %w`, err)}
		}
	}
	if _, ok := stc.mutation.CommonName(); !ok {
		return &ValidationError{Name: "common_name", err: errors.New(`ent: missing required field "ServerTemplate.common_name"`)}
	}
	if v, ok := stc.mutation.CommonName(); ok {
		if err := servertemplate.CommonNameValidator(v); err != nil {
			return &ValidationError{Name: "common_name", err: fmt.Errorf(`ent: validator failed for field "ServerTemplate.common_name": %w`, err)}
		}
	}
	if _, ok := stc.mutation.Tag(); !ok {
		return &ValidationError{Name: "tag", err: errors.New(`ent: missing required field "ServerTemplate.tag"`)}
	}
	if v, ok := stc.mutation.Tag(); ok {
		if err := servertemplate.TagValidator(v); err != nil {
			return &ValidationError{Name: "tag", err: fmt.Errorf(`ent: validator failed for field "ServerTemplate.tag": %w`, err)}
		}
	}
	if _, ok := stc.mutation.Validity(); !ok {
		return &ValidationError{Name: "validity", err: errors.New(`ent: missing required field "ServerTemplate.validity"`)}
	}
	if v, ok := stc.mutation.Validity(); ok {
		if err := servertemplate.ValidityValidator(v); err != nil {
			return &ValidationError{Name: "validity", err: fmt.Errorf(`ent: validator failed for field "ServerTemplate.validity": %w`, err)}
		}
	}
	if _, ok := stc.mutation.AllowAdditionalDNSNames(); !ok {
		return &ValidationError{Name: "allow_additional_dns_names", err: errors.New(`ent: missing required field "ServerTemplate.allow_additional_dns_names"`)}
	}
	if _, ok := stc.mutation.AllowAdditionalIps(); !ok {
		return &ValidationError{Name: "allow_additional_ips", err: errors.New(`ent: missing required field "ServerTemplate.allow_additional_ips"`)}
	}
	if v, ok := stc.mutation.ID(); ok {
		if err := servertemplate.IDValidator(v); err != nil {
			return &ValidationError{Name: "id", err: fmt.Errorf(`ent: validator failed for field "ServerTemplate.id": %w`, err)}
		}
	}
	if _, ok := stc.mutation.AuthorityID(); !ok {
		return &ValidationError{Name: "authority", err: errors.New(`ent: missing required edge "ServerTemplate.authority"`)}
	}
	return nil
}

func (stc *ServerTemplateCreate) sqlSave(ctx context.Context) (*ServerTemplate, error) {
	if err := stc.check(); err != nil {
		return nil, err
	}
	_node, _spec := stc.createSpec()
	if err := sqlgraph.CreateNode(ctx, stc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected ServerTemplate.ID type: %T", _spec.ID.Value)
		}
	}
	stc.mutation.id = &_node.ID
	stc.mutation.done = true
	return _node, nil
}

func (stc *ServerTemplateCreate) createSpec() (*ServerTemplate, *sqlgraph.CreateSpec) {
	var (
		_node = &ServerTemplate{config: stc.config}
		_spec = sqlgraph.NewCreateSpec(servertemplate.Table, sqlgraph.NewFieldSpec(servertemplate.FieldID, field.TypeString))
	)
	if id, ok := stc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := stc.mutation.CreatedAt(); ok {
		_spec.SetField(servertemplate.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := stc.mutation.Name(); ok {
		_spec.SetField(servertemplate.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := stc.mutation.CommonName(); ok {
		_spec.SetField(servertemplate.FieldCommonName, field.TypeString, value)
		_node.CommonName = value
	}
	if value, ok := stc.mutation.Tag(); ok {
		_spec.SetField(servertemplate.FieldTag, field.TypeString, value)
		_node.Tag = value
	}
	if value, ok := stc.mutation.Validity(); ok {
		_spec.SetField(servertemplate.FieldValidity, field.TypeString, value)
		_node.Validity = value
	}
	if value, ok := stc.mutation.DNSNames(); ok {
		_spec.SetField(servertemplate.FieldDNSNames, field.TypeJSON, value)
		_node.DNSNames = value
	}
	if value, ok := stc.mutation.AllowAdditionalDNSNames(); ok {
		_spec.SetField(servertemplate.FieldAllowAdditionalDNSNames, field.TypeBool, value)
		_node.AllowAdditionalDNSNames = value
	}
	if value, ok := stc.mutation.IPAddresses(); ok {
		_spec.SetField(servertemplate.FieldIPAddresses, field.TypeJSON, value)
		_node.IPAddresses = value
	}
	if value, ok := stc.mutation.AllowAdditionalIps(); ok {
		_spec.SetField(servertemplate.FieldAllowAdditionalIps, field.TypeBool, value)
		_node.AllowAdditionalIps = value
	}
	if nodes := stc.mutation.AuthorityIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   servertemplate.AuthorityTable,
			Columns: []string{servertemplate.AuthorityColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(authority.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.authority_server_templates = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := stc.mutation.APIKeysIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   servertemplate.APIKeysTable,
			Columns: []string{servertemplate.APIKeysColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(apikey.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// ServerTemplateCreateBulk is the builder for creating many ServerTemplate entities in bulk.
type ServerTemplateCreateBulk struct {
	config
	builders []*ServerTemplateCreate
}

// Save creates the ServerTemplate entities in the database.
func (stcb *ServerTemplateCreateBulk) Save(ctx context.Context) ([]*ServerTemplate, error) {
	specs := make([]*sqlgraph.CreateSpec, len(stcb.builders))
	nodes := make([]*ServerTemplate, len(stcb.builders))
	mutators := make([]Mutator, len(stcb.builders))
	for i := range stcb.builders {
		func(i int, root context.Context) {
			builder := stcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ServerTemplateMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, stcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, stcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, stcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (stcb *ServerTemplateCreateBulk) SaveX(ctx context.Context) []*ServerTemplate {
	v, err := stcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (stcb *ServerTemplateCreateBulk) Exec(ctx context.Context) error {
	_, err := stcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (stcb *ServerTemplateCreateBulk) ExecX(ctx context.Context) {
	if err := stcb.Exec(ctx); err != nil {
		panic(err)
	}
}
