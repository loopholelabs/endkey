// Code generated by go-swagger; DO NOT EDIT.

package authority

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/loopholelabs/endkey/pkg/client/models"
)

// GetAuthorityReader is a Reader for the GetAuthority structure.
type GetAuthorityReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetAuthorityReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetAuthorityOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetAuthorityBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewGetAuthorityUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetAuthorityNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 409:
		result := NewGetAuthorityConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 412:
		result := NewGetAuthorityPreconditionFailed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetAuthorityInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /authority] GetAuthority", response, response.Code())
	}
}

// NewGetAuthorityOK creates a GetAuthorityOK with default headers values
func NewGetAuthorityOK() *GetAuthorityOK {
	return &GetAuthorityOK{}
}

/*
GetAuthorityOK describes a response with status code 200, with default header values.

OK
*/
type GetAuthorityOK struct {
	Payload []*models.ModelsAuthorityResponse
}

// IsSuccess returns true when this get authority o k response has a 2xx status code
func (o *GetAuthorityOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get authority o k response has a 3xx status code
func (o *GetAuthorityOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get authority o k response has a 4xx status code
func (o *GetAuthorityOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get authority o k response has a 5xx status code
func (o *GetAuthorityOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get authority o k response a status code equal to that given
func (o *GetAuthorityOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get authority o k response
func (o *GetAuthorityOK) Code() int {
	return 200
}

func (o *GetAuthorityOK) Error() string {
	return fmt.Sprintf("[GET /authority][%d] getAuthorityOK  %+v", 200, o.Payload)
}

func (o *GetAuthorityOK) String() string {
	return fmt.Sprintf("[GET /authority][%d] getAuthorityOK  %+v", 200, o.Payload)
}

func (o *GetAuthorityOK) GetPayload() []*models.ModelsAuthorityResponse {
	return o.Payload
}

func (o *GetAuthorityOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAuthorityBadRequest creates a GetAuthorityBadRequest with default headers values
func NewGetAuthorityBadRequest() *GetAuthorityBadRequest {
	return &GetAuthorityBadRequest{}
}

/*
GetAuthorityBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type GetAuthorityBadRequest struct {
	Payload string
}

// IsSuccess returns true when this get authority bad request response has a 2xx status code
func (o *GetAuthorityBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get authority bad request response has a 3xx status code
func (o *GetAuthorityBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get authority bad request response has a 4xx status code
func (o *GetAuthorityBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this get authority bad request response has a 5xx status code
func (o *GetAuthorityBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this get authority bad request response a status code equal to that given
func (o *GetAuthorityBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the get authority bad request response
func (o *GetAuthorityBadRequest) Code() int {
	return 400
}

func (o *GetAuthorityBadRequest) Error() string {
	return fmt.Sprintf("[GET /authority][%d] getAuthorityBadRequest  %+v", 400, o.Payload)
}

func (o *GetAuthorityBadRequest) String() string {
	return fmt.Sprintf("[GET /authority][%d] getAuthorityBadRequest  %+v", 400, o.Payload)
}

func (o *GetAuthorityBadRequest) GetPayload() string {
	return o.Payload
}

func (o *GetAuthorityBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAuthorityUnauthorized creates a GetAuthorityUnauthorized with default headers values
func NewGetAuthorityUnauthorized() *GetAuthorityUnauthorized {
	return &GetAuthorityUnauthorized{}
}

/*
GetAuthorityUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type GetAuthorityUnauthorized struct {
	Payload string
}

// IsSuccess returns true when this get authority unauthorized response has a 2xx status code
func (o *GetAuthorityUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get authority unauthorized response has a 3xx status code
func (o *GetAuthorityUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get authority unauthorized response has a 4xx status code
func (o *GetAuthorityUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this get authority unauthorized response has a 5xx status code
func (o *GetAuthorityUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this get authority unauthorized response a status code equal to that given
func (o *GetAuthorityUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the get authority unauthorized response
func (o *GetAuthorityUnauthorized) Code() int {
	return 401
}

func (o *GetAuthorityUnauthorized) Error() string {
	return fmt.Sprintf("[GET /authority][%d] getAuthorityUnauthorized  %+v", 401, o.Payload)
}

func (o *GetAuthorityUnauthorized) String() string {
	return fmt.Sprintf("[GET /authority][%d] getAuthorityUnauthorized  %+v", 401, o.Payload)
}

func (o *GetAuthorityUnauthorized) GetPayload() string {
	return o.Payload
}

func (o *GetAuthorityUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAuthorityNotFound creates a GetAuthorityNotFound with default headers values
func NewGetAuthorityNotFound() *GetAuthorityNotFound {
	return &GetAuthorityNotFound{}
}

/*
GetAuthorityNotFound describes a response with status code 404, with default header values.

Not Found
*/
type GetAuthorityNotFound struct {
	Payload string
}

// IsSuccess returns true when this get authority not found response has a 2xx status code
func (o *GetAuthorityNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get authority not found response has a 3xx status code
func (o *GetAuthorityNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get authority not found response has a 4xx status code
func (o *GetAuthorityNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get authority not found response has a 5xx status code
func (o *GetAuthorityNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get authority not found response a status code equal to that given
func (o *GetAuthorityNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the get authority not found response
func (o *GetAuthorityNotFound) Code() int {
	return 404
}

func (o *GetAuthorityNotFound) Error() string {
	return fmt.Sprintf("[GET /authority][%d] getAuthorityNotFound  %+v", 404, o.Payload)
}

func (o *GetAuthorityNotFound) String() string {
	return fmt.Sprintf("[GET /authority][%d] getAuthorityNotFound  %+v", 404, o.Payload)
}

func (o *GetAuthorityNotFound) GetPayload() string {
	return o.Payload
}

func (o *GetAuthorityNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAuthorityConflict creates a GetAuthorityConflict with default headers values
func NewGetAuthorityConflict() *GetAuthorityConflict {
	return &GetAuthorityConflict{}
}

/*
GetAuthorityConflict describes a response with status code 409, with default header values.

Conflict
*/
type GetAuthorityConflict struct {
	Payload string
}

// IsSuccess returns true when this get authority conflict response has a 2xx status code
func (o *GetAuthorityConflict) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get authority conflict response has a 3xx status code
func (o *GetAuthorityConflict) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get authority conflict response has a 4xx status code
func (o *GetAuthorityConflict) IsClientError() bool {
	return true
}

// IsServerError returns true when this get authority conflict response has a 5xx status code
func (o *GetAuthorityConflict) IsServerError() bool {
	return false
}

// IsCode returns true when this get authority conflict response a status code equal to that given
func (o *GetAuthorityConflict) IsCode(code int) bool {
	return code == 409
}

// Code gets the status code for the get authority conflict response
func (o *GetAuthorityConflict) Code() int {
	return 409
}

func (o *GetAuthorityConflict) Error() string {
	return fmt.Sprintf("[GET /authority][%d] getAuthorityConflict  %+v", 409, o.Payload)
}

func (o *GetAuthorityConflict) String() string {
	return fmt.Sprintf("[GET /authority][%d] getAuthorityConflict  %+v", 409, o.Payload)
}

func (o *GetAuthorityConflict) GetPayload() string {
	return o.Payload
}

func (o *GetAuthorityConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAuthorityPreconditionFailed creates a GetAuthorityPreconditionFailed with default headers values
func NewGetAuthorityPreconditionFailed() *GetAuthorityPreconditionFailed {
	return &GetAuthorityPreconditionFailed{}
}

/*
GetAuthorityPreconditionFailed describes a response with status code 412, with default header values.

Precondition Failed
*/
type GetAuthorityPreconditionFailed struct {
	Payload string
}

// IsSuccess returns true when this get authority precondition failed response has a 2xx status code
func (o *GetAuthorityPreconditionFailed) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get authority precondition failed response has a 3xx status code
func (o *GetAuthorityPreconditionFailed) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get authority precondition failed response has a 4xx status code
func (o *GetAuthorityPreconditionFailed) IsClientError() bool {
	return true
}

// IsServerError returns true when this get authority precondition failed response has a 5xx status code
func (o *GetAuthorityPreconditionFailed) IsServerError() bool {
	return false
}

// IsCode returns true when this get authority precondition failed response a status code equal to that given
func (o *GetAuthorityPreconditionFailed) IsCode(code int) bool {
	return code == 412
}

// Code gets the status code for the get authority precondition failed response
func (o *GetAuthorityPreconditionFailed) Code() int {
	return 412
}

func (o *GetAuthorityPreconditionFailed) Error() string {
	return fmt.Sprintf("[GET /authority][%d] getAuthorityPreconditionFailed  %+v", 412, o.Payload)
}

func (o *GetAuthorityPreconditionFailed) String() string {
	return fmt.Sprintf("[GET /authority][%d] getAuthorityPreconditionFailed  %+v", 412, o.Payload)
}

func (o *GetAuthorityPreconditionFailed) GetPayload() string {
	return o.Payload
}

func (o *GetAuthorityPreconditionFailed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAuthorityInternalServerError creates a GetAuthorityInternalServerError with default headers values
func NewGetAuthorityInternalServerError() *GetAuthorityInternalServerError {
	return &GetAuthorityInternalServerError{}
}

/*
GetAuthorityInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type GetAuthorityInternalServerError struct {
	Payload string
}

// IsSuccess returns true when this get authority internal server error response has a 2xx status code
func (o *GetAuthorityInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get authority internal server error response has a 3xx status code
func (o *GetAuthorityInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get authority internal server error response has a 4xx status code
func (o *GetAuthorityInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this get authority internal server error response has a 5xx status code
func (o *GetAuthorityInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this get authority internal server error response a status code equal to that given
func (o *GetAuthorityInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the get authority internal server error response
func (o *GetAuthorityInternalServerError) Code() int {
	return 500
}

func (o *GetAuthorityInternalServerError) Error() string {
	return fmt.Sprintf("[GET /authority][%d] getAuthorityInternalServerError  %+v", 500, o.Payload)
}

func (o *GetAuthorityInternalServerError) String() string {
	return fmt.Sprintf("[GET /authority][%d] getAuthorityInternalServerError  %+v", 500, o.Payload)
}

func (o *GetAuthorityInternalServerError) GetPayload() string {
	return o.Payload
}

func (o *GetAuthorityInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
