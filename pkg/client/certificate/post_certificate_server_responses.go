// Code generated by go-swagger; DO NOT EDIT.

package certificate

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/loopholelabs/endkey/pkg/client/models"
)

// PostCertificateServerReader is a Reader for the PostCertificateServer structure.
type PostCertificateServerReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PostCertificateServerReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPostCertificateServerOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPostCertificateServerBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewPostCertificateServerUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewPostCertificateServerNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 409:
		result := NewPostCertificateServerConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 412:
		result := NewPostCertificateServerPreconditionFailed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewPostCertificateServerInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /certificate/server] PostCertificateServer", response, response.Code())
	}
}

// NewPostCertificateServerOK creates a PostCertificateServerOK with default headers values
func NewPostCertificateServerOK() *PostCertificateServerOK {
	return &PostCertificateServerOK{}
}

/*
PostCertificateServerOK describes a response with status code 200, with default header values.

OK
*/
type PostCertificateServerOK struct {
	Payload *models.ModelsServerCertificateResponse
}

// IsSuccess returns true when this post certificate server o k response has a 2xx status code
func (o *PostCertificateServerOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this post certificate server o k response has a 3xx status code
func (o *PostCertificateServerOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post certificate server o k response has a 4xx status code
func (o *PostCertificateServerOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this post certificate server o k response has a 5xx status code
func (o *PostCertificateServerOK) IsServerError() bool {
	return false
}

// IsCode returns true when this post certificate server o k response a status code equal to that given
func (o *PostCertificateServerOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the post certificate server o k response
func (o *PostCertificateServerOK) Code() int {
	return 200
}

func (o *PostCertificateServerOK) Error() string {
	return fmt.Sprintf("[POST /certificate/server][%d] postCertificateServerOK  %+v", 200, o.Payload)
}

func (o *PostCertificateServerOK) String() string {
	return fmt.Sprintf("[POST /certificate/server][%d] postCertificateServerOK  %+v", 200, o.Payload)
}

func (o *PostCertificateServerOK) GetPayload() *models.ModelsServerCertificateResponse {
	return o.Payload
}

func (o *PostCertificateServerOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ModelsServerCertificateResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostCertificateServerBadRequest creates a PostCertificateServerBadRequest with default headers values
func NewPostCertificateServerBadRequest() *PostCertificateServerBadRequest {
	return &PostCertificateServerBadRequest{}
}

/*
PostCertificateServerBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type PostCertificateServerBadRequest struct {
	Payload string
}

// IsSuccess returns true when this post certificate server bad request response has a 2xx status code
func (o *PostCertificateServerBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post certificate server bad request response has a 3xx status code
func (o *PostCertificateServerBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post certificate server bad request response has a 4xx status code
func (o *PostCertificateServerBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this post certificate server bad request response has a 5xx status code
func (o *PostCertificateServerBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this post certificate server bad request response a status code equal to that given
func (o *PostCertificateServerBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the post certificate server bad request response
func (o *PostCertificateServerBadRequest) Code() int {
	return 400
}

func (o *PostCertificateServerBadRequest) Error() string {
	return fmt.Sprintf("[POST /certificate/server][%d] postCertificateServerBadRequest  %+v", 400, o.Payload)
}

func (o *PostCertificateServerBadRequest) String() string {
	return fmt.Sprintf("[POST /certificate/server][%d] postCertificateServerBadRequest  %+v", 400, o.Payload)
}

func (o *PostCertificateServerBadRequest) GetPayload() string {
	return o.Payload
}

func (o *PostCertificateServerBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostCertificateServerUnauthorized creates a PostCertificateServerUnauthorized with default headers values
func NewPostCertificateServerUnauthorized() *PostCertificateServerUnauthorized {
	return &PostCertificateServerUnauthorized{}
}

/*
PostCertificateServerUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type PostCertificateServerUnauthorized struct {
	Payload string
}

// IsSuccess returns true when this post certificate server unauthorized response has a 2xx status code
func (o *PostCertificateServerUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post certificate server unauthorized response has a 3xx status code
func (o *PostCertificateServerUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post certificate server unauthorized response has a 4xx status code
func (o *PostCertificateServerUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this post certificate server unauthorized response has a 5xx status code
func (o *PostCertificateServerUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this post certificate server unauthorized response a status code equal to that given
func (o *PostCertificateServerUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the post certificate server unauthorized response
func (o *PostCertificateServerUnauthorized) Code() int {
	return 401
}

func (o *PostCertificateServerUnauthorized) Error() string {
	return fmt.Sprintf("[POST /certificate/server][%d] postCertificateServerUnauthorized  %+v", 401, o.Payload)
}

func (o *PostCertificateServerUnauthorized) String() string {
	return fmt.Sprintf("[POST /certificate/server][%d] postCertificateServerUnauthorized  %+v", 401, o.Payload)
}

func (o *PostCertificateServerUnauthorized) GetPayload() string {
	return o.Payload
}

func (o *PostCertificateServerUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostCertificateServerNotFound creates a PostCertificateServerNotFound with default headers values
func NewPostCertificateServerNotFound() *PostCertificateServerNotFound {
	return &PostCertificateServerNotFound{}
}

/*
PostCertificateServerNotFound describes a response with status code 404, with default header values.

Not Found
*/
type PostCertificateServerNotFound struct {
	Payload string
}

// IsSuccess returns true when this post certificate server not found response has a 2xx status code
func (o *PostCertificateServerNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post certificate server not found response has a 3xx status code
func (o *PostCertificateServerNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post certificate server not found response has a 4xx status code
func (o *PostCertificateServerNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this post certificate server not found response has a 5xx status code
func (o *PostCertificateServerNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this post certificate server not found response a status code equal to that given
func (o *PostCertificateServerNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the post certificate server not found response
func (o *PostCertificateServerNotFound) Code() int {
	return 404
}

func (o *PostCertificateServerNotFound) Error() string {
	return fmt.Sprintf("[POST /certificate/server][%d] postCertificateServerNotFound  %+v", 404, o.Payload)
}

func (o *PostCertificateServerNotFound) String() string {
	return fmt.Sprintf("[POST /certificate/server][%d] postCertificateServerNotFound  %+v", 404, o.Payload)
}

func (o *PostCertificateServerNotFound) GetPayload() string {
	return o.Payload
}

func (o *PostCertificateServerNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostCertificateServerConflict creates a PostCertificateServerConflict with default headers values
func NewPostCertificateServerConflict() *PostCertificateServerConflict {
	return &PostCertificateServerConflict{}
}

/*
PostCertificateServerConflict describes a response with status code 409, with default header values.

Conflict
*/
type PostCertificateServerConflict struct {
	Payload string
}

// IsSuccess returns true when this post certificate server conflict response has a 2xx status code
func (o *PostCertificateServerConflict) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post certificate server conflict response has a 3xx status code
func (o *PostCertificateServerConflict) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post certificate server conflict response has a 4xx status code
func (o *PostCertificateServerConflict) IsClientError() bool {
	return true
}

// IsServerError returns true when this post certificate server conflict response has a 5xx status code
func (o *PostCertificateServerConflict) IsServerError() bool {
	return false
}

// IsCode returns true when this post certificate server conflict response a status code equal to that given
func (o *PostCertificateServerConflict) IsCode(code int) bool {
	return code == 409
}

// Code gets the status code for the post certificate server conflict response
func (o *PostCertificateServerConflict) Code() int {
	return 409
}

func (o *PostCertificateServerConflict) Error() string {
	return fmt.Sprintf("[POST /certificate/server][%d] postCertificateServerConflict  %+v", 409, o.Payload)
}

func (o *PostCertificateServerConflict) String() string {
	return fmt.Sprintf("[POST /certificate/server][%d] postCertificateServerConflict  %+v", 409, o.Payload)
}

func (o *PostCertificateServerConflict) GetPayload() string {
	return o.Payload
}

func (o *PostCertificateServerConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostCertificateServerPreconditionFailed creates a PostCertificateServerPreconditionFailed with default headers values
func NewPostCertificateServerPreconditionFailed() *PostCertificateServerPreconditionFailed {
	return &PostCertificateServerPreconditionFailed{}
}

/*
PostCertificateServerPreconditionFailed describes a response with status code 412, with default header values.

Precondition Failed
*/
type PostCertificateServerPreconditionFailed struct {
	Payload string
}

// IsSuccess returns true when this post certificate server precondition failed response has a 2xx status code
func (o *PostCertificateServerPreconditionFailed) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post certificate server precondition failed response has a 3xx status code
func (o *PostCertificateServerPreconditionFailed) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post certificate server precondition failed response has a 4xx status code
func (o *PostCertificateServerPreconditionFailed) IsClientError() bool {
	return true
}

// IsServerError returns true when this post certificate server precondition failed response has a 5xx status code
func (o *PostCertificateServerPreconditionFailed) IsServerError() bool {
	return false
}

// IsCode returns true when this post certificate server precondition failed response a status code equal to that given
func (o *PostCertificateServerPreconditionFailed) IsCode(code int) bool {
	return code == 412
}

// Code gets the status code for the post certificate server precondition failed response
func (o *PostCertificateServerPreconditionFailed) Code() int {
	return 412
}

func (o *PostCertificateServerPreconditionFailed) Error() string {
	return fmt.Sprintf("[POST /certificate/server][%d] postCertificateServerPreconditionFailed  %+v", 412, o.Payload)
}

func (o *PostCertificateServerPreconditionFailed) String() string {
	return fmt.Sprintf("[POST /certificate/server][%d] postCertificateServerPreconditionFailed  %+v", 412, o.Payload)
}

func (o *PostCertificateServerPreconditionFailed) GetPayload() string {
	return o.Payload
}

func (o *PostCertificateServerPreconditionFailed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostCertificateServerInternalServerError creates a PostCertificateServerInternalServerError with default headers values
func NewPostCertificateServerInternalServerError() *PostCertificateServerInternalServerError {
	return &PostCertificateServerInternalServerError{}
}

/*
PostCertificateServerInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type PostCertificateServerInternalServerError struct {
	Payload string
}

// IsSuccess returns true when this post certificate server internal server error response has a 2xx status code
func (o *PostCertificateServerInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post certificate server internal server error response has a 3xx status code
func (o *PostCertificateServerInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post certificate server internal server error response has a 4xx status code
func (o *PostCertificateServerInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this post certificate server internal server error response has a 5xx status code
func (o *PostCertificateServerInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this post certificate server internal server error response a status code equal to that given
func (o *PostCertificateServerInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the post certificate server internal server error response
func (o *PostCertificateServerInternalServerError) Code() int {
	return 500
}

func (o *PostCertificateServerInternalServerError) Error() string {
	return fmt.Sprintf("[POST /certificate/server][%d] postCertificateServerInternalServerError  %+v", 500, o.Payload)
}

func (o *PostCertificateServerInternalServerError) String() string {
	return fmt.Sprintf("[POST /certificate/server][%d] postCertificateServerInternalServerError  %+v", 500, o.Payload)
}

func (o *PostCertificateServerInternalServerError) GetPayload() string {
	return o.Payload
}

func (o *PostCertificateServerInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
