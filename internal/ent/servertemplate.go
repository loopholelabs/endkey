// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/loopholelabs/endkey/internal/ent/authority"
	"github.com/loopholelabs/endkey/internal/ent/servertemplate"
)

// ServerTemplate is the model entity for the ServerTemplate schema.
type ServerTemplate struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// Identifier holds the value of the "identifier" field.
	Identifier string `json:"identifier,omitempty"`
	// CommonName holds the value of the "common_name" field.
	CommonName string `json:"common_name,omitempty"`
	// Tag holds the value of the "tag" field.
	Tag string `json:"tag,omitempty"`
	// Validity holds the value of the "validity" field.
	Validity string `json:"validity,omitempty"`
	// DNSNames holds the value of the "dns_names" field.
	DNSNames []string `json:"dns_names,omitempty"`
	// AllowAdditionalDNSNames holds the value of the "allow_additional_dns_names" field.
	AllowAdditionalDNSNames bool `json:"allow_additional_dns_names,omitempty"`
	// IPAddresses holds the value of the "ip_addresses" field.
	IPAddresses []string `json:"ip_addresses,omitempty"`
	// AllowAdditionalIps holds the value of the "allow_additional_ips" field.
	AllowAdditionalIps bool `json:"allow_additional_ips,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ServerTemplateQuery when eager-loading is set.
	Edges                      ServerTemplateEdges `json:"edges"`
	authority_server_templates *int
	selectValues               sql.SelectValues
}

// ServerTemplateEdges holds the relations/edges for other nodes in the graph.
type ServerTemplateEdges struct {
	// Authority holds the value of the authority edge.
	Authority *Authority `json:"authority,omitempty"`
	// APIKeys holds the value of the api_keys edge.
	APIKeys []*APIKey `json:"api_keys,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// AuthorityOrErr returns the Authority value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ServerTemplateEdges) AuthorityOrErr() (*Authority, error) {
	if e.loadedTypes[0] {
		if e.Authority == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: authority.Label}
		}
		return e.Authority, nil
	}
	return nil, &NotLoadedError{edge: "authority"}
}

// APIKeysOrErr returns the APIKeys value or an error if the edge
// was not loaded in eager-loading.
func (e ServerTemplateEdges) APIKeysOrErr() ([]*APIKey, error) {
	if e.loadedTypes[1] {
		return e.APIKeys, nil
	}
	return nil, &NotLoadedError{edge: "api_keys"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ServerTemplate) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case servertemplate.FieldDNSNames, servertemplate.FieldIPAddresses:
			values[i] = new([]byte)
		case servertemplate.FieldAllowAdditionalDNSNames, servertemplate.FieldAllowAdditionalIps:
			values[i] = new(sql.NullBool)
		case servertemplate.FieldID:
			values[i] = new(sql.NullInt64)
		case servertemplate.FieldIdentifier, servertemplate.FieldCommonName, servertemplate.FieldTag, servertemplate.FieldValidity:
			values[i] = new(sql.NullString)
		case servertemplate.FieldCreatedAt:
			values[i] = new(sql.NullTime)
		case servertemplate.ForeignKeys[0]: // authority_server_templates
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ServerTemplate fields.
func (st *ServerTemplate) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case servertemplate.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			st.ID = int(value.Int64)
		case servertemplate.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				st.CreatedAt = value.Time
			}
		case servertemplate.FieldIdentifier:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field identifier", values[i])
			} else if value.Valid {
				st.Identifier = value.String
			}
		case servertemplate.FieldCommonName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field common_name", values[i])
			} else if value.Valid {
				st.CommonName = value.String
			}
		case servertemplate.FieldTag:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field tag", values[i])
			} else if value.Valid {
				st.Tag = value.String
			}
		case servertemplate.FieldValidity:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field validity", values[i])
			} else if value.Valid {
				st.Validity = value.String
			}
		case servertemplate.FieldDNSNames:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field dns_names", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &st.DNSNames); err != nil {
					return fmt.Errorf("unmarshal field dns_names: %w", err)
				}
			}
		case servertemplate.FieldAllowAdditionalDNSNames:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field allow_additional_dns_names", values[i])
			} else if value.Valid {
				st.AllowAdditionalDNSNames = value.Bool
			}
		case servertemplate.FieldIPAddresses:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field ip_addresses", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &st.IPAddresses); err != nil {
					return fmt.Errorf("unmarshal field ip_addresses: %w", err)
				}
			}
		case servertemplate.FieldAllowAdditionalIps:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field allow_additional_ips", values[i])
			} else if value.Valid {
				st.AllowAdditionalIps = value.Bool
			}
		case servertemplate.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field authority_server_templates", value)
			} else if value.Valid {
				st.authority_server_templates = new(int)
				*st.authority_server_templates = int(value.Int64)
			}
		default:
			st.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the ServerTemplate.
// This includes values selected through modifiers, order, etc.
func (st *ServerTemplate) Value(name string) (ent.Value, error) {
	return st.selectValues.Get(name)
}

// QueryAuthority queries the "authority" edge of the ServerTemplate entity.
func (st *ServerTemplate) QueryAuthority() *AuthorityQuery {
	return NewServerTemplateClient(st.config).QueryAuthority(st)
}

// QueryAPIKeys queries the "api_keys" edge of the ServerTemplate entity.
func (st *ServerTemplate) QueryAPIKeys() *APIKeyQuery {
	return NewServerTemplateClient(st.config).QueryAPIKeys(st)
}

// Update returns a builder for updating this ServerTemplate.
// Note that you need to call ServerTemplate.Unwrap() before calling this method if this ServerTemplate
// was returned from a transaction, and the transaction was committed or rolled back.
func (st *ServerTemplate) Update() *ServerTemplateUpdateOne {
	return NewServerTemplateClient(st.config).UpdateOne(st)
}

// Unwrap unwraps the ServerTemplate entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (st *ServerTemplate) Unwrap() *ServerTemplate {
	_tx, ok := st.config.driver.(*txDriver)
	if !ok {
		panic("ent: ServerTemplate is not a transactional entity")
	}
	st.config.driver = _tx.drv
	return st
}

// String implements the fmt.Stringer.
func (st *ServerTemplate) String() string {
	var builder strings.Builder
	builder.WriteString("ServerTemplate(")
	builder.WriteString(fmt.Sprintf("id=%v, ", st.ID))
	builder.WriteString("created_at=")
	builder.WriteString(st.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("identifier=")
	builder.WriteString(st.Identifier)
	builder.WriteString(", ")
	builder.WriteString("common_name=")
	builder.WriteString(st.CommonName)
	builder.WriteString(", ")
	builder.WriteString("tag=")
	builder.WriteString(st.Tag)
	builder.WriteString(", ")
	builder.WriteString("validity=")
	builder.WriteString(st.Validity)
	builder.WriteString(", ")
	builder.WriteString("dns_names=")
	builder.WriteString(fmt.Sprintf("%v", st.DNSNames))
	builder.WriteString(", ")
	builder.WriteString("allow_additional_dns_names=")
	builder.WriteString(fmt.Sprintf("%v", st.AllowAdditionalDNSNames))
	builder.WriteString(", ")
	builder.WriteString("ip_addresses=")
	builder.WriteString(fmt.Sprintf("%v", st.IPAddresses))
	builder.WriteString(", ")
	builder.WriteString("allow_additional_ips=")
	builder.WriteString(fmt.Sprintf("%v", st.AllowAdditionalIps))
	builder.WriteByte(')')
	return builder.String()
}

// ServerTemplates is a parsable slice of ServerTemplate.
type ServerTemplates []*ServerTemplate
