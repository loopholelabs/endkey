// Code generated by go-swagger; DO NOT EDIT.

package certificate

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/loopholelabs/endkey/pkg/client/models"
)

// GetCertificateCaReader is a Reader for the GetCertificateCa structure.
type GetCertificateCaReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetCertificateCaReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetCertificateCaOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetCertificateCaBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewGetCertificateCaUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetCertificateCaNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 409:
		result := NewGetCertificateCaConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 412:
		result := NewGetCertificateCaPreconditionFailed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetCertificateCaInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /certificate/ca] GetCertificateCa", response, response.Code())
	}
}

// NewGetCertificateCaOK creates a GetCertificateCaOK with default headers values
func NewGetCertificateCaOK() *GetCertificateCaOK {
	return &GetCertificateCaOK{}
}

/*
GetCertificateCaOK describes a response with status code 200, with default header values.

OK
*/
type GetCertificateCaOK struct {
	Payload *models.ModelsCAResponse
}

// IsSuccess returns true when this get certificate ca o k response has a 2xx status code
func (o *GetCertificateCaOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get certificate ca o k response has a 3xx status code
func (o *GetCertificateCaOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get certificate ca o k response has a 4xx status code
func (o *GetCertificateCaOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get certificate ca o k response has a 5xx status code
func (o *GetCertificateCaOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get certificate ca o k response a status code equal to that given
func (o *GetCertificateCaOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get certificate ca o k response
func (o *GetCertificateCaOK) Code() int {
	return 200
}

func (o *GetCertificateCaOK) Error() string {
	return fmt.Sprintf("[GET /certificate/ca][%d] getCertificateCaOK  %+v", 200, o.Payload)
}

func (o *GetCertificateCaOK) String() string {
	return fmt.Sprintf("[GET /certificate/ca][%d] getCertificateCaOK  %+v", 200, o.Payload)
}

func (o *GetCertificateCaOK) GetPayload() *models.ModelsCAResponse {
	return o.Payload
}

func (o *GetCertificateCaOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ModelsCAResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetCertificateCaBadRequest creates a GetCertificateCaBadRequest with default headers values
func NewGetCertificateCaBadRequest() *GetCertificateCaBadRequest {
	return &GetCertificateCaBadRequest{}
}

/*
GetCertificateCaBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type GetCertificateCaBadRequest struct {
	Payload string
}

// IsSuccess returns true when this get certificate ca bad request response has a 2xx status code
func (o *GetCertificateCaBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get certificate ca bad request response has a 3xx status code
func (o *GetCertificateCaBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get certificate ca bad request response has a 4xx status code
func (o *GetCertificateCaBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this get certificate ca bad request response has a 5xx status code
func (o *GetCertificateCaBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this get certificate ca bad request response a status code equal to that given
func (o *GetCertificateCaBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the get certificate ca bad request response
func (o *GetCertificateCaBadRequest) Code() int {
	return 400
}

func (o *GetCertificateCaBadRequest) Error() string {
	return fmt.Sprintf("[GET /certificate/ca][%d] getCertificateCaBadRequest  %+v", 400, o.Payload)
}

func (o *GetCertificateCaBadRequest) String() string {
	return fmt.Sprintf("[GET /certificate/ca][%d] getCertificateCaBadRequest  %+v", 400, o.Payload)
}

func (o *GetCertificateCaBadRequest) GetPayload() string {
	return o.Payload
}

func (o *GetCertificateCaBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetCertificateCaUnauthorized creates a GetCertificateCaUnauthorized with default headers values
func NewGetCertificateCaUnauthorized() *GetCertificateCaUnauthorized {
	return &GetCertificateCaUnauthorized{}
}

/*
GetCertificateCaUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type GetCertificateCaUnauthorized struct {
	Payload string
}

// IsSuccess returns true when this get certificate ca unauthorized response has a 2xx status code
func (o *GetCertificateCaUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get certificate ca unauthorized response has a 3xx status code
func (o *GetCertificateCaUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get certificate ca unauthorized response has a 4xx status code
func (o *GetCertificateCaUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this get certificate ca unauthorized response has a 5xx status code
func (o *GetCertificateCaUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this get certificate ca unauthorized response a status code equal to that given
func (o *GetCertificateCaUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the get certificate ca unauthorized response
func (o *GetCertificateCaUnauthorized) Code() int {
	return 401
}

func (o *GetCertificateCaUnauthorized) Error() string {
	return fmt.Sprintf("[GET /certificate/ca][%d] getCertificateCaUnauthorized  %+v", 401, o.Payload)
}

func (o *GetCertificateCaUnauthorized) String() string {
	return fmt.Sprintf("[GET /certificate/ca][%d] getCertificateCaUnauthorized  %+v", 401, o.Payload)
}

func (o *GetCertificateCaUnauthorized) GetPayload() string {
	return o.Payload
}

func (o *GetCertificateCaUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetCertificateCaNotFound creates a GetCertificateCaNotFound with default headers values
func NewGetCertificateCaNotFound() *GetCertificateCaNotFound {
	return &GetCertificateCaNotFound{}
}

/*
GetCertificateCaNotFound describes a response with status code 404, with default header values.

Not Found
*/
type GetCertificateCaNotFound struct {
	Payload string
}

// IsSuccess returns true when this get certificate ca not found response has a 2xx status code
func (o *GetCertificateCaNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get certificate ca not found response has a 3xx status code
func (o *GetCertificateCaNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get certificate ca not found response has a 4xx status code
func (o *GetCertificateCaNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get certificate ca not found response has a 5xx status code
func (o *GetCertificateCaNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get certificate ca not found response a status code equal to that given
func (o *GetCertificateCaNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the get certificate ca not found response
func (o *GetCertificateCaNotFound) Code() int {
	return 404
}

func (o *GetCertificateCaNotFound) Error() string {
	return fmt.Sprintf("[GET /certificate/ca][%d] getCertificateCaNotFound  %+v", 404, o.Payload)
}

func (o *GetCertificateCaNotFound) String() string {
	return fmt.Sprintf("[GET /certificate/ca][%d] getCertificateCaNotFound  %+v", 404, o.Payload)
}

func (o *GetCertificateCaNotFound) GetPayload() string {
	return o.Payload
}

func (o *GetCertificateCaNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetCertificateCaConflict creates a GetCertificateCaConflict with default headers values
func NewGetCertificateCaConflict() *GetCertificateCaConflict {
	return &GetCertificateCaConflict{}
}

/*
GetCertificateCaConflict describes a response with status code 409, with default header values.

Conflict
*/
type GetCertificateCaConflict struct {
	Payload string
}

// IsSuccess returns true when this get certificate ca conflict response has a 2xx status code
func (o *GetCertificateCaConflict) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get certificate ca conflict response has a 3xx status code
func (o *GetCertificateCaConflict) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get certificate ca conflict response has a 4xx status code
func (o *GetCertificateCaConflict) IsClientError() bool {
	return true
}

// IsServerError returns true when this get certificate ca conflict response has a 5xx status code
func (o *GetCertificateCaConflict) IsServerError() bool {
	return false
}

// IsCode returns true when this get certificate ca conflict response a status code equal to that given
func (o *GetCertificateCaConflict) IsCode(code int) bool {
	return code == 409
}

// Code gets the status code for the get certificate ca conflict response
func (o *GetCertificateCaConflict) Code() int {
	return 409
}

func (o *GetCertificateCaConflict) Error() string {
	return fmt.Sprintf("[GET /certificate/ca][%d] getCertificateCaConflict  %+v", 409, o.Payload)
}

func (o *GetCertificateCaConflict) String() string {
	return fmt.Sprintf("[GET /certificate/ca][%d] getCertificateCaConflict  %+v", 409, o.Payload)
}

func (o *GetCertificateCaConflict) GetPayload() string {
	return o.Payload
}

func (o *GetCertificateCaConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetCertificateCaPreconditionFailed creates a GetCertificateCaPreconditionFailed with default headers values
func NewGetCertificateCaPreconditionFailed() *GetCertificateCaPreconditionFailed {
	return &GetCertificateCaPreconditionFailed{}
}

/*
GetCertificateCaPreconditionFailed describes a response with status code 412, with default header values.

Precondition Failed
*/
type GetCertificateCaPreconditionFailed struct {
	Payload string
}

// IsSuccess returns true when this get certificate ca precondition failed response has a 2xx status code
func (o *GetCertificateCaPreconditionFailed) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get certificate ca precondition failed response has a 3xx status code
func (o *GetCertificateCaPreconditionFailed) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get certificate ca precondition failed response has a 4xx status code
func (o *GetCertificateCaPreconditionFailed) IsClientError() bool {
	return true
}

// IsServerError returns true when this get certificate ca precondition failed response has a 5xx status code
func (o *GetCertificateCaPreconditionFailed) IsServerError() bool {
	return false
}

// IsCode returns true when this get certificate ca precondition failed response a status code equal to that given
func (o *GetCertificateCaPreconditionFailed) IsCode(code int) bool {
	return code == 412
}

// Code gets the status code for the get certificate ca precondition failed response
func (o *GetCertificateCaPreconditionFailed) Code() int {
	return 412
}

func (o *GetCertificateCaPreconditionFailed) Error() string {
	return fmt.Sprintf("[GET /certificate/ca][%d] getCertificateCaPreconditionFailed  %+v", 412, o.Payload)
}

func (o *GetCertificateCaPreconditionFailed) String() string {
	return fmt.Sprintf("[GET /certificate/ca][%d] getCertificateCaPreconditionFailed  %+v", 412, o.Payload)
}

func (o *GetCertificateCaPreconditionFailed) GetPayload() string {
	return o.Payload
}

func (o *GetCertificateCaPreconditionFailed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetCertificateCaInternalServerError creates a GetCertificateCaInternalServerError with default headers values
func NewGetCertificateCaInternalServerError() *GetCertificateCaInternalServerError {
	return &GetCertificateCaInternalServerError{}
}

/*
GetCertificateCaInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type GetCertificateCaInternalServerError struct {
	Payload string
}

// IsSuccess returns true when this get certificate ca internal server error response has a 2xx status code
func (o *GetCertificateCaInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get certificate ca internal server error response has a 3xx status code
func (o *GetCertificateCaInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get certificate ca internal server error response has a 4xx status code
func (o *GetCertificateCaInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this get certificate ca internal server error response has a 5xx status code
func (o *GetCertificateCaInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this get certificate ca internal server error response a status code equal to that given
func (o *GetCertificateCaInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the get certificate ca internal server error response
func (o *GetCertificateCaInternalServerError) Code() int {
	return 500
}

func (o *GetCertificateCaInternalServerError) Error() string {
	return fmt.Sprintf("[GET /certificate/ca][%d] getCertificateCaInternalServerError  %+v", 500, o.Payload)
}

func (o *GetCertificateCaInternalServerError) String() string {
	return fmt.Sprintf("[GET /certificate/ca][%d] getCertificateCaInternalServerError  %+v", 500, o.Payload)
}

func (o *GetCertificateCaInternalServerError) GetPayload() string {
	return o.Payload
}

func (o *GetCertificateCaInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
