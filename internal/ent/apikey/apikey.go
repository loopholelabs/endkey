// Code generated by ent, DO NOT EDIT.

package apikey

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the apikey type in the database.
	Label = "api_key"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldIdentifier holds the string denoting the identifier field in the database.
	FieldIdentifier = "identifier"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldSalt holds the string denoting the salt field in the database.
	FieldSalt = "salt"
	// FieldHash holds the string denoting the hash field in the database.
	FieldHash = "hash"
	// EdgeAuthority holds the string denoting the authority edge name in mutations.
	EdgeAuthority = "authority"
	// EdgeServerTemplate holds the string denoting the server_template edge name in mutations.
	EdgeServerTemplate = "server_template"
	// EdgeClientTemplate holds the string denoting the client_template edge name in mutations.
	EdgeClientTemplate = "client_template"
	// Table holds the table name of the apikey in the database.
	Table = "api_keys"
	// AuthorityTable is the table that holds the authority relation/edge.
	AuthorityTable = "api_keys"
	// AuthorityInverseTable is the table name for the Authority entity.
	// It exists in this package in order to avoid circular dependency with the "authority" package.
	AuthorityInverseTable = "authorities"
	// AuthorityColumn is the table column denoting the authority relation/edge.
	AuthorityColumn = "authority_api_keys"
	// ServerTemplateTable is the table that holds the server_template relation/edge.
	ServerTemplateTable = "api_keys"
	// ServerTemplateInverseTable is the table name for the ServerTemplate entity.
	// It exists in this package in order to avoid circular dependency with the "servertemplate" package.
	ServerTemplateInverseTable = "server_templates"
	// ServerTemplateColumn is the table column denoting the server_template relation/edge.
	ServerTemplateColumn = "server_template_api_keys"
	// ClientTemplateTable is the table that holds the client_template relation/edge.
	ClientTemplateTable = "api_keys"
	// ClientTemplateInverseTable is the table name for the ClientTemplate entity.
	// It exists in this package in order to avoid circular dependency with the "clienttemplate" package.
	ClientTemplateInverseTable = "client_templates"
	// ClientTemplateColumn is the table column denoting the client_template relation/edge.
	ClientTemplateColumn = "client_template_api_keys"
)

// Columns holds all SQL columns for apikey fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldIdentifier,
	FieldName,
	FieldSalt,
	FieldHash,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "api_keys"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"authority_api_keys",
	"client_template_api_keys",
	"server_template_api_keys",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// IdentifierValidator is a validator for the "identifier" field. It is called by the builders before save.
	IdentifierValidator func(string) error
	// NameValidator is a validator for the "name" field. It is called by the builders before save.
	NameValidator func(string) error
	// SaltValidator is a validator for the "salt" field. It is called by the builders before save.
	SaltValidator func([]byte) error
	// HashValidator is a validator for the "hash" field. It is called by the builders before save.
	HashValidator func([]byte) error
)

// OrderOption defines the ordering options for the APIKey queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByIdentifier orders the results by the identifier field.
func ByIdentifier(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIdentifier, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByAuthorityField orders the results by authority field.
func ByAuthorityField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newAuthorityStep(), sql.OrderByField(field, opts...))
	}
}

// ByServerTemplateField orders the results by server_template field.
func ByServerTemplateField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newServerTemplateStep(), sql.OrderByField(field, opts...))
	}
}

// ByClientTemplateField orders the results by client_template field.
func ByClientTemplateField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newClientTemplateStep(), sql.OrderByField(field, opts...))
	}
}
func newAuthorityStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(AuthorityInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, AuthorityTable, AuthorityColumn),
	)
}
func newServerTemplateStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ServerTemplateInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, ServerTemplateTable, ServerTemplateColumn),
	)
}
func newClientTemplateStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ClientTemplateInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, ClientTemplateTable, ClientTemplateColumn),
	)
}
