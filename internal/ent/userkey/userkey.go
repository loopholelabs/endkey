// Code generated by ent, DO NOT EDIT.

package userkey

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the userkey type in the database.
	Label = "user_key"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldSalt holds the string denoting the salt field in the database.
	FieldSalt = "salt"
	// FieldHash holds the string denoting the hash field in the database.
	FieldHash = "hash"
	// EdgeRootKey holds the string denoting the root_key edge name in mutations.
	EdgeRootKey = "root_key"
	// EdgeAuthorities holds the string denoting the authorities edge name in mutations.
	EdgeAuthorities = "authorities"
	// Table holds the table name of the userkey in the database.
	Table = "user_keys"
	// RootKeyTable is the table that holds the root_key relation/edge.
	RootKeyTable = "user_keys"
	// RootKeyInverseTable is the table name for the RootKey entity.
	// It exists in this package in order to avoid circular dependency with the "rootkey" package.
	RootKeyInverseTable = "root_keys"
	// RootKeyColumn is the table column denoting the root_key relation/edge.
	RootKeyColumn = "root_key_user_keys"
	// AuthoritiesTable is the table that holds the authorities relation/edge.
	AuthoritiesTable = "authorities"
	// AuthoritiesInverseTable is the table name for the Authority entity.
	// It exists in this package in order to avoid circular dependency with the "authority" package.
	AuthoritiesInverseTable = "authorities"
	// AuthoritiesColumn is the table column denoting the authorities relation/edge.
	AuthoritiesColumn = "user_key_authorities"
)

// Columns holds all SQL columns for userkey fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldName,
	FieldSalt,
	FieldHash,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "user_keys"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"root_key_user_keys",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// NameValidator is a validator for the "name" field. It is called by the builders before save.
	NameValidator func(string) error
	// SaltValidator is a validator for the "salt" field. It is called by the builders before save.
	SaltValidator func([]byte) error
	// HashValidator is a validator for the "hash" field. It is called by the builders before save.
	HashValidator func([]byte) error
	// IDValidator is a validator for the "id" field. It is called by the builders before save.
	IDValidator func(string) error
)

// OrderOption defines the ordering options for the UserKey queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByRootKeyField orders the results by root_key field.
func ByRootKeyField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newRootKeyStep(), sql.OrderByField(field, opts...))
	}
}

// ByAuthoritiesCount orders the results by authorities count.
func ByAuthoritiesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newAuthoritiesStep(), opts...)
	}
}

// ByAuthorities orders the results by authorities terms.
func ByAuthorities(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newAuthoritiesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newRootKeyStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(RootKeyInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, RootKeyTable, RootKeyColumn),
	)
}
func newAuthoritiesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(AuthoritiesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, AuthoritiesTable, AuthoritiesColumn),
	)
}
