// Code generated by go-swagger; DO NOT EDIT.

package apikey

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// DeleteApikeyReader is a Reader for the DeleteApikey structure.
type DeleteApikeyReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DeleteApikeyReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewDeleteApikeyOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewDeleteApikeyBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewDeleteApikeyUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewDeleteApikeyNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 409:
		result := NewDeleteApikeyConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 412:
		result := NewDeleteApikeyPreconditionFailed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewDeleteApikeyInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[DELETE /apikey] DeleteApikey", response, response.Code())
	}
}

// NewDeleteApikeyOK creates a DeleteApikeyOK with default headers values
func NewDeleteApikeyOK() *DeleteApikeyOK {
	return &DeleteApikeyOK{}
}

/*
DeleteApikeyOK describes a response with status code 200, with default header values.

OK
*/
type DeleteApikeyOK struct {
	Payload string
}

// IsSuccess returns true when this delete apikey o k response has a 2xx status code
func (o *DeleteApikeyOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this delete apikey o k response has a 3xx status code
func (o *DeleteApikeyOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete apikey o k response has a 4xx status code
func (o *DeleteApikeyOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this delete apikey o k response has a 5xx status code
func (o *DeleteApikeyOK) IsServerError() bool {
	return false
}

// IsCode returns true when this delete apikey o k response a status code equal to that given
func (o *DeleteApikeyOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the delete apikey o k response
func (o *DeleteApikeyOK) Code() int {
	return 200
}

func (o *DeleteApikeyOK) Error() string {
	return fmt.Sprintf("[DELETE /apikey][%d] deleteApikeyOK  %+v", 200, o.Payload)
}

func (o *DeleteApikeyOK) String() string {
	return fmt.Sprintf("[DELETE /apikey][%d] deleteApikeyOK  %+v", 200, o.Payload)
}

func (o *DeleteApikeyOK) GetPayload() string {
	return o.Payload
}

func (o *DeleteApikeyOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteApikeyBadRequest creates a DeleteApikeyBadRequest with default headers values
func NewDeleteApikeyBadRequest() *DeleteApikeyBadRequest {
	return &DeleteApikeyBadRequest{}
}

/*
DeleteApikeyBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type DeleteApikeyBadRequest struct {
	Payload string
}

// IsSuccess returns true when this delete apikey bad request response has a 2xx status code
func (o *DeleteApikeyBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete apikey bad request response has a 3xx status code
func (o *DeleteApikeyBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete apikey bad request response has a 4xx status code
func (o *DeleteApikeyBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete apikey bad request response has a 5xx status code
func (o *DeleteApikeyBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this delete apikey bad request response a status code equal to that given
func (o *DeleteApikeyBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the delete apikey bad request response
func (o *DeleteApikeyBadRequest) Code() int {
	return 400
}

func (o *DeleteApikeyBadRequest) Error() string {
	return fmt.Sprintf("[DELETE /apikey][%d] deleteApikeyBadRequest  %+v", 400, o.Payload)
}

func (o *DeleteApikeyBadRequest) String() string {
	return fmt.Sprintf("[DELETE /apikey][%d] deleteApikeyBadRequest  %+v", 400, o.Payload)
}

func (o *DeleteApikeyBadRequest) GetPayload() string {
	return o.Payload
}

func (o *DeleteApikeyBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteApikeyUnauthorized creates a DeleteApikeyUnauthorized with default headers values
func NewDeleteApikeyUnauthorized() *DeleteApikeyUnauthorized {
	return &DeleteApikeyUnauthorized{}
}

/*
DeleteApikeyUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type DeleteApikeyUnauthorized struct {
	Payload string
}

// IsSuccess returns true when this delete apikey unauthorized response has a 2xx status code
func (o *DeleteApikeyUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete apikey unauthorized response has a 3xx status code
func (o *DeleteApikeyUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete apikey unauthorized response has a 4xx status code
func (o *DeleteApikeyUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete apikey unauthorized response has a 5xx status code
func (o *DeleteApikeyUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this delete apikey unauthorized response a status code equal to that given
func (o *DeleteApikeyUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the delete apikey unauthorized response
func (o *DeleteApikeyUnauthorized) Code() int {
	return 401
}

func (o *DeleteApikeyUnauthorized) Error() string {
	return fmt.Sprintf("[DELETE /apikey][%d] deleteApikeyUnauthorized  %+v", 401, o.Payload)
}

func (o *DeleteApikeyUnauthorized) String() string {
	return fmt.Sprintf("[DELETE /apikey][%d] deleteApikeyUnauthorized  %+v", 401, o.Payload)
}

func (o *DeleteApikeyUnauthorized) GetPayload() string {
	return o.Payload
}

func (o *DeleteApikeyUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteApikeyNotFound creates a DeleteApikeyNotFound with default headers values
func NewDeleteApikeyNotFound() *DeleteApikeyNotFound {
	return &DeleteApikeyNotFound{}
}

/*
DeleteApikeyNotFound describes a response with status code 404, with default header values.

Not Found
*/
type DeleteApikeyNotFound struct {
	Payload string
}

// IsSuccess returns true when this delete apikey not found response has a 2xx status code
func (o *DeleteApikeyNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete apikey not found response has a 3xx status code
func (o *DeleteApikeyNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete apikey not found response has a 4xx status code
func (o *DeleteApikeyNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete apikey not found response has a 5xx status code
func (o *DeleteApikeyNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this delete apikey not found response a status code equal to that given
func (o *DeleteApikeyNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the delete apikey not found response
func (o *DeleteApikeyNotFound) Code() int {
	return 404
}

func (o *DeleteApikeyNotFound) Error() string {
	return fmt.Sprintf("[DELETE /apikey][%d] deleteApikeyNotFound  %+v", 404, o.Payload)
}

func (o *DeleteApikeyNotFound) String() string {
	return fmt.Sprintf("[DELETE /apikey][%d] deleteApikeyNotFound  %+v", 404, o.Payload)
}

func (o *DeleteApikeyNotFound) GetPayload() string {
	return o.Payload
}

func (o *DeleteApikeyNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteApikeyConflict creates a DeleteApikeyConflict with default headers values
func NewDeleteApikeyConflict() *DeleteApikeyConflict {
	return &DeleteApikeyConflict{}
}

/*
DeleteApikeyConflict describes a response with status code 409, with default header values.

Conflict
*/
type DeleteApikeyConflict struct {
	Payload string
}

// IsSuccess returns true when this delete apikey conflict response has a 2xx status code
func (o *DeleteApikeyConflict) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete apikey conflict response has a 3xx status code
func (o *DeleteApikeyConflict) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete apikey conflict response has a 4xx status code
func (o *DeleteApikeyConflict) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete apikey conflict response has a 5xx status code
func (o *DeleteApikeyConflict) IsServerError() bool {
	return false
}

// IsCode returns true when this delete apikey conflict response a status code equal to that given
func (o *DeleteApikeyConflict) IsCode(code int) bool {
	return code == 409
}

// Code gets the status code for the delete apikey conflict response
func (o *DeleteApikeyConflict) Code() int {
	return 409
}

func (o *DeleteApikeyConflict) Error() string {
	return fmt.Sprintf("[DELETE /apikey][%d] deleteApikeyConflict  %+v", 409, o.Payload)
}

func (o *DeleteApikeyConflict) String() string {
	return fmt.Sprintf("[DELETE /apikey][%d] deleteApikeyConflict  %+v", 409, o.Payload)
}

func (o *DeleteApikeyConflict) GetPayload() string {
	return o.Payload
}

func (o *DeleteApikeyConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteApikeyPreconditionFailed creates a DeleteApikeyPreconditionFailed with default headers values
func NewDeleteApikeyPreconditionFailed() *DeleteApikeyPreconditionFailed {
	return &DeleteApikeyPreconditionFailed{}
}

/*
DeleteApikeyPreconditionFailed describes a response with status code 412, with default header values.

Precondition Failed
*/
type DeleteApikeyPreconditionFailed struct {
	Payload string
}

// IsSuccess returns true when this delete apikey precondition failed response has a 2xx status code
func (o *DeleteApikeyPreconditionFailed) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete apikey precondition failed response has a 3xx status code
func (o *DeleteApikeyPreconditionFailed) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete apikey precondition failed response has a 4xx status code
func (o *DeleteApikeyPreconditionFailed) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete apikey precondition failed response has a 5xx status code
func (o *DeleteApikeyPreconditionFailed) IsServerError() bool {
	return false
}

// IsCode returns true when this delete apikey precondition failed response a status code equal to that given
func (o *DeleteApikeyPreconditionFailed) IsCode(code int) bool {
	return code == 412
}

// Code gets the status code for the delete apikey precondition failed response
func (o *DeleteApikeyPreconditionFailed) Code() int {
	return 412
}

func (o *DeleteApikeyPreconditionFailed) Error() string {
	return fmt.Sprintf("[DELETE /apikey][%d] deleteApikeyPreconditionFailed  %+v", 412, o.Payload)
}

func (o *DeleteApikeyPreconditionFailed) String() string {
	return fmt.Sprintf("[DELETE /apikey][%d] deleteApikeyPreconditionFailed  %+v", 412, o.Payload)
}

func (o *DeleteApikeyPreconditionFailed) GetPayload() string {
	return o.Payload
}

func (o *DeleteApikeyPreconditionFailed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteApikeyInternalServerError creates a DeleteApikeyInternalServerError with default headers values
func NewDeleteApikeyInternalServerError() *DeleteApikeyInternalServerError {
	return &DeleteApikeyInternalServerError{}
}

/*
DeleteApikeyInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type DeleteApikeyInternalServerError struct {
	Payload string
}

// IsSuccess returns true when this delete apikey internal server error response has a 2xx status code
func (o *DeleteApikeyInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete apikey internal server error response has a 3xx status code
func (o *DeleteApikeyInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete apikey internal server error response has a 4xx status code
func (o *DeleteApikeyInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this delete apikey internal server error response has a 5xx status code
func (o *DeleteApikeyInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this delete apikey internal server error response a status code equal to that given
func (o *DeleteApikeyInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the delete apikey internal server error response
func (o *DeleteApikeyInternalServerError) Code() int {
	return 500
}

func (o *DeleteApikeyInternalServerError) Error() string {
	return fmt.Sprintf("[DELETE /apikey][%d] deleteApikeyInternalServerError  %+v", 500, o.Payload)
}

func (o *DeleteApikeyInternalServerError) String() string {
	return fmt.Sprintf("[DELETE /apikey][%d] deleteApikeyInternalServerError  %+v", 500, o.Payload)
}

func (o *DeleteApikeyInternalServerError) GetPayload() string {
	return o.Payload
}

func (o *DeleteApikeyInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
