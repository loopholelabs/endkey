// Code generated by go-swagger; DO NOT EDIT.

package template

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/loopholelabs/endkey/pkg/client/models"
)

// PostTemplateReader is a Reader for the PostTemplate structure.
type PostTemplateReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PostTemplateReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPostTemplateOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPostTemplateBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewPostTemplateUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewPostTemplateNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 409:
		result := NewPostTemplateConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 412:
		result := NewPostTemplatePreconditionFailed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewPostTemplateInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /template] PostTemplate", response, response.Code())
	}
}

// NewPostTemplateOK creates a PostTemplateOK with default headers values
func NewPostTemplateOK() *PostTemplateOK {
	return &PostTemplateOK{}
}

/*
PostTemplateOK describes a response with status code 200, with default header values.

OK
*/
type PostTemplateOK struct {
	Payload *models.ModelsTemplateResponse
}

// IsSuccess returns true when this post template o k response has a 2xx status code
func (o *PostTemplateOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this post template o k response has a 3xx status code
func (o *PostTemplateOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post template o k response has a 4xx status code
func (o *PostTemplateOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this post template o k response has a 5xx status code
func (o *PostTemplateOK) IsServerError() bool {
	return false
}

// IsCode returns true when this post template o k response a status code equal to that given
func (o *PostTemplateOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the post template o k response
func (o *PostTemplateOK) Code() int {
	return 200
}

func (o *PostTemplateOK) Error() string {
	return fmt.Sprintf("[POST /template][%d] postTemplateOK  %+v", 200, o.Payload)
}

func (o *PostTemplateOK) String() string {
	return fmt.Sprintf("[POST /template][%d] postTemplateOK  %+v", 200, o.Payload)
}

func (o *PostTemplateOK) GetPayload() *models.ModelsTemplateResponse {
	return o.Payload
}

func (o *PostTemplateOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ModelsTemplateResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostTemplateBadRequest creates a PostTemplateBadRequest with default headers values
func NewPostTemplateBadRequest() *PostTemplateBadRequest {
	return &PostTemplateBadRequest{}
}

/*
PostTemplateBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type PostTemplateBadRequest struct {
	Payload string
}

// IsSuccess returns true when this post template bad request response has a 2xx status code
func (o *PostTemplateBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post template bad request response has a 3xx status code
func (o *PostTemplateBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post template bad request response has a 4xx status code
func (o *PostTemplateBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this post template bad request response has a 5xx status code
func (o *PostTemplateBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this post template bad request response a status code equal to that given
func (o *PostTemplateBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the post template bad request response
func (o *PostTemplateBadRequest) Code() int {
	return 400
}

func (o *PostTemplateBadRequest) Error() string {
	return fmt.Sprintf("[POST /template][%d] postTemplateBadRequest  %+v", 400, o.Payload)
}

func (o *PostTemplateBadRequest) String() string {
	return fmt.Sprintf("[POST /template][%d] postTemplateBadRequest  %+v", 400, o.Payload)
}

func (o *PostTemplateBadRequest) GetPayload() string {
	return o.Payload
}

func (o *PostTemplateBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostTemplateUnauthorized creates a PostTemplateUnauthorized with default headers values
func NewPostTemplateUnauthorized() *PostTemplateUnauthorized {
	return &PostTemplateUnauthorized{}
}

/*
PostTemplateUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type PostTemplateUnauthorized struct {
	Payload string
}

// IsSuccess returns true when this post template unauthorized response has a 2xx status code
func (o *PostTemplateUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post template unauthorized response has a 3xx status code
func (o *PostTemplateUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post template unauthorized response has a 4xx status code
func (o *PostTemplateUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this post template unauthorized response has a 5xx status code
func (o *PostTemplateUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this post template unauthorized response a status code equal to that given
func (o *PostTemplateUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the post template unauthorized response
func (o *PostTemplateUnauthorized) Code() int {
	return 401
}

func (o *PostTemplateUnauthorized) Error() string {
	return fmt.Sprintf("[POST /template][%d] postTemplateUnauthorized  %+v", 401, o.Payload)
}

func (o *PostTemplateUnauthorized) String() string {
	return fmt.Sprintf("[POST /template][%d] postTemplateUnauthorized  %+v", 401, o.Payload)
}

func (o *PostTemplateUnauthorized) GetPayload() string {
	return o.Payload
}

func (o *PostTemplateUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostTemplateNotFound creates a PostTemplateNotFound with default headers values
func NewPostTemplateNotFound() *PostTemplateNotFound {
	return &PostTemplateNotFound{}
}

/*
PostTemplateNotFound describes a response with status code 404, with default header values.

Not Found
*/
type PostTemplateNotFound struct {
	Payload string
}

// IsSuccess returns true when this post template not found response has a 2xx status code
func (o *PostTemplateNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post template not found response has a 3xx status code
func (o *PostTemplateNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post template not found response has a 4xx status code
func (o *PostTemplateNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this post template not found response has a 5xx status code
func (o *PostTemplateNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this post template not found response a status code equal to that given
func (o *PostTemplateNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the post template not found response
func (o *PostTemplateNotFound) Code() int {
	return 404
}

func (o *PostTemplateNotFound) Error() string {
	return fmt.Sprintf("[POST /template][%d] postTemplateNotFound  %+v", 404, o.Payload)
}

func (o *PostTemplateNotFound) String() string {
	return fmt.Sprintf("[POST /template][%d] postTemplateNotFound  %+v", 404, o.Payload)
}

func (o *PostTemplateNotFound) GetPayload() string {
	return o.Payload
}

func (o *PostTemplateNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostTemplateConflict creates a PostTemplateConflict with default headers values
func NewPostTemplateConflict() *PostTemplateConflict {
	return &PostTemplateConflict{}
}

/*
PostTemplateConflict describes a response with status code 409, with default header values.

Conflict
*/
type PostTemplateConflict struct {
	Payload string
}

// IsSuccess returns true when this post template conflict response has a 2xx status code
func (o *PostTemplateConflict) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post template conflict response has a 3xx status code
func (o *PostTemplateConflict) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post template conflict response has a 4xx status code
func (o *PostTemplateConflict) IsClientError() bool {
	return true
}

// IsServerError returns true when this post template conflict response has a 5xx status code
func (o *PostTemplateConflict) IsServerError() bool {
	return false
}

// IsCode returns true when this post template conflict response a status code equal to that given
func (o *PostTemplateConflict) IsCode(code int) bool {
	return code == 409
}

// Code gets the status code for the post template conflict response
func (o *PostTemplateConflict) Code() int {
	return 409
}

func (o *PostTemplateConflict) Error() string {
	return fmt.Sprintf("[POST /template][%d] postTemplateConflict  %+v", 409, o.Payload)
}

func (o *PostTemplateConflict) String() string {
	return fmt.Sprintf("[POST /template][%d] postTemplateConflict  %+v", 409, o.Payload)
}

func (o *PostTemplateConflict) GetPayload() string {
	return o.Payload
}

func (o *PostTemplateConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostTemplatePreconditionFailed creates a PostTemplatePreconditionFailed with default headers values
func NewPostTemplatePreconditionFailed() *PostTemplatePreconditionFailed {
	return &PostTemplatePreconditionFailed{}
}

/*
PostTemplatePreconditionFailed describes a response with status code 412, with default header values.

Precondition Failed
*/
type PostTemplatePreconditionFailed struct {
	Payload string
}

// IsSuccess returns true when this post template precondition failed response has a 2xx status code
func (o *PostTemplatePreconditionFailed) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post template precondition failed response has a 3xx status code
func (o *PostTemplatePreconditionFailed) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post template precondition failed response has a 4xx status code
func (o *PostTemplatePreconditionFailed) IsClientError() bool {
	return true
}

// IsServerError returns true when this post template precondition failed response has a 5xx status code
func (o *PostTemplatePreconditionFailed) IsServerError() bool {
	return false
}

// IsCode returns true when this post template precondition failed response a status code equal to that given
func (o *PostTemplatePreconditionFailed) IsCode(code int) bool {
	return code == 412
}

// Code gets the status code for the post template precondition failed response
func (o *PostTemplatePreconditionFailed) Code() int {
	return 412
}

func (o *PostTemplatePreconditionFailed) Error() string {
	return fmt.Sprintf("[POST /template][%d] postTemplatePreconditionFailed  %+v", 412, o.Payload)
}

func (o *PostTemplatePreconditionFailed) String() string {
	return fmt.Sprintf("[POST /template][%d] postTemplatePreconditionFailed  %+v", 412, o.Payload)
}

func (o *PostTemplatePreconditionFailed) GetPayload() string {
	return o.Payload
}

func (o *PostTemplatePreconditionFailed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostTemplateInternalServerError creates a PostTemplateInternalServerError with default headers values
func NewPostTemplateInternalServerError() *PostTemplateInternalServerError {
	return &PostTemplateInternalServerError{}
}

/*
PostTemplateInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type PostTemplateInternalServerError struct {
	Payload string
}

// IsSuccess returns true when this post template internal server error response has a 2xx status code
func (o *PostTemplateInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post template internal server error response has a 3xx status code
func (o *PostTemplateInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post template internal server error response has a 4xx status code
func (o *PostTemplateInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this post template internal server error response has a 5xx status code
func (o *PostTemplateInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this post template internal server error response a status code equal to that given
func (o *PostTemplateInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the post template internal server error response
func (o *PostTemplateInternalServerError) Code() int {
	return 500
}

func (o *PostTemplateInternalServerError) Error() string {
	return fmt.Sprintf("[POST /template][%d] postTemplateInternalServerError  %+v", 500, o.Payload)
}

func (o *PostTemplateInternalServerError) String() string {
	return fmt.Sprintf("[POST /template][%d] postTemplateInternalServerError  %+v", 500, o.Payload)
}

func (o *PostTemplateInternalServerError) GetPayload() string {
	return o.Payload
}

func (o *PostTemplateInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
