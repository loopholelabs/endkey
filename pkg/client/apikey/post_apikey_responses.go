// Code generated by go-swagger; DO NOT EDIT.

package apikey

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/loopholelabs/endkey/pkg/client/models"
)

// PostApikeyReader is a Reader for the PostApikey structure.
type PostApikeyReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PostApikeyReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPostApikeyOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPostApikeyBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewPostApikeyUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewPostApikeyNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 409:
		result := NewPostApikeyConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 412:
		result := NewPostApikeyPreconditionFailed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewPostApikeyInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /apikey] PostApikey", response, response.Code())
	}
}

// NewPostApikeyOK creates a PostApikeyOK with default headers values
func NewPostApikeyOK() *PostApikeyOK {
	return &PostApikeyOK{}
}

/*
PostApikeyOK describes a response with status code 200, with default header values.

OK
*/
type PostApikeyOK struct {
	Payload *models.ModelsAPIKeyResponse
}

// IsSuccess returns true when this post apikey o k response has a 2xx status code
func (o *PostApikeyOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this post apikey o k response has a 3xx status code
func (o *PostApikeyOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post apikey o k response has a 4xx status code
func (o *PostApikeyOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this post apikey o k response has a 5xx status code
func (o *PostApikeyOK) IsServerError() bool {
	return false
}

// IsCode returns true when this post apikey o k response a status code equal to that given
func (o *PostApikeyOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the post apikey o k response
func (o *PostApikeyOK) Code() int {
	return 200
}

func (o *PostApikeyOK) Error() string {
	return fmt.Sprintf("[POST /apikey][%d] postApikeyOK  %+v", 200, o.Payload)
}

func (o *PostApikeyOK) String() string {
	return fmt.Sprintf("[POST /apikey][%d] postApikeyOK  %+v", 200, o.Payload)
}

func (o *PostApikeyOK) GetPayload() *models.ModelsAPIKeyResponse {
	return o.Payload
}

func (o *PostApikeyOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ModelsAPIKeyResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostApikeyBadRequest creates a PostApikeyBadRequest with default headers values
func NewPostApikeyBadRequest() *PostApikeyBadRequest {
	return &PostApikeyBadRequest{}
}

/*
PostApikeyBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type PostApikeyBadRequest struct {
	Payload string
}

// IsSuccess returns true when this post apikey bad request response has a 2xx status code
func (o *PostApikeyBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post apikey bad request response has a 3xx status code
func (o *PostApikeyBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post apikey bad request response has a 4xx status code
func (o *PostApikeyBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this post apikey bad request response has a 5xx status code
func (o *PostApikeyBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this post apikey bad request response a status code equal to that given
func (o *PostApikeyBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the post apikey bad request response
func (o *PostApikeyBadRequest) Code() int {
	return 400
}

func (o *PostApikeyBadRequest) Error() string {
	return fmt.Sprintf("[POST /apikey][%d] postApikeyBadRequest  %+v", 400, o.Payload)
}

func (o *PostApikeyBadRequest) String() string {
	return fmt.Sprintf("[POST /apikey][%d] postApikeyBadRequest  %+v", 400, o.Payload)
}

func (o *PostApikeyBadRequest) GetPayload() string {
	return o.Payload
}

func (o *PostApikeyBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostApikeyUnauthorized creates a PostApikeyUnauthorized with default headers values
func NewPostApikeyUnauthorized() *PostApikeyUnauthorized {
	return &PostApikeyUnauthorized{}
}

/*
PostApikeyUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type PostApikeyUnauthorized struct {
	Payload string
}

// IsSuccess returns true when this post apikey unauthorized response has a 2xx status code
func (o *PostApikeyUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post apikey unauthorized response has a 3xx status code
func (o *PostApikeyUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post apikey unauthorized response has a 4xx status code
func (o *PostApikeyUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this post apikey unauthorized response has a 5xx status code
func (o *PostApikeyUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this post apikey unauthorized response a status code equal to that given
func (o *PostApikeyUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the post apikey unauthorized response
func (o *PostApikeyUnauthorized) Code() int {
	return 401
}

func (o *PostApikeyUnauthorized) Error() string {
	return fmt.Sprintf("[POST /apikey][%d] postApikeyUnauthorized  %+v", 401, o.Payload)
}

func (o *PostApikeyUnauthorized) String() string {
	return fmt.Sprintf("[POST /apikey][%d] postApikeyUnauthorized  %+v", 401, o.Payload)
}

func (o *PostApikeyUnauthorized) GetPayload() string {
	return o.Payload
}

func (o *PostApikeyUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostApikeyNotFound creates a PostApikeyNotFound with default headers values
func NewPostApikeyNotFound() *PostApikeyNotFound {
	return &PostApikeyNotFound{}
}

/*
PostApikeyNotFound describes a response with status code 404, with default header values.

Not Found
*/
type PostApikeyNotFound struct {
	Payload string
}

// IsSuccess returns true when this post apikey not found response has a 2xx status code
func (o *PostApikeyNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post apikey not found response has a 3xx status code
func (o *PostApikeyNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post apikey not found response has a 4xx status code
func (o *PostApikeyNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this post apikey not found response has a 5xx status code
func (o *PostApikeyNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this post apikey not found response a status code equal to that given
func (o *PostApikeyNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the post apikey not found response
func (o *PostApikeyNotFound) Code() int {
	return 404
}

func (o *PostApikeyNotFound) Error() string {
	return fmt.Sprintf("[POST /apikey][%d] postApikeyNotFound  %+v", 404, o.Payload)
}

func (o *PostApikeyNotFound) String() string {
	return fmt.Sprintf("[POST /apikey][%d] postApikeyNotFound  %+v", 404, o.Payload)
}

func (o *PostApikeyNotFound) GetPayload() string {
	return o.Payload
}

func (o *PostApikeyNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostApikeyConflict creates a PostApikeyConflict with default headers values
func NewPostApikeyConflict() *PostApikeyConflict {
	return &PostApikeyConflict{}
}

/*
PostApikeyConflict describes a response with status code 409, with default header values.

Conflict
*/
type PostApikeyConflict struct {
	Payload string
}

// IsSuccess returns true when this post apikey conflict response has a 2xx status code
func (o *PostApikeyConflict) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post apikey conflict response has a 3xx status code
func (o *PostApikeyConflict) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post apikey conflict response has a 4xx status code
func (o *PostApikeyConflict) IsClientError() bool {
	return true
}

// IsServerError returns true when this post apikey conflict response has a 5xx status code
func (o *PostApikeyConflict) IsServerError() bool {
	return false
}

// IsCode returns true when this post apikey conflict response a status code equal to that given
func (o *PostApikeyConflict) IsCode(code int) bool {
	return code == 409
}

// Code gets the status code for the post apikey conflict response
func (o *PostApikeyConflict) Code() int {
	return 409
}

func (o *PostApikeyConflict) Error() string {
	return fmt.Sprintf("[POST /apikey][%d] postApikeyConflict  %+v", 409, o.Payload)
}

func (o *PostApikeyConflict) String() string {
	return fmt.Sprintf("[POST /apikey][%d] postApikeyConflict  %+v", 409, o.Payload)
}

func (o *PostApikeyConflict) GetPayload() string {
	return o.Payload
}

func (o *PostApikeyConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostApikeyPreconditionFailed creates a PostApikeyPreconditionFailed with default headers values
func NewPostApikeyPreconditionFailed() *PostApikeyPreconditionFailed {
	return &PostApikeyPreconditionFailed{}
}

/*
PostApikeyPreconditionFailed describes a response with status code 412, with default header values.

Precondition Failed
*/
type PostApikeyPreconditionFailed struct {
	Payload string
}

// IsSuccess returns true when this post apikey precondition failed response has a 2xx status code
func (o *PostApikeyPreconditionFailed) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post apikey precondition failed response has a 3xx status code
func (o *PostApikeyPreconditionFailed) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post apikey precondition failed response has a 4xx status code
func (o *PostApikeyPreconditionFailed) IsClientError() bool {
	return true
}

// IsServerError returns true when this post apikey precondition failed response has a 5xx status code
func (o *PostApikeyPreconditionFailed) IsServerError() bool {
	return false
}

// IsCode returns true when this post apikey precondition failed response a status code equal to that given
func (o *PostApikeyPreconditionFailed) IsCode(code int) bool {
	return code == 412
}

// Code gets the status code for the post apikey precondition failed response
func (o *PostApikeyPreconditionFailed) Code() int {
	return 412
}

func (o *PostApikeyPreconditionFailed) Error() string {
	return fmt.Sprintf("[POST /apikey][%d] postApikeyPreconditionFailed  %+v", 412, o.Payload)
}

func (o *PostApikeyPreconditionFailed) String() string {
	return fmt.Sprintf("[POST /apikey][%d] postApikeyPreconditionFailed  %+v", 412, o.Payload)
}

func (o *PostApikeyPreconditionFailed) GetPayload() string {
	return o.Payload
}

func (o *PostApikeyPreconditionFailed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostApikeyInternalServerError creates a PostApikeyInternalServerError with default headers values
func NewPostApikeyInternalServerError() *PostApikeyInternalServerError {
	return &PostApikeyInternalServerError{}
}

/*
PostApikeyInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type PostApikeyInternalServerError struct {
	Payload string
}

// IsSuccess returns true when this post apikey internal server error response has a 2xx status code
func (o *PostApikeyInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post apikey internal server error response has a 3xx status code
func (o *PostApikeyInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post apikey internal server error response has a 4xx status code
func (o *PostApikeyInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this post apikey internal server error response has a 5xx status code
func (o *PostApikeyInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this post apikey internal server error response a status code equal to that given
func (o *PostApikeyInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the post apikey internal server error response
func (o *PostApikeyInternalServerError) Code() int {
	return 500
}

func (o *PostApikeyInternalServerError) Error() string {
	return fmt.Sprintf("[POST /apikey][%d] postApikeyInternalServerError  %+v", 500, o.Payload)
}

func (o *PostApikeyInternalServerError) String() string {
	return fmt.Sprintf("[POST /apikey][%d] postApikeyInternalServerError  %+v", 500, o.Payload)
}

func (o *PostApikeyInternalServerError) GetPayload() string {
	return o.Payload
}

func (o *PostApikeyInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
