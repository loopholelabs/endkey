// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"sync"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/loopholelabs/endkey/internal/ent/apikey"
	"github.com/loopholelabs/endkey/internal/ent/authority"
	"github.com/loopholelabs/endkey/internal/ent/clienttemplate"
	"github.com/loopholelabs/endkey/internal/ent/predicate"
	"github.com/loopholelabs/endkey/internal/ent/rootkey"
	"github.com/loopholelabs/endkey/internal/ent/servertemplate"
	"github.com/loopholelabs/endkey/internal/ent/userkey"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeAPIKey         = "APIKey"
	TypeAuthority      = "Authority"
	TypeClientTemplate = "ClientTemplate"
	TypeRootKey        = "RootKey"
	TypeServerTemplate = "ServerTemplate"
	TypeUserKey        = "UserKey"
)

// APIKeyMutation represents an operation that mutates the APIKey nodes in the graph.
type APIKeyMutation struct {
	config
	op                     Op
	typ                    string
	id                     *string
	created_at             *time.Time
	name                   *string
	salt                   *[]byte
	hash                   *[]byte
	clearedFields          map[string]struct{}
	authority              *string
	clearedauthority       bool
	server_template        *string
	clearedserver_template bool
	client_template        *string
	clearedclient_template bool
	done                   bool
	oldValue               func(context.Context) (*APIKey, error)
	predicates             []predicate.APIKey
}

var _ ent.Mutation = (*APIKeyMutation)(nil)

// apikeyOption allows management of the mutation configuration using functional options.
type apikeyOption func(*APIKeyMutation)

// newAPIKeyMutation creates new mutation for the APIKey entity.
func newAPIKeyMutation(c config, op Op, opts ...apikeyOption) *APIKeyMutation {
	m := &APIKeyMutation{
		config:        c,
		op:            op,
		typ:           TypeAPIKey,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withAPIKeyID sets the ID field of the mutation.
func withAPIKeyID(id string) apikeyOption {
	return func(m *APIKeyMutation) {
		var (
			err   error
			once  sync.Once
			value *APIKey
		)
		m.oldValue = func(ctx context.Context) (*APIKey, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().APIKey.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withAPIKey sets the old APIKey of the mutation.
func withAPIKey(node *APIKey) apikeyOption {
	return func(m *APIKeyMutation) {
		m.oldValue = func(context.Context) (*APIKey, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m APIKeyMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m APIKeyMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of APIKey entities.
func (m *APIKeyMutation) SetID(id string) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *APIKeyMutation) ID() (id string, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *APIKeyMutation) IDs(ctx context.Context) ([]string, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []string{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().APIKey.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreatedAt sets the "created_at" field.
func (m *APIKeyMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *APIKeyMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the APIKey entity.
// If the APIKey object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *APIKeyMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *APIKeyMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetName sets the "name" field.
func (m *APIKeyMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *APIKeyMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the APIKey entity.
// If the APIKey object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *APIKeyMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *APIKeyMutation) ResetName() {
	m.name = nil
}

// SetSalt sets the "salt" field.
func (m *APIKeyMutation) SetSalt(b []byte) {
	m.salt = &b
}

// Salt returns the value of the "salt" field in the mutation.
func (m *APIKeyMutation) Salt() (r []byte, exists bool) {
	v := m.salt
	if v == nil {
		return
	}
	return *v, true
}

// OldSalt returns the old "salt" field's value of the APIKey entity.
// If the APIKey object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *APIKeyMutation) OldSalt(ctx context.Context) (v []byte, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSalt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSalt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSalt: %w", err)
	}
	return oldValue.Salt, nil
}

// ResetSalt resets all changes to the "salt" field.
func (m *APIKeyMutation) ResetSalt() {
	m.salt = nil
}

// SetHash sets the "hash" field.
func (m *APIKeyMutation) SetHash(b []byte) {
	m.hash = &b
}

// Hash returns the value of the "hash" field in the mutation.
func (m *APIKeyMutation) Hash() (r []byte, exists bool) {
	v := m.hash
	if v == nil {
		return
	}
	return *v, true
}

// OldHash returns the old "hash" field's value of the APIKey entity.
// If the APIKey object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *APIKeyMutation) OldHash(ctx context.Context) (v []byte, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldHash is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldHash requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldHash: %w", err)
	}
	return oldValue.Hash, nil
}

// ResetHash resets all changes to the "hash" field.
func (m *APIKeyMutation) ResetHash() {
	m.hash = nil
}

// SetAuthorityID sets the "authority" edge to the Authority entity by id.
func (m *APIKeyMutation) SetAuthorityID(id string) {
	m.authority = &id
}

// ClearAuthority clears the "authority" edge to the Authority entity.
func (m *APIKeyMutation) ClearAuthority() {
	m.clearedauthority = true
}

// AuthorityCleared reports if the "authority" edge to the Authority entity was cleared.
func (m *APIKeyMutation) AuthorityCleared() bool {
	return m.clearedauthority
}

// AuthorityID returns the "authority" edge ID in the mutation.
func (m *APIKeyMutation) AuthorityID() (id string, exists bool) {
	if m.authority != nil {
		return *m.authority, true
	}
	return
}

// AuthorityIDs returns the "authority" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// AuthorityID instead. It exists only for internal usage by the builders.
func (m *APIKeyMutation) AuthorityIDs() (ids []string) {
	if id := m.authority; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetAuthority resets all changes to the "authority" edge.
func (m *APIKeyMutation) ResetAuthority() {
	m.authority = nil
	m.clearedauthority = false
}

// SetServerTemplateID sets the "server_template" edge to the ServerTemplate entity by id.
func (m *APIKeyMutation) SetServerTemplateID(id string) {
	m.server_template = &id
}

// ClearServerTemplate clears the "server_template" edge to the ServerTemplate entity.
func (m *APIKeyMutation) ClearServerTemplate() {
	m.clearedserver_template = true
}

// ServerTemplateCleared reports if the "server_template" edge to the ServerTemplate entity was cleared.
func (m *APIKeyMutation) ServerTemplateCleared() bool {
	return m.clearedserver_template
}

// ServerTemplateID returns the "server_template" edge ID in the mutation.
func (m *APIKeyMutation) ServerTemplateID() (id string, exists bool) {
	if m.server_template != nil {
		return *m.server_template, true
	}
	return
}

// ServerTemplateIDs returns the "server_template" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// ServerTemplateID instead. It exists only for internal usage by the builders.
func (m *APIKeyMutation) ServerTemplateIDs() (ids []string) {
	if id := m.server_template; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetServerTemplate resets all changes to the "server_template" edge.
func (m *APIKeyMutation) ResetServerTemplate() {
	m.server_template = nil
	m.clearedserver_template = false
}

// SetClientTemplateID sets the "client_template" edge to the ClientTemplate entity by id.
func (m *APIKeyMutation) SetClientTemplateID(id string) {
	m.client_template = &id
}

// ClearClientTemplate clears the "client_template" edge to the ClientTemplate entity.
func (m *APIKeyMutation) ClearClientTemplate() {
	m.clearedclient_template = true
}

// ClientTemplateCleared reports if the "client_template" edge to the ClientTemplate entity was cleared.
func (m *APIKeyMutation) ClientTemplateCleared() bool {
	return m.clearedclient_template
}

// ClientTemplateID returns the "client_template" edge ID in the mutation.
func (m *APIKeyMutation) ClientTemplateID() (id string, exists bool) {
	if m.client_template != nil {
		return *m.client_template, true
	}
	return
}

// ClientTemplateIDs returns the "client_template" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// ClientTemplateID instead. It exists only for internal usage by the builders.
func (m *APIKeyMutation) ClientTemplateIDs() (ids []string) {
	if id := m.client_template; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetClientTemplate resets all changes to the "client_template" edge.
func (m *APIKeyMutation) ResetClientTemplate() {
	m.client_template = nil
	m.clearedclient_template = false
}

// Where appends a list predicates to the APIKeyMutation builder.
func (m *APIKeyMutation) Where(ps ...predicate.APIKey) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the APIKeyMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *APIKeyMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.APIKey, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *APIKeyMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *APIKeyMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (APIKey).
func (m *APIKeyMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *APIKeyMutation) Fields() []string {
	fields := make([]string, 0, 4)
	if m.created_at != nil {
		fields = append(fields, apikey.FieldCreatedAt)
	}
	if m.name != nil {
		fields = append(fields, apikey.FieldName)
	}
	if m.salt != nil {
		fields = append(fields, apikey.FieldSalt)
	}
	if m.hash != nil {
		fields = append(fields, apikey.FieldHash)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *APIKeyMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case apikey.FieldCreatedAt:
		return m.CreatedAt()
	case apikey.FieldName:
		return m.Name()
	case apikey.FieldSalt:
		return m.Salt()
	case apikey.FieldHash:
		return m.Hash()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *APIKeyMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case apikey.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case apikey.FieldName:
		return m.OldName(ctx)
	case apikey.FieldSalt:
		return m.OldSalt(ctx)
	case apikey.FieldHash:
		return m.OldHash(ctx)
	}
	return nil, fmt.Errorf("unknown APIKey field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *APIKeyMutation) SetField(name string, value ent.Value) error {
	switch name {
	case apikey.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case apikey.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case apikey.FieldSalt:
		v, ok := value.([]byte)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSalt(v)
		return nil
	case apikey.FieldHash:
		v, ok := value.([]byte)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetHash(v)
		return nil
	}
	return fmt.Errorf("unknown APIKey field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *APIKeyMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *APIKeyMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *APIKeyMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown APIKey numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *APIKeyMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *APIKeyMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *APIKeyMutation) ClearField(name string) error {
	return fmt.Errorf("unknown APIKey nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *APIKeyMutation) ResetField(name string) error {
	switch name {
	case apikey.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case apikey.FieldName:
		m.ResetName()
		return nil
	case apikey.FieldSalt:
		m.ResetSalt()
		return nil
	case apikey.FieldHash:
		m.ResetHash()
		return nil
	}
	return fmt.Errorf("unknown APIKey field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *APIKeyMutation) AddedEdges() []string {
	edges := make([]string, 0, 3)
	if m.authority != nil {
		edges = append(edges, apikey.EdgeAuthority)
	}
	if m.server_template != nil {
		edges = append(edges, apikey.EdgeServerTemplate)
	}
	if m.client_template != nil {
		edges = append(edges, apikey.EdgeClientTemplate)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *APIKeyMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case apikey.EdgeAuthority:
		if id := m.authority; id != nil {
			return []ent.Value{*id}
		}
	case apikey.EdgeServerTemplate:
		if id := m.server_template; id != nil {
			return []ent.Value{*id}
		}
	case apikey.EdgeClientTemplate:
		if id := m.client_template; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *APIKeyMutation) RemovedEdges() []string {
	edges := make([]string, 0, 3)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *APIKeyMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *APIKeyMutation) ClearedEdges() []string {
	edges := make([]string, 0, 3)
	if m.clearedauthority {
		edges = append(edges, apikey.EdgeAuthority)
	}
	if m.clearedserver_template {
		edges = append(edges, apikey.EdgeServerTemplate)
	}
	if m.clearedclient_template {
		edges = append(edges, apikey.EdgeClientTemplate)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *APIKeyMutation) EdgeCleared(name string) bool {
	switch name {
	case apikey.EdgeAuthority:
		return m.clearedauthority
	case apikey.EdgeServerTemplate:
		return m.clearedserver_template
	case apikey.EdgeClientTemplate:
		return m.clearedclient_template
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *APIKeyMutation) ClearEdge(name string) error {
	switch name {
	case apikey.EdgeAuthority:
		m.ClearAuthority()
		return nil
	case apikey.EdgeServerTemplate:
		m.ClearServerTemplate()
		return nil
	case apikey.EdgeClientTemplate:
		m.ClearClientTemplate()
		return nil
	}
	return fmt.Errorf("unknown APIKey unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *APIKeyMutation) ResetEdge(name string) error {
	switch name {
	case apikey.EdgeAuthority:
		m.ResetAuthority()
		return nil
	case apikey.EdgeServerTemplate:
		m.ResetServerTemplate()
		return nil
	case apikey.EdgeClientTemplate:
		m.ResetClientTemplate()
		return nil
	}
	return fmt.Errorf("unknown APIKey edge %s", name)
}

// AuthorityMutation represents an operation that mutates the Authority nodes in the graph.
type AuthorityMutation struct {
	config
	op                      Op
	typ                     string
	id                      *string
	created_at              *time.Time
	name                    *string
	ca_certificate_pem      *[]byte
	encrypted_private_key   *string
	clearedFields           map[string]struct{}
	user_key                *string
	cleareduser_key         bool
	api_keys                map[string]struct{}
	removedapi_keys         map[string]struct{}
	clearedapi_keys         bool
	server_templates        map[string]struct{}
	removedserver_templates map[string]struct{}
	clearedserver_templates bool
	client_templates        map[string]struct{}
	removedclient_templates map[string]struct{}
	clearedclient_templates bool
	done                    bool
	oldValue                func(context.Context) (*Authority, error)
	predicates              []predicate.Authority
}

var _ ent.Mutation = (*AuthorityMutation)(nil)

// authorityOption allows management of the mutation configuration using functional options.
type authorityOption func(*AuthorityMutation)

// newAuthorityMutation creates new mutation for the Authority entity.
func newAuthorityMutation(c config, op Op, opts ...authorityOption) *AuthorityMutation {
	m := &AuthorityMutation{
		config:        c,
		op:            op,
		typ:           TypeAuthority,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withAuthorityID sets the ID field of the mutation.
func withAuthorityID(id string) authorityOption {
	return func(m *AuthorityMutation) {
		var (
			err   error
			once  sync.Once
			value *Authority
		)
		m.oldValue = func(ctx context.Context) (*Authority, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Authority.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withAuthority sets the old Authority of the mutation.
func withAuthority(node *Authority) authorityOption {
	return func(m *AuthorityMutation) {
		m.oldValue = func(context.Context) (*Authority, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m AuthorityMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m AuthorityMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Authority entities.
func (m *AuthorityMutation) SetID(id string) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *AuthorityMutation) ID() (id string, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *AuthorityMutation) IDs(ctx context.Context) ([]string, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []string{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Authority.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreatedAt sets the "created_at" field.
func (m *AuthorityMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *AuthorityMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Authority entity.
// If the Authority object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AuthorityMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *AuthorityMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetName sets the "name" field.
func (m *AuthorityMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *AuthorityMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Authority entity.
// If the Authority object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AuthorityMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *AuthorityMutation) ResetName() {
	m.name = nil
}

// SetCaCertificatePem sets the "ca_certificate_pem" field.
func (m *AuthorityMutation) SetCaCertificatePem(b []byte) {
	m.ca_certificate_pem = &b
}

// CaCertificatePem returns the value of the "ca_certificate_pem" field in the mutation.
func (m *AuthorityMutation) CaCertificatePem() (r []byte, exists bool) {
	v := m.ca_certificate_pem
	if v == nil {
		return
	}
	return *v, true
}

// OldCaCertificatePem returns the old "ca_certificate_pem" field's value of the Authority entity.
// If the Authority object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AuthorityMutation) OldCaCertificatePem(ctx context.Context) (v []byte, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCaCertificatePem is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCaCertificatePem requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCaCertificatePem: %w", err)
	}
	return oldValue.CaCertificatePem, nil
}

// ResetCaCertificatePem resets all changes to the "ca_certificate_pem" field.
func (m *AuthorityMutation) ResetCaCertificatePem() {
	m.ca_certificate_pem = nil
}

// SetEncryptedPrivateKey sets the "encrypted_private_key" field.
func (m *AuthorityMutation) SetEncryptedPrivateKey(s string) {
	m.encrypted_private_key = &s
}

// EncryptedPrivateKey returns the value of the "encrypted_private_key" field in the mutation.
func (m *AuthorityMutation) EncryptedPrivateKey() (r string, exists bool) {
	v := m.encrypted_private_key
	if v == nil {
		return
	}
	return *v, true
}

// OldEncryptedPrivateKey returns the old "encrypted_private_key" field's value of the Authority entity.
// If the Authority object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AuthorityMutation) OldEncryptedPrivateKey(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEncryptedPrivateKey is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEncryptedPrivateKey requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEncryptedPrivateKey: %w", err)
	}
	return oldValue.EncryptedPrivateKey, nil
}

// ResetEncryptedPrivateKey resets all changes to the "encrypted_private_key" field.
func (m *AuthorityMutation) ResetEncryptedPrivateKey() {
	m.encrypted_private_key = nil
}

// SetUserKeyID sets the "user_key" edge to the UserKey entity by id.
func (m *AuthorityMutation) SetUserKeyID(id string) {
	m.user_key = &id
}

// ClearUserKey clears the "user_key" edge to the UserKey entity.
func (m *AuthorityMutation) ClearUserKey() {
	m.cleareduser_key = true
}

// UserKeyCleared reports if the "user_key" edge to the UserKey entity was cleared.
func (m *AuthorityMutation) UserKeyCleared() bool {
	return m.cleareduser_key
}

// UserKeyID returns the "user_key" edge ID in the mutation.
func (m *AuthorityMutation) UserKeyID() (id string, exists bool) {
	if m.user_key != nil {
		return *m.user_key, true
	}
	return
}

// UserKeyIDs returns the "user_key" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// UserKeyID instead. It exists only for internal usage by the builders.
func (m *AuthorityMutation) UserKeyIDs() (ids []string) {
	if id := m.user_key; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetUserKey resets all changes to the "user_key" edge.
func (m *AuthorityMutation) ResetUserKey() {
	m.user_key = nil
	m.cleareduser_key = false
}

// AddAPIKeyIDs adds the "api_keys" edge to the APIKey entity by ids.
func (m *AuthorityMutation) AddAPIKeyIDs(ids ...string) {
	if m.api_keys == nil {
		m.api_keys = make(map[string]struct{})
	}
	for i := range ids {
		m.api_keys[ids[i]] = struct{}{}
	}
}

// ClearAPIKeys clears the "api_keys" edge to the APIKey entity.
func (m *AuthorityMutation) ClearAPIKeys() {
	m.clearedapi_keys = true
}

// APIKeysCleared reports if the "api_keys" edge to the APIKey entity was cleared.
func (m *AuthorityMutation) APIKeysCleared() bool {
	return m.clearedapi_keys
}

// RemoveAPIKeyIDs removes the "api_keys" edge to the APIKey entity by IDs.
func (m *AuthorityMutation) RemoveAPIKeyIDs(ids ...string) {
	if m.removedapi_keys == nil {
		m.removedapi_keys = make(map[string]struct{})
	}
	for i := range ids {
		delete(m.api_keys, ids[i])
		m.removedapi_keys[ids[i]] = struct{}{}
	}
}

// RemovedAPIKeys returns the removed IDs of the "api_keys" edge to the APIKey entity.
func (m *AuthorityMutation) RemovedAPIKeysIDs() (ids []string) {
	for id := range m.removedapi_keys {
		ids = append(ids, id)
	}
	return
}

// APIKeysIDs returns the "api_keys" edge IDs in the mutation.
func (m *AuthorityMutation) APIKeysIDs() (ids []string) {
	for id := range m.api_keys {
		ids = append(ids, id)
	}
	return
}

// ResetAPIKeys resets all changes to the "api_keys" edge.
func (m *AuthorityMutation) ResetAPIKeys() {
	m.api_keys = nil
	m.clearedapi_keys = false
	m.removedapi_keys = nil
}

// AddServerTemplateIDs adds the "server_templates" edge to the ServerTemplate entity by ids.
func (m *AuthorityMutation) AddServerTemplateIDs(ids ...string) {
	if m.server_templates == nil {
		m.server_templates = make(map[string]struct{})
	}
	for i := range ids {
		m.server_templates[ids[i]] = struct{}{}
	}
}

// ClearServerTemplates clears the "server_templates" edge to the ServerTemplate entity.
func (m *AuthorityMutation) ClearServerTemplates() {
	m.clearedserver_templates = true
}

// ServerTemplatesCleared reports if the "server_templates" edge to the ServerTemplate entity was cleared.
func (m *AuthorityMutation) ServerTemplatesCleared() bool {
	return m.clearedserver_templates
}

// RemoveServerTemplateIDs removes the "server_templates" edge to the ServerTemplate entity by IDs.
func (m *AuthorityMutation) RemoveServerTemplateIDs(ids ...string) {
	if m.removedserver_templates == nil {
		m.removedserver_templates = make(map[string]struct{})
	}
	for i := range ids {
		delete(m.server_templates, ids[i])
		m.removedserver_templates[ids[i]] = struct{}{}
	}
}

// RemovedServerTemplates returns the removed IDs of the "server_templates" edge to the ServerTemplate entity.
func (m *AuthorityMutation) RemovedServerTemplatesIDs() (ids []string) {
	for id := range m.removedserver_templates {
		ids = append(ids, id)
	}
	return
}

// ServerTemplatesIDs returns the "server_templates" edge IDs in the mutation.
func (m *AuthorityMutation) ServerTemplatesIDs() (ids []string) {
	for id := range m.server_templates {
		ids = append(ids, id)
	}
	return
}

// ResetServerTemplates resets all changes to the "server_templates" edge.
func (m *AuthorityMutation) ResetServerTemplates() {
	m.server_templates = nil
	m.clearedserver_templates = false
	m.removedserver_templates = nil
}

// AddClientTemplateIDs adds the "client_templates" edge to the ClientTemplate entity by ids.
func (m *AuthorityMutation) AddClientTemplateIDs(ids ...string) {
	if m.client_templates == nil {
		m.client_templates = make(map[string]struct{})
	}
	for i := range ids {
		m.client_templates[ids[i]] = struct{}{}
	}
}

// ClearClientTemplates clears the "client_templates" edge to the ClientTemplate entity.
func (m *AuthorityMutation) ClearClientTemplates() {
	m.clearedclient_templates = true
}

// ClientTemplatesCleared reports if the "client_templates" edge to the ClientTemplate entity was cleared.
func (m *AuthorityMutation) ClientTemplatesCleared() bool {
	return m.clearedclient_templates
}

// RemoveClientTemplateIDs removes the "client_templates" edge to the ClientTemplate entity by IDs.
func (m *AuthorityMutation) RemoveClientTemplateIDs(ids ...string) {
	if m.removedclient_templates == nil {
		m.removedclient_templates = make(map[string]struct{})
	}
	for i := range ids {
		delete(m.client_templates, ids[i])
		m.removedclient_templates[ids[i]] = struct{}{}
	}
}

// RemovedClientTemplates returns the removed IDs of the "client_templates" edge to the ClientTemplate entity.
func (m *AuthorityMutation) RemovedClientTemplatesIDs() (ids []string) {
	for id := range m.removedclient_templates {
		ids = append(ids, id)
	}
	return
}

// ClientTemplatesIDs returns the "client_templates" edge IDs in the mutation.
func (m *AuthorityMutation) ClientTemplatesIDs() (ids []string) {
	for id := range m.client_templates {
		ids = append(ids, id)
	}
	return
}

// ResetClientTemplates resets all changes to the "client_templates" edge.
func (m *AuthorityMutation) ResetClientTemplates() {
	m.client_templates = nil
	m.clearedclient_templates = false
	m.removedclient_templates = nil
}

// Where appends a list predicates to the AuthorityMutation builder.
func (m *AuthorityMutation) Where(ps ...predicate.Authority) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the AuthorityMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *AuthorityMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Authority, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *AuthorityMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *AuthorityMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Authority).
func (m *AuthorityMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *AuthorityMutation) Fields() []string {
	fields := make([]string, 0, 4)
	if m.created_at != nil {
		fields = append(fields, authority.FieldCreatedAt)
	}
	if m.name != nil {
		fields = append(fields, authority.FieldName)
	}
	if m.ca_certificate_pem != nil {
		fields = append(fields, authority.FieldCaCertificatePem)
	}
	if m.encrypted_private_key != nil {
		fields = append(fields, authority.FieldEncryptedPrivateKey)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *AuthorityMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case authority.FieldCreatedAt:
		return m.CreatedAt()
	case authority.FieldName:
		return m.Name()
	case authority.FieldCaCertificatePem:
		return m.CaCertificatePem()
	case authority.FieldEncryptedPrivateKey:
		return m.EncryptedPrivateKey()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *AuthorityMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case authority.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case authority.FieldName:
		return m.OldName(ctx)
	case authority.FieldCaCertificatePem:
		return m.OldCaCertificatePem(ctx)
	case authority.FieldEncryptedPrivateKey:
		return m.OldEncryptedPrivateKey(ctx)
	}
	return nil, fmt.Errorf("unknown Authority field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *AuthorityMutation) SetField(name string, value ent.Value) error {
	switch name {
	case authority.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case authority.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case authority.FieldCaCertificatePem:
		v, ok := value.([]byte)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCaCertificatePem(v)
		return nil
	case authority.FieldEncryptedPrivateKey:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEncryptedPrivateKey(v)
		return nil
	}
	return fmt.Errorf("unknown Authority field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *AuthorityMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *AuthorityMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *AuthorityMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Authority numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *AuthorityMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *AuthorityMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *AuthorityMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Authority nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *AuthorityMutation) ResetField(name string) error {
	switch name {
	case authority.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case authority.FieldName:
		m.ResetName()
		return nil
	case authority.FieldCaCertificatePem:
		m.ResetCaCertificatePem()
		return nil
	case authority.FieldEncryptedPrivateKey:
		m.ResetEncryptedPrivateKey()
		return nil
	}
	return fmt.Errorf("unknown Authority field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *AuthorityMutation) AddedEdges() []string {
	edges := make([]string, 0, 4)
	if m.user_key != nil {
		edges = append(edges, authority.EdgeUserKey)
	}
	if m.api_keys != nil {
		edges = append(edges, authority.EdgeAPIKeys)
	}
	if m.server_templates != nil {
		edges = append(edges, authority.EdgeServerTemplates)
	}
	if m.client_templates != nil {
		edges = append(edges, authority.EdgeClientTemplates)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *AuthorityMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case authority.EdgeUserKey:
		if id := m.user_key; id != nil {
			return []ent.Value{*id}
		}
	case authority.EdgeAPIKeys:
		ids := make([]ent.Value, 0, len(m.api_keys))
		for id := range m.api_keys {
			ids = append(ids, id)
		}
		return ids
	case authority.EdgeServerTemplates:
		ids := make([]ent.Value, 0, len(m.server_templates))
		for id := range m.server_templates {
			ids = append(ids, id)
		}
		return ids
	case authority.EdgeClientTemplates:
		ids := make([]ent.Value, 0, len(m.client_templates))
		for id := range m.client_templates {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *AuthorityMutation) RemovedEdges() []string {
	edges := make([]string, 0, 4)
	if m.removedapi_keys != nil {
		edges = append(edges, authority.EdgeAPIKeys)
	}
	if m.removedserver_templates != nil {
		edges = append(edges, authority.EdgeServerTemplates)
	}
	if m.removedclient_templates != nil {
		edges = append(edges, authority.EdgeClientTemplates)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *AuthorityMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case authority.EdgeAPIKeys:
		ids := make([]ent.Value, 0, len(m.removedapi_keys))
		for id := range m.removedapi_keys {
			ids = append(ids, id)
		}
		return ids
	case authority.EdgeServerTemplates:
		ids := make([]ent.Value, 0, len(m.removedserver_templates))
		for id := range m.removedserver_templates {
			ids = append(ids, id)
		}
		return ids
	case authority.EdgeClientTemplates:
		ids := make([]ent.Value, 0, len(m.removedclient_templates))
		for id := range m.removedclient_templates {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *AuthorityMutation) ClearedEdges() []string {
	edges := make([]string, 0, 4)
	if m.cleareduser_key {
		edges = append(edges, authority.EdgeUserKey)
	}
	if m.clearedapi_keys {
		edges = append(edges, authority.EdgeAPIKeys)
	}
	if m.clearedserver_templates {
		edges = append(edges, authority.EdgeServerTemplates)
	}
	if m.clearedclient_templates {
		edges = append(edges, authority.EdgeClientTemplates)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *AuthorityMutation) EdgeCleared(name string) bool {
	switch name {
	case authority.EdgeUserKey:
		return m.cleareduser_key
	case authority.EdgeAPIKeys:
		return m.clearedapi_keys
	case authority.EdgeServerTemplates:
		return m.clearedserver_templates
	case authority.EdgeClientTemplates:
		return m.clearedclient_templates
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *AuthorityMutation) ClearEdge(name string) error {
	switch name {
	case authority.EdgeUserKey:
		m.ClearUserKey()
		return nil
	}
	return fmt.Errorf("unknown Authority unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *AuthorityMutation) ResetEdge(name string) error {
	switch name {
	case authority.EdgeUserKey:
		m.ResetUserKey()
		return nil
	case authority.EdgeAPIKeys:
		m.ResetAPIKeys()
		return nil
	case authority.EdgeServerTemplates:
		m.ResetServerTemplates()
		return nil
	case authority.EdgeClientTemplates:
		m.ResetClientTemplates()
		return nil
	}
	return fmt.Errorf("unknown Authority edge %s", name)
}

// ClientTemplateMutation represents an operation that mutates the ClientTemplate nodes in the graph.
type ClientTemplateMutation struct {
	config
	op                         Op
	typ                        string
	id                         *string
	created_at                 *time.Time
	name                       *string
	common_name                *string
	tag                        *string
	validity                   *string
	dns_names                  *[]string
	appenddns_names            []string
	allow_additional_dns_names *bool
	ip_addresses               *[]string
	appendip_addresses         []string
	allow_additional_ips       *bool
	clearedFields              map[string]struct{}
	authority                  *string
	clearedauthority           bool
	api_keys                   map[string]struct{}
	removedapi_keys            map[string]struct{}
	clearedapi_keys            bool
	done                       bool
	oldValue                   func(context.Context) (*ClientTemplate, error)
	predicates                 []predicate.ClientTemplate
}

var _ ent.Mutation = (*ClientTemplateMutation)(nil)

// clienttemplateOption allows management of the mutation configuration using functional options.
type clienttemplateOption func(*ClientTemplateMutation)

// newClientTemplateMutation creates new mutation for the ClientTemplate entity.
func newClientTemplateMutation(c config, op Op, opts ...clienttemplateOption) *ClientTemplateMutation {
	m := &ClientTemplateMutation{
		config:        c,
		op:            op,
		typ:           TypeClientTemplate,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withClientTemplateID sets the ID field of the mutation.
func withClientTemplateID(id string) clienttemplateOption {
	return func(m *ClientTemplateMutation) {
		var (
			err   error
			once  sync.Once
			value *ClientTemplate
		)
		m.oldValue = func(ctx context.Context) (*ClientTemplate, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().ClientTemplate.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withClientTemplate sets the old ClientTemplate of the mutation.
func withClientTemplate(node *ClientTemplate) clienttemplateOption {
	return func(m *ClientTemplateMutation) {
		m.oldValue = func(context.Context) (*ClientTemplate, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ClientTemplateMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ClientTemplateMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of ClientTemplate entities.
func (m *ClientTemplateMutation) SetID(id string) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *ClientTemplateMutation) ID() (id string, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *ClientTemplateMutation) IDs(ctx context.Context) ([]string, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []string{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().ClientTemplate.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreatedAt sets the "created_at" field.
func (m *ClientTemplateMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *ClientTemplateMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the ClientTemplate entity.
// If the ClientTemplate object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ClientTemplateMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *ClientTemplateMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetName sets the "name" field.
func (m *ClientTemplateMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *ClientTemplateMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the ClientTemplate entity.
// If the ClientTemplate object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ClientTemplateMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *ClientTemplateMutation) ResetName() {
	m.name = nil
}

// SetCommonName sets the "common_name" field.
func (m *ClientTemplateMutation) SetCommonName(s string) {
	m.common_name = &s
}

// CommonName returns the value of the "common_name" field in the mutation.
func (m *ClientTemplateMutation) CommonName() (r string, exists bool) {
	v := m.common_name
	if v == nil {
		return
	}
	return *v, true
}

// OldCommonName returns the old "common_name" field's value of the ClientTemplate entity.
// If the ClientTemplate object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ClientTemplateMutation) OldCommonName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCommonName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCommonName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCommonName: %w", err)
	}
	return oldValue.CommonName, nil
}

// ResetCommonName resets all changes to the "common_name" field.
func (m *ClientTemplateMutation) ResetCommonName() {
	m.common_name = nil
}

// SetTag sets the "tag" field.
func (m *ClientTemplateMutation) SetTag(s string) {
	m.tag = &s
}

// Tag returns the value of the "tag" field in the mutation.
func (m *ClientTemplateMutation) Tag() (r string, exists bool) {
	v := m.tag
	if v == nil {
		return
	}
	return *v, true
}

// OldTag returns the old "tag" field's value of the ClientTemplate entity.
// If the ClientTemplate object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ClientTemplateMutation) OldTag(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTag is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTag requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTag: %w", err)
	}
	return oldValue.Tag, nil
}

// ResetTag resets all changes to the "tag" field.
func (m *ClientTemplateMutation) ResetTag() {
	m.tag = nil
}

// SetValidity sets the "validity" field.
func (m *ClientTemplateMutation) SetValidity(s string) {
	m.validity = &s
}

// Validity returns the value of the "validity" field in the mutation.
func (m *ClientTemplateMutation) Validity() (r string, exists bool) {
	v := m.validity
	if v == nil {
		return
	}
	return *v, true
}

// OldValidity returns the old "validity" field's value of the ClientTemplate entity.
// If the ClientTemplate object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ClientTemplateMutation) OldValidity(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldValidity is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldValidity requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldValidity: %w", err)
	}
	return oldValue.Validity, nil
}

// ResetValidity resets all changes to the "validity" field.
func (m *ClientTemplateMutation) ResetValidity() {
	m.validity = nil
}

// SetDNSNames sets the "dns_names" field.
func (m *ClientTemplateMutation) SetDNSNames(s []string) {
	m.dns_names = &s
	m.appenddns_names = nil
}

// DNSNames returns the value of the "dns_names" field in the mutation.
func (m *ClientTemplateMutation) DNSNames() (r []string, exists bool) {
	v := m.dns_names
	if v == nil {
		return
	}
	return *v, true
}

// OldDNSNames returns the old "dns_names" field's value of the ClientTemplate entity.
// If the ClientTemplate object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ClientTemplateMutation) OldDNSNames(ctx context.Context) (v []string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDNSNames is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDNSNames requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDNSNames: %w", err)
	}
	return oldValue.DNSNames, nil
}

// AppendDNSNames adds s to the "dns_names" field.
func (m *ClientTemplateMutation) AppendDNSNames(s []string) {
	m.appenddns_names = append(m.appenddns_names, s...)
}

// AppendedDNSNames returns the list of values that were appended to the "dns_names" field in this mutation.
func (m *ClientTemplateMutation) AppendedDNSNames() ([]string, bool) {
	if len(m.appenddns_names) == 0 {
		return nil, false
	}
	return m.appenddns_names, true
}

// ClearDNSNames clears the value of the "dns_names" field.
func (m *ClientTemplateMutation) ClearDNSNames() {
	m.dns_names = nil
	m.appenddns_names = nil
	m.clearedFields[clienttemplate.FieldDNSNames] = struct{}{}
}

// DNSNamesCleared returns if the "dns_names" field was cleared in this mutation.
func (m *ClientTemplateMutation) DNSNamesCleared() bool {
	_, ok := m.clearedFields[clienttemplate.FieldDNSNames]
	return ok
}

// ResetDNSNames resets all changes to the "dns_names" field.
func (m *ClientTemplateMutation) ResetDNSNames() {
	m.dns_names = nil
	m.appenddns_names = nil
	delete(m.clearedFields, clienttemplate.FieldDNSNames)
}

// SetAllowAdditionalDNSNames sets the "allow_additional_dns_names" field.
func (m *ClientTemplateMutation) SetAllowAdditionalDNSNames(b bool) {
	m.allow_additional_dns_names = &b
}

// AllowAdditionalDNSNames returns the value of the "allow_additional_dns_names" field in the mutation.
func (m *ClientTemplateMutation) AllowAdditionalDNSNames() (r bool, exists bool) {
	v := m.allow_additional_dns_names
	if v == nil {
		return
	}
	return *v, true
}

// OldAllowAdditionalDNSNames returns the old "allow_additional_dns_names" field's value of the ClientTemplate entity.
// If the ClientTemplate object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ClientTemplateMutation) OldAllowAdditionalDNSNames(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAllowAdditionalDNSNames is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAllowAdditionalDNSNames requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAllowAdditionalDNSNames: %w", err)
	}
	return oldValue.AllowAdditionalDNSNames, nil
}

// ResetAllowAdditionalDNSNames resets all changes to the "allow_additional_dns_names" field.
func (m *ClientTemplateMutation) ResetAllowAdditionalDNSNames() {
	m.allow_additional_dns_names = nil
}

// SetIPAddresses sets the "ip_addresses" field.
func (m *ClientTemplateMutation) SetIPAddresses(s []string) {
	m.ip_addresses = &s
	m.appendip_addresses = nil
}

// IPAddresses returns the value of the "ip_addresses" field in the mutation.
func (m *ClientTemplateMutation) IPAddresses() (r []string, exists bool) {
	v := m.ip_addresses
	if v == nil {
		return
	}
	return *v, true
}

// OldIPAddresses returns the old "ip_addresses" field's value of the ClientTemplate entity.
// If the ClientTemplate object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ClientTemplateMutation) OldIPAddresses(ctx context.Context) (v []string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIPAddresses is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIPAddresses requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIPAddresses: %w", err)
	}
	return oldValue.IPAddresses, nil
}

// AppendIPAddresses adds s to the "ip_addresses" field.
func (m *ClientTemplateMutation) AppendIPAddresses(s []string) {
	m.appendip_addresses = append(m.appendip_addresses, s...)
}

// AppendedIPAddresses returns the list of values that were appended to the "ip_addresses" field in this mutation.
func (m *ClientTemplateMutation) AppendedIPAddresses() ([]string, bool) {
	if len(m.appendip_addresses) == 0 {
		return nil, false
	}
	return m.appendip_addresses, true
}

// ClearIPAddresses clears the value of the "ip_addresses" field.
func (m *ClientTemplateMutation) ClearIPAddresses() {
	m.ip_addresses = nil
	m.appendip_addresses = nil
	m.clearedFields[clienttemplate.FieldIPAddresses] = struct{}{}
}

// IPAddressesCleared returns if the "ip_addresses" field was cleared in this mutation.
func (m *ClientTemplateMutation) IPAddressesCleared() bool {
	_, ok := m.clearedFields[clienttemplate.FieldIPAddresses]
	return ok
}

// ResetIPAddresses resets all changes to the "ip_addresses" field.
func (m *ClientTemplateMutation) ResetIPAddresses() {
	m.ip_addresses = nil
	m.appendip_addresses = nil
	delete(m.clearedFields, clienttemplate.FieldIPAddresses)
}

// SetAllowAdditionalIps sets the "allow_additional_ips" field.
func (m *ClientTemplateMutation) SetAllowAdditionalIps(b bool) {
	m.allow_additional_ips = &b
}

// AllowAdditionalIps returns the value of the "allow_additional_ips" field in the mutation.
func (m *ClientTemplateMutation) AllowAdditionalIps() (r bool, exists bool) {
	v := m.allow_additional_ips
	if v == nil {
		return
	}
	return *v, true
}

// OldAllowAdditionalIps returns the old "allow_additional_ips" field's value of the ClientTemplate entity.
// If the ClientTemplate object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ClientTemplateMutation) OldAllowAdditionalIps(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAllowAdditionalIps is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAllowAdditionalIps requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAllowAdditionalIps: %w", err)
	}
	return oldValue.AllowAdditionalIps, nil
}

// ResetAllowAdditionalIps resets all changes to the "allow_additional_ips" field.
func (m *ClientTemplateMutation) ResetAllowAdditionalIps() {
	m.allow_additional_ips = nil
}

// SetAuthorityID sets the "authority" edge to the Authority entity by id.
func (m *ClientTemplateMutation) SetAuthorityID(id string) {
	m.authority = &id
}

// ClearAuthority clears the "authority" edge to the Authority entity.
func (m *ClientTemplateMutation) ClearAuthority() {
	m.clearedauthority = true
}

// AuthorityCleared reports if the "authority" edge to the Authority entity was cleared.
func (m *ClientTemplateMutation) AuthorityCleared() bool {
	return m.clearedauthority
}

// AuthorityID returns the "authority" edge ID in the mutation.
func (m *ClientTemplateMutation) AuthorityID() (id string, exists bool) {
	if m.authority != nil {
		return *m.authority, true
	}
	return
}

// AuthorityIDs returns the "authority" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// AuthorityID instead. It exists only for internal usage by the builders.
func (m *ClientTemplateMutation) AuthorityIDs() (ids []string) {
	if id := m.authority; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetAuthority resets all changes to the "authority" edge.
func (m *ClientTemplateMutation) ResetAuthority() {
	m.authority = nil
	m.clearedauthority = false
}

// AddAPIKeyIDs adds the "api_keys" edge to the APIKey entity by ids.
func (m *ClientTemplateMutation) AddAPIKeyIDs(ids ...string) {
	if m.api_keys == nil {
		m.api_keys = make(map[string]struct{})
	}
	for i := range ids {
		m.api_keys[ids[i]] = struct{}{}
	}
}

// ClearAPIKeys clears the "api_keys" edge to the APIKey entity.
func (m *ClientTemplateMutation) ClearAPIKeys() {
	m.clearedapi_keys = true
}

// APIKeysCleared reports if the "api_keys" edge to the APIKey entity was cleared.
func (m *ClientTemplateMutation) APIKeysCleared() bool {
	return m.clearedapi_keys
}

// RemoveAPIKeyIDs removes the "api_keys" edge to the APIKey entity by IDs.
func (m *ClientTemplateMutation) RemoveAPIKeyIDs(ids ...string) {
	if m.removedapi_keys == nil {
		m.removedapi_keys = make(map[string]struct{})
	}
	for i := range ids {
		delete(m.api_keys, ids[i])
		m.removedapi_keys[ids[i]] = struct{}{}
	}
}

// RemovedAPIKeys returns the removed IDs of the "api_keys" edge to the APIKey entity.
func (m *ClientTemplateMutation) RemovedAPIKeysIDs() (ids []string) {
	for id := range m.removedapi_keys {
		ids = append(ids, id)
	}
	return
}

// APIKeysIDs returns the "api_keys" edge IDs in the mutation.
func (m *ClientTemplateMutation) APIKeysIDs() (ids []string) {
	for id := range m.api_keys {
		ids = append(ids, id)
	}
	return
}

// ResetAPIKeys resets all changes to the "api_keys" edge.
func (m *ClientTemplateMutation) ResetAPIKeys() {
	m.api_keys = nil
	m.clearedapi_keys = false
	m.removedapi_keys = nil
}

// Where appends a list predicates to the ClientTemplateMutation builder.
func (m *ClientTemplateMutation) Where(ps ...predicate.ClientTemplate) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the ClientTemplateMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *ClientTemplateMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.ClientTemplate, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *ClientTemplateMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *ClientTemplateMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (ClientTemplate).
func (m *ClientTemplateMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *ClientTemplateMutation) Fields() []string {
	fields := make([]string, 0, 9)
	if m.created_at != nil {
		fields = append(fields, clienttemplate.FieldCreatedAt)
	}
	if m.name != nil {
		fields = append(fields, clienttemplate.FieldName)
	}
	if m.common_name != nil {
		fields = append(fields, clienttemplate.FieldCommonName)
	}
	if m.tag != nil {
		fields = append(fields, clienttemplate.FieldTag)
	}
	if m.validity != nil {
		fields = append(fields, clienttemplate.FieldValidity)
	}
	if m.dns_names != nil {
		fields = append(fields, clienttemplate.FieldDNSNames)
	}
	if m.allow_additional_dns_names != nil {
		fields = append(fields, clienttemplate.FieldAllowAdditionalDNSNames)
	}
	if m.ip_addresses != nil {
		fields = append(fields, clienttemplate.FieldIPAddresses)
	}
	if m.allow_additional_ips != nil {
		fields = append(fields, clienttemplate.FieldAllowAdditionalIps)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *ClientTemplateMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case clienttemplate.FieldCreatedAt:
		return m.CreatedAt()
	case clienttemplate.FieldName:
		return m.Name()
	case clienttemplate.FieldCommonName:
		return m.CommonName()
	case clienttemplate.FieldTag:
		return m.Tag()
	case clienttemplate.FieldValidity:
		return m.Validity()
	case clienttemplate.FieldDNSNames:
		return m.DNSNames()
	case clienttemplate.FieldAllowAdditionalDNSNames:
		return m.AllowAdditionalDNSNames()
	case clienttemplate.FieldIPAddresses:
		return m.IPAddresses()
	case clienttemplate.FieldAllowAdditionalIps:
		return m.AllowAdditionalIps()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *ClientTemplateMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case clienttemplate.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case clienttemplate.FieldName:
		return m.OldName(ctx)
	case clienttemplate.FieldCommonName:
		return m.OldCommonName(ctx)
	case clienttemplate.FieldTag:
		return m.OldTag(ctx)
	case clienttemplate.FieldValidity:
		return m.OldValidity(ctx)
	case clienttemplate.FieldDNSNames:
		return m.OldDNSNames(ctx)
	case clienttemplate.FieldAllowAdditionalDNSNames:
		return m.OldAllowAdditionalDNSNames(ctx)
	case clienttemplate.FieldIPAddresses:
		return m.OldIPAddresses(ctx)
	case clienttemplate.FieldAllowAdditionalIps:
		return m.OldAllowAdditionalIps(ctx)
	}
	return nil, fmt.Errorf("unknown ClientTemplate field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ClientTemplateMutation) SetField(name string, value ent.Value) error {
	switch name {
	case clienttemplate.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case clienttemplate.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case clienttemplate.FieldCommonName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCommonName(v)
		return nil
	case clienttemplate.FieldTag:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTag(v)
		return nil
	case clienttemplate.FieldValidity:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetValidity(v)
		return nil
	case clienttemplate.FieldDNSNames:
		v, ok := value.([]string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDNSNames(v)
		return nil
	case clienttemplate.FieldAllowAdditionalDNSNames:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAllowAdditionalDNSNames(v)
		return nil
	case clienttemplate.FieldIPAddresses:
		v, ok := value.([]string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIPAddresses(v)
		return nil
	case clienttemplate.FieldAllowAdditionalIps:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAllowAdditionalIps(v)
		return nil
	}
	return fmt.Errorf("unknown ClientTemplate field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *ClientTemplateMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *ClientTemplateMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ClientTemplateMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown ClientTemplate numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *ClientTemplateMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(clienttemplate.FieldDNSNames) {
		fields = append(fields, clienttemplate.FieldDNSNames)
	}
	if m.FieldCleared(clienttemplate.FieldIPAddresses) {
		fields = append(fields, clienttemplate.FieldIPAddresses)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *ClientTemplateMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *ClientTemplateMutation) ClearField(name string) error {
	switch name {
	case clienttemplate.FieldDNSNames:
		m.ClearDNSNames()
		return nil
	case clienttemplate.FieldIPAddresses:
		m.ClearIPAddresses()
		return nil
	}
	return fmt.Errorf("unknown ClientTemplate nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *ClientTemplateMutation) ResetField(name string) error {
	switch name {
	case clienttemplate.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case clienttemplate.FieldName:
		m.ResetName()
		return nil
	case clienttemplate.FieldCommonName:
		m.ResetCommonName()
		return nil
	case clienttemplate.FieldTag:
		m.ResetTag()
		return nil
	case clienttemplate.FieldValidity:
		m.ResetValidity()
		return nil
	case clienttemplate.FieldDNSNames:
		m.ResetDNSNames()
		return nil
	case clienttemplate.FieldAllowAdditionalDNSNames:
		m.ResetAllowAdditionalDNSNames()
		return nil
	case clienttemplate.FieldIPAddresses:
		m.ResetIPAddresses()
		return nil
	case clienttemplate.FieldAllowAdditionalIps:
		m.ResetAllowAdditionalIps()
		return nil
	}
	return fmt.Errorf("unknown ClientTemplate field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *ClientTemplateMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.authority != nil {
		edges = append(edges, clienttemplate.EdgeAuthority)
	}
	if m.api_keys != nil {
		edges = append(edges, clienttemplate.EdgeAPIKeys)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *ClientTemplateMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case clienttemplate.EdgeAuthority:
		if id := m.authority; id != nil {
			return []ent.Value{*id}
		}
	case clienttemplate.EdgeAPIKeys:
		ids := make([]ent.Value, 0, len(m.api_keys))
		for id := range m.api_keys {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *ClientTemplateMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	if m.removedapi_keys != nil {
		edges = append(edges, clienttemplate.EdgeAPIKeys)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *ClientTemplateMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case clienttemplate.EdgeAPIKeys:
		ids := make([]ent.Value, 0, len(m.removedapi_keys))
		for id := range m.removedapi_keys {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *ClientTemplateMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedauthority {
		edges = append(edges, clienttemplate.EdgeAuthority)
	}
	if m.clearedapi_keys {
		edges = append(edges, clienttemplate.EdgeAPIKeys)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *ClientTemplateMutation) EdgeCleared(name string) bool {
	switch name {
	case clienttemplate.EdgeAuthority:
		return m.clearedauthority
	case clienttemplate.EdgeAPIKeys:
		return m.clearedapi_keys
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *ClientTemplateMutation) ClearEdge(name string) error {
	switch name {
	case clienttemplate.EdgeAuthority:
		m.ClearAuthority()
		return nil
	}
	return fmt.Errorf("unknown ClientTemplate unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *ClientTemplateMutation) ResetEdge(name string) error {
	switch name {
	case clienttemplate.EdgeAuthority:
		m.ResetAuthority()
		return nil
	case clienttemplate.EdgeAPIKeys:
		m.ResetAPIKeys()
		return nil
	}
	return fmt.Errorf("unknown ClientTemplate edge %s", name)
}

// RootKeyMutation represents an operation that mutates the RootKey nodes in the graph.
type RootKeyMutation struct {
	config
	op               Op
	typ              string
	id               *string
	created_at       *time.Time
	name             *string
	salt             *[]byte
	hash             *[]byte
	clearedFields    map[string]struct{}
	user_keys        map[string]struct{}
	removeduser_keys map[string]struct{}
	cleareduser_keys bool
	done             bool
	oldValue         func(context.Context) (*RootKey, error)
	predicates       []predicate.RootKey
}

var _ ent.Mutation = (*RootKeyMutation)(nil)

// rootkeyOption allows management of the mutation configuration using functional options.
type rootkeyOption func(*RootKeyMutation)

// newRootKeyMutation creates new mutation for the RootKey entity.
func newRootKeyMutation(c config, op Op, opts ...rootkeyOption) *RootKeyMutation {
	m := &RootKeyMutation{
		config:        c,
		op:            op,
		typ:           TypeRootKey,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withRootKeyID sets the ID field of the mutation.
func withRootKeyID(id string) rootkeyOption {
	return func(m *RootKeyMutation) {
		var (
			err   error
			once  sync.Once
			value *RootKey
		)
		m.oldValue = func(ctx context.Context) (*RootKey, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().RootKey.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withRootKey sets the old RootKey of the mutation.
func withRootKey(node *RootKey) rootkeyOption {
	return func(m *RootKeyMutation) {
		m.oldValue = func(context.Context) (*RootKey, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m RootKeyMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m RootKeyMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of RootKey entities.
func (m *RootKeyMutation) SetID(id string) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *RootKeyMutation) ID() (id string, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *RootKeyMutation) IDs(ctx context.Context) ([]string, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []string{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().RootKey.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreatedAt sets the "created_at" field.
func (m *RootKeyMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *RootKeyMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the RootKey entity.
// If the RootKey object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RootKeyMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *RootKeyMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetName sets the "name" field.
func (m *RootKeyMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *RootKeyMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the RootKey entity.
// If the RootKey object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RootKeyMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *RootKeyMutation) ResetName() {
	m.name = nil
}

// SetSalt sets the "salt" field.
func (m *RootKeyMutation) SetSalt(b []byte) {
	m.salt = &b
}

// Salt returns the value of the "salt" field in the mutation.
func (m *RootKeyMutation) Salt() (r []byte, exists bool) {
	v := m.salt
	if v == nil {
		return
	}
	return *v, true
}

// OldSalt returns the old "salt" field's value of the RootKey entity.
// If the RootKey object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RootKeyMutation) OldSalt(ctx context.Context) (v []byte, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSalt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSalt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSalt: %w", err)
	}
	return oldValue.Salt, nil
}

// ResetSalt resets all changes to the "salt" field.
func (m *RootKeyMutation) ResetSalt() {
	m.salt = nil
}

// SetHash sets the "hash" field.
func (m *RootKeyMutation) SetHash(b []byte) {
	m.hash = &b
}

// Hash returns the value of the "hash" field in the mutation.
func (m *RootKeyMutation) Hash() (r []byte, exists bool) {
	v := m.hash
	if v == nil {
		return
	}
	return *v, true
}

// OldHash returns the old "hash" field's value of the RootKey entity.
// If the RootKey object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RootKeyMutation) OldHash(ctx context.Context) (v []byte, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldHash is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldHash requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldHash: %w", err)
	}
	return oldValue.Hash, nil
}

// ResetHash resets all changes to the "hash" field.
func (m *RootKeyMutation) ResetHash() {
	m.hash = nil
}

// AddUserKeyIDs adds the "user_keys" edge to the UserKey entity by ids.
func (m *RootKeyMutation) AddUserKeyIDs(ids ...string) {
	if m.user_keys == nil {
		m.user_keys = make(map[string]struct{})
	}
	for i := range ids {
		m.user_keys[ids[i]] = struct{}{}
	}
}

// ClearUserKeys clears the "user_keys" edge to the UserKey entity.
func (m *RootKeyMutation) ClearUserKeys() {
	m.cleareduser_keys = true
}

// UserKeysCleared reports if the "user_keys" edge to the UserKey entity was cleared.
func (m *RootKeyMutation) UserKeysCleared() bool {
	return m.cleareduser_keys
}

// RemoveUserKeyIDs removes the "user_keys" edge to the UserKey entity by IDs.
func (m *RootKeyMutation) RemoveUserKeyIDs(ids ...string) {
	if m.removeduser_keys == nil {
		m.removeduser_keys = make(map[string]struct{})
	}
	for i := range ids {
		delete(m.user_keys, ids[i])
		m.removeduser_keys[ids[i]] = struct{}{}
	}
}

// RemovedUserKeys returns the removed IDs of the "user_keys" edge to the UserKey entity.
func (m *RootKeyMutation) RemovedUserKeysIDs() (ids []string) {
	for id := range m.removeduser_keys {
		ids = append(ids, id)
	}
	return
}

// UserKeysIDs returns the "user_keys" edge IDs in the mutation.
func (m *RootKeyMutation) UserKeysIDs() (ids []string) {
	for id := range m.user_keys {
		ids = append(ids, id)
	}
	return
}

// ResetUserKeys resets all changes to the "user_keys" edge.
func (m *RootKeyMutation) ResetUserKeys() {
	m.user_keys = nil
	m.cleareduser_keys = false
	m.removeduser_keys = nil
}

// Where appends a list predicates to the RootKeyMutation builder.
func (m *RootKeyMutation) Where(ps ...predicate.RootKey) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the RootKeyMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *RootKeyMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.RootKey, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *RootKeyMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *RootKeyMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (RootKey).
func (m *RootKeyMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *RootKeyMutation) Fields() []string {
	fields := make([]string, 0, 4)
	if m.created_at != nil {
		fields = append(fields, rootkey.FieldCreatedAt)
	}
	if m.name != nil {
		fields = append(fields, rootkey.FieldName)
	}
	if m.salt != nil {
		fields = append(fields, rootkey.FieldSalt)
	}
	if m.hash != nil {
		fields = append(fields, rootkey.FieldHash)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *RootKeyMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case rootkey.FieldCreatedAt:
		return m.CreatedAt()
	case rootkey.FieldName:
		return m.Name()
	case rootkey.FieldSalt:
		return m.Salt()
	case rootkey.FieldHash:
		return m.Hash()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *RootKeyMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case rootkey.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case rootkey.FieldName:
		return m.OldName(ctx)
	case rootkey.FieldSalt:
		return m.OldSalt(ctx)
	case rootkey.FieldHash:
		return m.OldHash(ctx)
	}
	return nil, fmt.Errorf("unknown RootKey field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *RootKeyMutation) SetField(name string, value ent.Value) error {
	switch name {
	case rootkey.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case rootkey.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case rootkey.FieldSalt:
		v, ok := value.([]byte)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSalt(v)
		return nil
	case rootkey.FieldHash:
		v, ok := value.([]byte)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetHash(v)
		return nil
	}
	return fmt.Errorf("unknown RootKey field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *RootKeyMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *RootKeyMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *RootKeyMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown RootKey numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *RootKeyMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *RootKeyMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *RootKeyMutation) ClearField(name string) error {
	return fmt.Errorf("unknown RootKey nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *RootKeyMutation) ResetField(name string) error {
	switch name {
	case rootkey.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case rootkey.FieldName:
		m.ResetName()
		return nil
	case rootkey.FieldSalt:
		m.ResetSalt()
		return nil
	case rootkey.FieldHash:
		m.ResetHash()
		return nil
	}
	return fmt.Errorf("unknown RootKey field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *RootKeyMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.user_keys != nil {
		edges = append(edges, rootkey.EdgeUserKeys)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *RootKeyMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case rootkey.EdgeUserKeys:
		ids := make([]ent.Value, 0, len(m.user_keys))
		for id := range m.user_keys {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *RootKeyMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removeduser_keys != nil {
		edges = append(edges, rootkey.EdgeUserKeys)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *RootKeyMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case rootkey.EdgeUserKeys:
		ids := make([]ent.Value, 0, len(m.removeduser_keys))
		for id := range m.removeduser_keys {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *RootKeyMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.cleareduser_keys {
		edges = append(edges, rootkey.EdgeUserKeys)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *RootKeyMutation) EdgeCleared(name string) bool {
	switch name {
	case rootkey.EdgeUserKeys:
		return m.cleareduser_keys
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *RootKeyMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown RootKey unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *RootKeyMutation) ResetEdge(name string) error {
	switch name {
	case rootkey.EdgeUserKeys:
		m.ResetUserKeys()
		return nil
	}
	return fmt.Errorf("unknown RootKey edge %s", name)
}

// ServerTemplateMutation represents an operation that mutates the ServerTemplate nodes in the graph.
type ServerTemplateMutation struct {
	config
	op                         Op
	typ                        string
	id                         *string
	created_at                 *time.Time
	name                       *string
	common_name                *string
	tag                        *string
	validity                   *string
	dns_names                  *[]string
	appenddns_names            []string
	allow_additional_dns_names *bool
	ip_addresses               *[]string
	appendip_addresses         []string
	allow_additional_ips       *bool
	clearedFields              map[string]struct{}
	authority                  *string
	clearedauthority           bool
	api_keys                   map[string]struct{}
	removedapi_keys            map[string]struct{}
	clearedapi_keys            bool
	done                       bool
	oldValue                   func(context.Context) (*ServerTemplate, error)
	predicates                 []predicate.ServerTemplate
}

var _ ent.Mutation = (*ServerTemplateMutation)(nil)

// servertemplateOption allows management of the mutation configuration using functional options.
type servertemplateOption func(*ServerTemplateMutation)

// newServerTemplateMutation creates new mutation for the ServerTemplate entity.
func newServerTemplateMutation(c config, op Op, opts ...servertemplateOption) *ServerTemplateMutation {
	m := &ServerTemplateMutation{
		config:        c,
		op:            op,
		typ:           TypeServerTemplate,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withServerTemplateID sets the ID field of the mutation.
func withServerTemplateID(id string) servertemplateOption {
	return func(m *ServerTemplateMutation) {
		var (
			err   error
			once  sync.Once
			value *ServerTemplate
		)
		m.oldValue = func(ctx context.Context) (*ServerTemplate, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().ServerTemplate.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withServerTemplate sets the old ServerTemplate of the mutation.
func withServerTemplate(node *ServerTemplate) servertemplateOption {
	return func(m *ServerTemplateMutation) {
		m.oldValue = func(context.Context) (*ServerTemplate, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ServerTemplateMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ServerTemplateMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of ServerTemplate entities.
func (m *ServerTemplateMutation) SetID(id string) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *ServerTemplateMutation) ID() (id string, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *ServerTemplateMutation) IDs(ctx context.Context) ([]string, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []string{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().ServerTemplate.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreatedAt sets the "created_at" field.
func (m *ServerTemplateMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *ServerTemplateMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the ServerTemplate entity.
// If the ServerTemplate object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ServerTemplateMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *ServerTemplateMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetName sets the "name" field.
func (m *ServerTemplateMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *ServerTemplateMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the ServerTemplate entity.
// If the ServerTemplate object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ServerTemplateMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *ServerTemplateMutation) ResetName() {
	m.name = nil
}

// SetCommonName sets the "common_name" field.
func (m *ServerTemplateMutation) SetCommonName(s string) {
	m.common_name = &s
}

// CommonName returns the value of the "common_name" field in the mutation.
func (m *ServerTemplateMutation) CommonName() (r string, exists bool) {
	v := m.common_name
	if v == nil {
		return
	}
	return *v, true
}

// OldCommonName returns the old "common_name" field's value of the ServerTemplate entity.
// If the ServerTemplate object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ServerTemplateMutation) OldCommonName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCommonName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCommonName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCommonName: %w", err)
	}
	return oldValue.CommonName, nil
}

// ResetCommonName resets all changes to the "common_name" field.
func (m *ServerTemplateMutation) ResetCommonName() {
	m.common_name = nil
}

// SetTag sets the "tag" field.
func (m *ServerTemplateMutation) SetTag(s string) {
	m.tag = &s
}

// Tag returns the value of the "tag" field in the mutation.
func (m *ServerTemplateMutation) Tag() (r string, exists bool) {
	v := m.tag
	if v == nil {
		return
	}
	return *v, true
}

// OldTag returns the old "tag" field's value of the ServerTemplate entity.
// If the ServerTemplate object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ServerTemplateMutation) OldTag(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTag is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTag requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTag: %w", err)
	}
	return oldValue.Tag, nil
}

// ResetTag resets all changes to the "tag" field.
func (m *ServerTemplateMutation) ResetTag() {
	m.tag = nil
}

// SetValidity sets the "validity" field.
func (m *ServerTemplateMutation) SetValidity(s string) {
	m.validity = &s
}

// Validity returns the value of the "validity" field in the mutation.
func (m *ServerTemplateMutation) Validity() (r string, exists bool) {
	v := m.validity
	if v == nil {
		return
	}
	return *v, true
}

// OldValidity returns the old "validity" field's value of the ServerTemplate entity.
// If the ServerTemplate object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ServerTemplateMutation) OldValidity(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldValidity is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldValidity requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldValidity: %w", err)
	}
	return oldValue.Validity, nil
}

// ResetValidity resets all changes to the "validity" field.
func (m *ServerTemplateMutation) ResetValidity() {
	m.validity = nil
}

// SetDNSNames sets the "dns_names" field.
func (m *ServerTemplateMutation) SetDNSNames(s []string) {
	m.dns_names = &s
	m.appenddns_names = nil
}

// DNSNames returns the value of the "dns_names" field in the mutation.
func (m *ServerTemplateMutation) DNSNames() (r []string, exists bool) {
	v := m.dns_names
	if v == nil {
		return
	}
	return *v, true
}

// OldDNSNames returns the old "dns_names" field's value of the ServerTemplate entity.
// If the ServerTemplate object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ServerTemplateMutation) OldDNSNames(ctx context.Context) (v []string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDNSNames is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDNSNames requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDNSNames: %w", err)
	}
	return oldValue.DNSNames, nil
}

// AppendDNSNames adds s to the "dns_names" field.
func (m *ServerTemplateMutation) AppendDNSNames(s []string) {
	m.appenddns_names = append(m.appenddns_names, s...)
}

// AppendedDNSNames returns the list of values that were appended to the "dns_names" field in this mutation.
func (m *ServerTemplateMutation) AppendedDNSNames() ([]string, bool) {
	if len(m.appenddns_names) == 0 {
		return nil, false
	}
	return m.appenddns_names, true
}

// ClearDNSNames clears the value of the "dns_names" field.
func (m *ServerTemplateMutation) ClearDNSNames() {
	m.dns_names = nil
	m.appenddns_names = nil
	m.clearedFields[servertemplate.FieldDNSNames] = struct{}{}
}

// DNSNamesCleared returns if the "dns_names" field was cleared in this mutation.
func (m *ServerTemplateMutation) DNSNamesCleared() bool {
	_, ok := m.clearedFields[servertemplate.FieldDNSNames]
	return ok
}

// ResetDNSNames resets all changes to the "dns_names" field.
func (m *ServerTemplateMutation) ResetDNSNames() {
	m.dns_names = nil
	m.appenddns_names = nil
	delete(m.clearedFields, servertemplate.FieldDNSNames)
}

// SetAllowAdditionalDNSNames sets the "allow_additional_dns_names" field.
func (m *ServerTemplateMutation) SetAllowAdditionalDNSNames(b bool) {
	m.allow_additional_dns_names = &b
}

// AllowAdditionalDNSNames returns the value of the "allow_additional_dns_names" field in the mutation.
func (m *ServerTemplateMutation) AllowAdditionalDNSNames() (r bool, exists bool) {
	v := m.allow_additional_dns_names
	if v == nil {
		return
	}
	return *v, true
}

// OldAllowAdditionalDNSNames returns the old "allow_additional_dns_names" field's value of the ServerTemplate entity.
// If the ServerTemplate object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ServerTemplateMutation) OldAllowAdditionalDNSNames(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAllowAdditionalDNSNames is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAllowAdditionalDNSNames requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAllowAdditionalDNSNames: %w", err)
	}
	return oldValue.AllowAdditionalDNSNames, nil
}

// ResetAllowAdditionalDNSNames resets all changes to the "allow_additional_dns_names" field.
func (m *ServerTemplateMutation) ResetAllowAdditionalDNSNames() {
	m.allow_additional_dns_names = nil
}

// SetIPAddresses sets the "ip_addresses" field.
func (m *ServerTemplateMutation) SetIPAddresses(s []string) {
	m.ip_addresses = &s
	m.appendip_addresses = nil
}

// IPAddresses returns the value of the "ip_addresses" field in the mutation.
func (m *ServerTemplateMutation) IPAddresses() (r []string, exists bool) {
	v := m.ip_addresses
	if v == nil {
		return
	}
	return *v, true
}

// OldIPAddresses returns the old "ip_addresses" field's value of the ServerTemplate entity.
// If the ServerTemplate object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ServerTemplateMutation) OldIPAddresses(ctx context.Context) (v []string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIPAddresses is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIPAddresses requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIPAddresses: %w", err)
	}
	return oldValue.IPAddresses, nil
}

// AppendIPAddresses adds s to the "ip_addresses" field.
func (m *ServerTemplateMutation) AppendIPAddresses(s []string) {
	m.appendip_addresses = append(m.appendip_addresses, s...)
}

// AppendedIPAddresses returns the list of values that were appended to the "ip_addresses" field in this mutation.
func (m *ServerTemplateMutation) AppendedIPAddresses() ([]string, bool) {
	if len(m.appendip_addresses) == 0 {
		return nil, false
	}
	return m.appendip_addresses, true
}

// ClearIPAddresses clears the value of the "ip_addresses" field.
func (m *ServerTemplateMutation) ClearIPAddresses() {
	m.ip_addresses = nil
	m.appendip_addresses = nil
	m.clearedFields[servertemplate.FieldIPAddresses] = struct{}{}
}

// IPAddressesCleared returns if the "ip_addresses" field was cleared in this mutation.
func (m *ServerTemplateMutation) IPAddressesCleared() bool {
	_, ok := m.clearedFields[servertemplate.FieldIPAddresses]
	return ok
}

// ResetIPAddresses resets all changes to the "ip_addresses" field.
func (m *ServerTemplateMutation) ResetIPAddresses() {
	m.ip_addresses = nil
	m.appendip_addresses = nil
	delete(m.clearedFields, servertemplate.FieldIPAddresses)
}

// SetAllowAdditionalIps sets the "allow_additional_ips" field.
func (m *ServerTemplateMutation) SetAllowAdditionalIps(b bool) {
	m.allow_additional_ips = &b
}

// AllowAdditionalIps returns the value of the "allow_additional_ips" field in the mutation.
func (m *ServerTemplateMutation) AllowAdditionalIps() (r bool, exists bool) {
	v := m.allow_additional_ips
	if v == nil {
		return
	}
	return *v, true
}

// OldAllowAdditionalIps returns the old "allow_additional_ips" field's value of the ServerTemplate entity.
// If the ServerTemplate object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ServerTemplateMutation) OldAllowAdditionalIps(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAllowAdditionalIps is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAllowAdditionalIps requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAllowAdditionalIps: %w", err)
	}
	return oldValue.AllowAdditionalIps, nil
}

// ResetAllowAdditionalIps resets all changes to the "allow_additional_ips" field.
func (m *ServerTemplateMutation) ResetAllowAdditionalIps() {
	m.allow_additional_ips = nil
}

// SetAuthorityID sets the "authority" edge to the Authority entity by id.
func (m *ServerTemplateMutation) SetAuthorityID(id string) {
	m.authority = &id
}

// ClearAuthority clears the "authority" edge to the Authority entity.
func (m *ServerTemplateMutation) ClearAuthority() {
	m.clearedauthority = true
}

// AuthorityCleared reports if the "authority" edge to the Authority entity was cleared.
func (m *ServerTemplateMutation) AuthorityCleared() bool {
	return m.clearedauthority
}

// AuthorityID returns the "authority" edge ID in the mutation.
func (m *ServerTemplateMutation) AuthorityID() (id string, exists bool) {
	if m.authority != nil {
		return *m.authority, true
	}
	return
}

// AuthorityIDs returns the "authority" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// AuthorityID instead. It exists only for internal usage by the builders.
func (m *ServerTemplateMutation) AuthorityIDs() (ids []string) {
	if id := m.authority; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetAuthority resets all changes to the "authority" edge.
func (m *ServerTemplateMutation) ResetAuthority() {
	m.authority = nil
	m.clearedauthority = false
}

// AddAPIKeyIDs adds the "api_keys" edge to the APIKey entity by ids.
func (m *ServerTemplateMutation) AddAPIKeyIDs(ids ...string) {
	if m.api_keys == nil {
		m.api_keys = make(map[string]struct{})
	}
	for i := range ids {
		m.api_keys[ids[i]] = struct{}{}
	}
}

// ClearAPIKeys clears the "api_keys" edge to the APIKey entity.
func (m *ServerTemplateMutation) ClearAPIKeys() {
	m.clearedapi_keys = true
}

// APIKeysCleared reports if the "api_keys" edge to the APIKey entity was cleared.
func (m *ServerTemplateMutation) APIKeysCleared() bool {
	return m.clearedapi_keys
}

// RemoveAPIKeyIDs removes the "api_keys" edge to the APIKey entity by IDs.
func (m *ServerTemplateMutation) RemoveAPIKeyIDs(ids ...string) {
	if m.removedapi_keys == nil {
		m.removedapi_keys = make(map[string]struct{})
	}
	for i := range ids {
		delete(m.api_keys, ids[i])
		m.removedapi_keys[ids[i]] = struct{}{}
	}
}

// RemovedAPIKeys returns the removed IDs of the "api_keys" edge to the APIKey entity.
func (m *ServerTemplateMutation) RemovedAPIKeysIDs() (ids []string) {
	for id := range m.removedapi_keys {
		ids = append(ids, id)
	}
	return
}

// APIKeysIDs returns the "api_keys" edge IDs in the mutation.
func (m *ServerTemplateMutation) APIKeysIDs() (ids []string) {
	for id := range m.api_keys {
		ids = append(ids, id)
	}
	return
}

// ResetAPIKeys resets all changes to the "api_keys" edge.
func (m *ServerTemplateMutation) ResetAPIKeys() {
	m.api_keys = nil
	m.clearedapi_keys = false
	m.removedapi_keys = nil
}

// Where appends a list predicates to the ServerTemplateMutation builder.
func (m *ServerTemplateMutation) Where(ps ...predicate.ServerTemplate) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the ServerTemplateMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *ServerTemplateMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.ServerTemplate, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *ServerTemplateMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *ServerTemplateMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (ServerTemplate).
func (m *ServerTemplateMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *ServerTemplateMutation) Fields() []string {
	fields := make([]string, 0, 9)
	if m.created_at != nil {
		fields = append(fields, servertemplate.FieldCreatedAt)
	}
	if m.name != nil {
		fields = append(fields, servertemplate.FieldName)
	}
	if m.common_name != nil {
		fields = append(fields, servertemplate.FieldCommonName)
	}
	if m.tag != nil {
		fields = append(fields, servertemplate.FieldTag)
	}
	if m.validity != nil {
		fields = append(fields, servertemplate.FieldValidity)
	}
	if m.dns_names != nil {
		fields = append(fields, servertemplate.FieldDNSNames)
	}
	if m.allow_additional_dns_names != nil {
		fields = append(fields, servertemplate.FieldAllowAdditionalDNSNames)
	}
	if m.ip_addresses != nil {
		fields = append(fields, servertemplate.FieldIPAddresses)
	}
	if m.allow_additional_ips != nil {
		fields = append(fields, servertemplate.FieldAllowAdditionalIps)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *ServerTemplateMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case servertemplate.FieldCreatedAt:
		return m.CreatedAt()
	case servertemplate.FieldName:
		return m.Name()
	case servertemplate.FieldCommonName:
		return m.CommonName()
	case servertemplate.FieldTag:
		return m.Tag()
	case servertemplate.FieldValidity:
		return m.Validity()
	case servertemplate.FieldDNSNames:
		return m.DNSNames()
	case servertemplate.FieldAllowAdditionalDNSNames:
		return m.AllowAdditionalDNSNames()
	case servertemplate.FieldIPAddresses:
		return m.IPAddresses()
	case servertemplate.FieldAllowAdditionalIps:
		return m.AllowAdditionalIps()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *ServerTemplateMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case servertemplate.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case servertemplate.FieldName:
		return m.OldName(ctx)
	case servertemplate.FieldCommonName:
		return m.OldCommonName(ctx)
	case servertemplate.FieldTag:
		return m.OldTag(ctx)
	case servertemplate.FieldValidity:
		return m.OldValidity(ctx)
	case servertemplate.FieldDNSNames:
		return m.OldDNSNames(ctx)
	case servertemplate.FieldAllowAdditionalDNSNames:
		return m.OldAllowAdditionalDNSNames(ctx)
	case servertemplate.FieldIPAddresses:
		return m.OldIPAddresses(ctx)
	case servertemplate.FieldAllowAdditionalIps:
		return m.OldAllowAdditionalIps(ctx)
	}
	return nil, fmt.Errorf("unknown ServerTemplate field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ServerTemplateMutation) SetField(name string, value ent.Value) error {
	switch name {
	case servertemplate.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case servertemplate.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case servertemplate.FieldCommonName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCommonName(v)
		return nil
	case servertemplate.FieldTag:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTag(v)
		return nil
	case servertemplate.FieldValidity:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetValidity(v)
		return nil
	case servertemplate.FieldDNSNames:
		v, ok := value.([]string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDNSNames(v)
		return nil
	case servertemplate.FieldAllowAdditionalDNSNames:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAllowAdditionalDNSNames(v)
		return nil
	case servertemplate.FieldIPAddresses:
		v, ok := value.([]string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIPAddresses(v)
		return nil
	case servertemplate.FieldAllowAdditionalIps:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAllowAdditionalIps(v)
		return nil
	}
	return fmt.Errorf("unknown ServerTemplate field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *ServerTemplateMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *ServerTemplateMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ServerTemplateMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown ServerTemplate numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *ServerTemplateMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(servertemplate.FieldDNSNames) {
		fields = append(fields, servertemplate.FieldDNSNames)
	}
	if m.FieldCleared(servertemplate.FieldIPAddresses) {
		fields = append(fields, servertemplate.FieldIPAddresses)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *ServerTemplateMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *ServerTemplateMutation) ClearField(name string) error {
	switch name {
	case servertemplate.FieldDNSNames:
		m.ClearDNSNames()
		return nil
	case servertemplate.FieldIPAddresses:
		m.ClearIPAddresses()
		return nil
	}
	return fmt.Errorf("unknown ServerTemplate nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *ServerTemplateMutation) ResetField(name string) error {
	switch name {
	case servertemplate.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case servertemplate.FieldName:
		m.ResetName()
		return nil
	case servertemplate.FieldCommonName:
		m.ResetCommonName()
		return nil
	case servertemplate.FieldTag:
		m.ResetTag()
		return nil
	case servertemplate.FieldValidity:
		m.ResetValidity()
		return nil
	case servertemplate.FieldDNSNames:
		m.ResetDNSNames()
		return nil
	case servertemplate.FieldAllowAdditionalDNSNames:
		m.ResetAllowAdditionalDNSNames()
		return nil
	case servertemplate.FieldIPAddresses:
		m.ResetIPAddresses()
		return nil
	case servertemplate.FieldAllowAdditionalIps:
		m.ResetAllowAdditionalIps()
		return nil
	}
	return fmt.Errorf("unknown ServerTemplate field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *ServerTemplateMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.authority != nil {
		edges = append(edges, servertemplate.EdgeAuthority)
	}
	if m.api_keys != nil {
		edges = append(edges, servertemplate.EdgeAPIKeys)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *ServerTemplateMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case servertemplate.EdgeAuthority:
		if id := m.authority; id != nil {
			return []ent.Value{*id}
		}
	case servertemplate.EdgeAPIKeys:
		ids := make([]ent.Value, 0, len(m.api_keys))
		for id := range m.api_keys {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *ServerTemplateMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	if m.removedapi_keys != nil {
		edges = append(edges, servertemplate.EdgeAPIKeys)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *ServerTemplateMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case servertemplate.EdgeAPIKeys:
		ids := make([]ent.Value, 0, len(m.removedapi_keys))
		for id := range m.removedapi_keys {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *ServerTemplateMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedauthority {
		edges = append(edges, servertemplate.EdgeAuthority)
	}
	if m.clearedapi_keys {
		edges = append(edges, servertemplate.EdgeAPIKeys)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *ServerTemplateMutation) EdgeCleared(name string) bool {
	switch name {
	case servertemplate.EdgeAuthority:
		return m.clearedauthority
	case servertemplate.EdgeAPIKeys:
		return m.clearedapi_keys
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *ServerTemplateMutation) ClearEdge(name string) error {
	switch name {
	case servertemplate.EdgeAuthority:
		m.ClearAuthority()
		return nil
	}
	return fmt.Errorf("unknown ServerTemplate unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *ServerTemplateMutation) ResetEdge(name string) error {
	switch name {
	case servertemplate.EdgeAuthority:
		m.ResetAuthority()
		return nil
	case servertemplate.EdgeAPIKeys:
		m.ResetAPIKeys()
		return nil
	}
	return fmt.Errorf("unknown ServerTemplate edge %s", name)
}

// UserKeyMutation represents an operation that mutates the UserKey nodes in the graph.
type UserKeyMutation struct {
	config
	op                 Op
	typ                string
	id                 *string
	created_at         *time.Time
	name               *string
	salt               *[]byte
	hash               *[]byte
	clearedFields      map[string]struct{}
	root_key           *string
	clearedroot_key    bool
	authorities        map[string]struct{}
	removedauthorities map[string]struct{}
	clearedauthorities bool
	done               bool
	oldValue           func(context.Context) (*UserKey, error)
	predicates         []predicate.UserKey
}

var _ ent.Mutation = (*UserKeyMutation)(nil)

// userkeyOption allows management of the mutation configuration using functional options.
type userkeyOption func(*UserKeyMutation)

// newUserKeyMutation creates new mutation for the UserKey entity.
func newUserKeyMutation(c config, op Op, opts ...userkeyOption) *UserKeyMutation {
	m := &UserKeyMutation{
		config:        c,
		op:            op,
		typ:           TypeUserKey,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withUserKeyID sets the ID field of the mutation.
func withUserKeyID(id string) userkeyOption {
	return func(m *UserKeyMutation) {
		var (
			err   error
			once  sync.Once
			value *UserKey
		)
		m.oldValue = func(ctx context.Context) (*UserKey, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().UserKey.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withUserKey sets the old UserKey of the mutation.
func withUserKey(node *UserKey) userkeyOption {
	return func(m *UserKeyMutation) {
		m.oldValue = func(context.Context) (*UserKey, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m UserKeyMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m UserKeyMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of UserKey entities.
func (m *UserKeyMutation) SetID(id string) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *UserKeyMutation) ID() (id string, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *UserKeyMutation) IDs(ctx context.Context) ([]string, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []string{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().UserKey.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreatedAt sets the "created_at" field.
func (m *UserKeyMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *UserKeyMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the UserKey entity.
// If the UserKey object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserKeyMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *UserKeyMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetName sets the "name" field.
func (m *UserKeyMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *UserKeyMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the UserKey entity.
// If the UserKey object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserKeyMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *UserKeyMutation) ResetName() {
	m.name = nil
}

// SetSalt sets the "salt" field.
func (m *UserKeyMutation) SetSalt(b []byte) {
	m.salt = &b
}

// Salt returns the value of the "salt" field in the mutation.
func (m *UserKeyMutation) Salt() (r []byte, exists bool) {
	v := m.salt
	if v == nil {
		return
	}
	return *v, true
}

// OldSalt returns the old "salt" field's value of the UserKey entity.
// If the UserKey object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserKeyMutation) OldSalt(ctx context.Context) (v []byte, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSalt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSalt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSalt: %w", err)
	}
	return oldValue.Salt, nil
}

// ResetSalt resets all changes to the "salt" field.
func (m *UserKeyMutation) ResetSalt() {
	m.salt = nil
}

// SetHash sets the "hash" field.
func (m *UserKeyMutation) SetHash(b []byte) {
	m.hash = &b
}

// Hash returns the value of the "hash" field in the mutation.
func (m *UserKeyMutation) Hash() (r []byte, exists bool) {
	v := m.hash
	if v == nil {
		return
	}
	return *v, true
}

// OldHash returns the old "hash" field's value of the UserKey entity.
// If the UserKey object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserKeyMutation) OldHash(ctx context.Context) (v []byte, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldHash is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldHash requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldHash: %w", err)
	}
	return oldValue.Hash, nil
}

// ResetHash resets all changes to the "hash" field.
func (m *UserKeyMutation) ResetHash() {
	m.hash = nil
}

// SetRootKeyID sets the "root_key" edge to the RootKey entity by id.
func (m *UserKeyMutation) SetRootKeyID(id string) {
	m.root_key = &id
}

// ClearRootKey clears the "root_key" edge to the RootKey entity.
func (m *UserKeyMutation) ClearRootKey() {
	m.clearedroot_key = true
}

// RootKeyCleared reports if the "root_key" edge to the RootKey entity was cleared.
func (m *UserKeyMutation) RootKeyCleared() bool {
	return m.clearedroot_key
}

// RootKeyID returns the "root_key" edge ID in the mutation.
func (m *UserKeyMutation) RootKeyID() (id string, exists bool) {
	if m.root_key != nil {
		return *m.root_key, true
	}
	return
}

// RootKeyIDs returns the "root_key" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// RootKeyID instead. It exists only for internal usage by the builders.
func (m *UserKeyMutation) RootKeyIDs() (ids []string) {
	if id := m.root_key; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetRootKey resets all changes to the "root_key" edge.
func (m *UserKeyMutation) ResetRootKey() {
	m.root_key = nil
	m.clearedroot_key = false
}

// AddAuthorityIDs adds the "authorities" edge to the Authority entity by ids.
func (m *UserKeyMutation) AddAuthorityIDs(ids ...string) {
	if m.authorities == nil {
		m.authorities = make(map[string]struct{})
	}
	for i := range ids {
		m.authorities[ids[i]] = struct{}{}
	}
}

// ClearAuthorities clears the "authorities" edge to the Authority entity.
func (m *UserKeyMutation) ClearAuthorities() {
	m.clearedauthorities = true
}

// AuthoritiesCleared reports if the "authorities" edge to the Authority entity was cleared.
func (m *UserKeyMutation) AuthoritiesCleared() bool {
	return m.clearedauthorities
}

// RemoveAuthorityIDs removes the "authorities" edge to the Authority entity by IDs.
func (m *UserKeyMutation) RemoveAuthorityIDs(ids ...string) {
	if m.removedauthorities == nil {
		m.removedauthorities = make(map[string]struct{})
	}
	for i := range ids {
		delete(m.authorities, ids[i])
		m.removedauthorities[ids[i]] = struct{}{}
	}
}

// RemovedAuthorities returns the removed IDs of the "authorities" edge to the Authority entity.
func (m *UserKeyMutation) RemovedAuthoritiesIDs() (ids []string) {
	for id := range m.removedauthorities {
		ids = append(ids, id)
	}
	return
}

// AuthoritiesIDs returns the "authorities" edge IDs in the mutation.
func (m *UserKeyMutation) AuthoritiesIDs() (ids []string) {
	for id := range m.authorities {
		ids = append(ids, id)
	}
	return
}

// ResetAuthorities resets all changes to the "authorities" edge.
func (m *UserKeyMutation) ResetAuthorities() {
	m.authorities = nil
	m.clearedauthorities = false
	m.removedauthorities = nil
}

// Where appends a list predicates to the UserKeyMutation builder.
func (m *UserKeyMutation) Where(ps ...predicate.UserKey) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the UserKeyMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *UserKeyMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.UserKey, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *UserKeyMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *UserKeyMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (UserKey).
func (m *UserKeyMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *UserKeyMutation) Fields() []string {
	fields := make([]string, 0, 4)
	if m.created_at != nil {
		fields = append(fields, userkey.FieldCreatedAt)
	}
	if m.name != nil {
		fields = append(fields, userkey.FieldName)
	}
	if m.salt != nil {
		fields = append(fields, userkey.FieldSalt)
	}
	if m.hash != nil {
		fields = append(fields, userkey.FieldHash)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *UserKeyMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case userkey.FieldCreatedAt:
		return m.CreatedAt()
	case userkey.FieldName:
		return m.Name()
	case userkey.FieldSalt:
		return m.Salt()
	case userkey.FieldHash:
		return m.Hash()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *UserKeyMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case userkey.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case userkey.FieldName:
		return m.OldName(ctx)
	case userkey.FieldSalt:
		return m.OldSalt(ctx)
	case userkey.FieldHash:
		return m.OldHash(ctx)
	}
	return nil, fmt.Errorf("unknown UserKey field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserKeyMutation) SetField(name string, value ent.Value) error {
	switch name {
	case userkey.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case userkey.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case userkey.FieldSalt:
		v, ok := value.([]byte)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSalt(v)
		return nil
	case userkey.FieldHash:
		v, ok := value.([]byte)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetHash(v)
		return nil
	}
	return fmt.Errorf("unknown UserKey field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *UserKeyMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *UserKeyMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserKeyMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown UserKey numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *UserKeyMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *UserKeyMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *UserKeyMutation) ClearField(name string) error {
	return fmt.Errorf("unknown UserKey nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *UserKeyMutation) ResetField(name string) error {
	switch name {
	case userkey.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case userkey.FieldName:
		m.ResetName()
		return nil
	case userkey.FieldSalt:
		m.ResetSalt()
		return nil
	case userkey.FieldHash:
		m.ResetHash()
		return nil
	}
	return fmt.Errorf("unknown UserKey field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *UserKeyMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.root_key != nil {
		edges = append(edges, userkey.EdgeRootKey)
	}
	if m.authorities != nil {
		edges = append(edges, userkey.EdgeAuthorities)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *UserKeyMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case userkey.EdgeRootKey:
		if id := m.root_key; id != nil {
			return []ent.Value{*id}
		}
	case userkey.EdgeAuthorities:
		ids := make([]ent.Value, 0, len(m.authorities))
		for id := range m.authorities {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *UserKeyMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	if m.removedauthorities != nil {
		edges = append(edges, userkey.EdgeAuthorities)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *UserKeyMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case userkey.EdgeAuthorities:
		ids := make([]ent.Value, 0, len(m.removedauthorities))
		for id := range m.removedauthorities {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *UserKeyMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedroot_key {
		edges = append(edges, userkey.EdgeRootKey)
	}
	if m.clearedauthorities {
		edges = append(edges, userkey.EdgeAuthorities)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *UserKeyMutation) EdgeCleared(name string) bool {
	switch name {
	case userkey.EdgeRootKey:
		return m.clearedroot_key
	case userkey.EdgeAuthorities:
		return m.clearedauthorities
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *UserKeyMutation) ClearEdge(name string) error {
	switch name {
	case userkey.EdgeRootKey:
		m.ClearRootKey()
		return nil
	}
	return fmt.Errorf("unknown UserKey unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *UserKeyMutation) ResetEdge(name string) error {
	switch name {
	case userkey.EdgeRootKey:
		m.ResetRootKey()
		return nil
	case userkey.EdgeAuthorities:
		m.ResetAuthorities()
		return nil
	}
	return fmt.Errorf("unknown UserKey edge %s", name)
}
