// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/loopholelabs/endkey/internal/ent/predicate"
	"github.com/loopholelabs/endkey/internal/ent/rootkey"
	"github.com/loopholelabs/endkey/internal/ent/userkey"
)

// RootKeyUpdate is the builder for updating RootKey entities.
type RootKeyUpdate struct {
	config
	hooks    []Hook
	mutation *RootKeyMutation
}

// Where appends a list predicates to the RootKeyUpdate builder.
func (rku *RootKeyUpdate) Where(ps ...predicate.RootKey) *RootKeyUpdate {
	rku.mutation.Where(ps...)
	return rku
}

// AddUserKeyIDs adds the "user_keys" edge to the UserKey entity by IDs.
func (rku *RootKeyUpdate) AddUserKeyIDs(ids ...string) *RootKeyUpdate {
	rku.mutation.AddUserKeyIDs(ids...)
	return rku
}

// AddUserKeys adds the "user_keys" edges to the UserKey entity.
func (rku *RootKeyUpdate) AddUserKeys(u ...*UserKey) *RootKeyUpdate {
	ids := make([]string, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return rku.AddUserKeyIDs(ids...)
}

// Mutation returns the RootKeyMutation object of the builder.
func (rku *RootKeyUpdate) Mutation() *RootKeyMutation {
	return rku.mutation
}

// ClearUserKeys clears all "user_keys" edges to the UserKey entity.
func (rku *RootKeyUpdate) ClearUserKeys() *RootKeyUpdate {
	rku.mutation.ClearUserKeys()
	return rku
}

// RemoveUserKeyIDs removes the "user_keys" edge to UserKey entities by IDs.
func (rku *RootKeyUpdate) RemoveUserKeyIDs(ids ...string) *RootKeyUpdate {
	rku.mutation.RemoveUserKeyIDs(ids...)
	return rku
}

// RemoveUserKeys removes "user_keys" edges to UserKey entities.
func (rku *RootKeyUpdate) RemoveUserKeys(u ...*UserKey) *RootKeyUpdate {
	ids := make([]string, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return rku.RemoveUserKeyIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (rku *RootKeyUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, rku.sqlSave, rku.mutation, rku.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (rku *RootKeyUpdate) SaveX(ctx context.Context) int {
	affected, err := rku.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (rku *RootKeyUpdate) Exec(ctx context.Context) error {
	_, err := rku.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rku *RootKeyUpdate) ExecX(ctx context.Context) {
	if err := rku.Exec(ctx); err != nil {
		panic(err)
	}
}

func (rku *RootKeyUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(rootkey.Table, rootkey.Columns, sqlgraph.NewFieldSpec(rootkey.FieldID, field.TypeString))
	if ps := rku.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if rku.mutation.UserKeysCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   rootkey.UserKeysTable,
			Columns: []string{rootkey.UserKeysColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userkey.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rku.mutation.RemovedUserKeysIDs(); len(nodes) > 0 && !rku.mutation.UserKeysCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   rootkey.UserKeysTable,
			Columns: []string{rootkey.UserKeysColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userkey.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rku.mutation.UserKeysIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   rootkey.UserKeysTable,
			Columns: []string{rootkey.UserKeysColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userkey.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, rku.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{rootkey.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	rku.mutation.done = true
	return n, nil
}

// RootKeyUpdateOne is the builder for updating a single RootKey entity.
type RootKeyUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *RootKeyMutation
}

// AddUserKeyIDs adds the "user_keys" edge to the UserKey entity by IDs.
func (rkuo *RootKeyUpdateOne) AddUserKeyIDs(ids ...string) *RootKeyUpdateOne {
	rkuo.mutation.AddUserKeyIDs(ids...)
	return rkuo
}

// AddUserKeys adds the "user_keys" edges to the UserKey entity.
func (rkuo *RootKeyUpdateOne) AddUserKeys(u ...*UserKey) *RootKeyUpdateOne {
	ids := make([]string, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return rkuo.AddUserKeyIDs(ids...)
}

// Mutation returns the RootKeyMutation object of the builder.
func (rkuo *RootKeyUpdateOne) Mutation() *RootKeyMutation {
	return rkuo.mutation
}

// ClearUserKeys clears all "user_keys" edges to the UserKey entity.
func (rkuo *RootKeyUpdateOne) ClearUserKeys() *RootKeyUpdateOne {
	rkuo.mutation.ClearUserKeys()
	return rkuo
}

// RemoveUserKeyIDs removes the "user_keys" edge to UserKey entities by IDs.
func (rkuo *RootKeyUpdateOne) RemoveUserKeyIDs(ids ...string) *RootKeyUpdateOne {
	rkuo.mutation.RemoveUserKeyIDs(ids...)
	return rkuo
}

// RemoveUserKeys removes "user_keys" edges to UserKey entities.
func (rkuo *RootKeyUpdateOne) RemoveUserKeys(u ...*UserKey) *RootKeyUpdateOne {
	ids := make([]string, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return rkuo.RemoveUserKeyIDs(ids...)
}

// Where appends a list predicates to the RootKeyUpdate builder.
func (rkuo *RootKeyUpdateOne) Where(ps ...predicate.RootKey) *RootKeyUpdateOne {
	rkuo.mutation.Where(ps...)
	return rkuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (rkuo *RootKeyUpdateOne) Select(field string, fields ...string) *RootKeyUpdateOne {
	rkuo.fields = append([]string{field}, fields...)
	return rkuo
}

// Save executes the query and returns the updated RootKey entity.
func (rkuo *RootKeyUpdateOne) Save(ctx context.Context) (*RootKey, error) {
	return withHooks(ctx, rkuo.sqlSave, rkuo.mutation, rkuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (rkuo *RootKeyUpdateOne) SaveX(ctx context.Context) *RootKey {
	node, err := rkuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (rkuo *RootKeyUpdateOne) Exec(ctx context.Context) error {
	_, err := rkuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rkuo *RootKeyUpdateOne) ExecX(ctx context.Context) {
	if err := rkuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (rkuo *RootKeyUpdateOne) sqlSave(ctx context.Context) (_node *RootKey, err error) {
	_spec := sqlgraph.NewUpdateSpec(rootkey.Table, rootkey.Columns, sqlgraph.NewFieldSpec(rootkey.FieldID, field.TypeString))
	id, ok := rkuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "RootKey.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := rkuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, rootkey.FieldID)
		for _, f := range fields {
			if !rootkey.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != rootkey.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := rkuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if rkuo.mutation.UserKeysCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   rootkey.UserKeysTable,
			Columns: []string{rootkey.UserKeysColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userkey.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rkuo.mutation.RemovedUserKeysIDs(); len(nodes) > 0 && !rkuo.mutation.UserKeysCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   rootkey.UserKeysTable,
			Columns: []string{rootkey.UserKeysColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userkey.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rkuo.mutation.UserKeysIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   rootkey.UserKeysTable,
			Columns: []string{rootkey.UserKeysColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userkey.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &RootKey{config: rkuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, rkuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{rootkey.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	rkuo.mutation.done = true
	return _node, nil
}
