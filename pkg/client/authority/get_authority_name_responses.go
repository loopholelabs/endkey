// Code generated by go-swagger; DO NOT EDIT.

package authority

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/loopholelabs/endkey/pkg/client/models"
)

// GetAuthorityNameReader is a Reader for the GetAuthorityName structure.
type GetAuthorityNameReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetAuthorityNameReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetAuthorityNameOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetAuthorityNameBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewGetAuthorityNameUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetAuthorityNameNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 409:
		result := NewGetAuthorityNameConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 412:
		result := NewGetAuthorityNamePreconditionFailed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetAuthorityNameInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /authority/{name}] GetAuthorityName", response, response.Code())
	}
}

// NewGetAuthorityNameOK creates a GetAuthorityNameOK with default headers values
func NewGetAuthorityNameOK() *GetAuthorityNameOK {
	return &GetAuthorityNameOK{}
}

/*
GetAuthorityNameOK describes a response with status code 200, with default header values.

OK
*/
type GetAuthorityNameOK struct {
	Payload *models.ModelsAuthorityResponse
}

// IsSuccess returns true when this get authority name o k response has a 2xx status code
func (o *GetAuthorityNameOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get authority name o k response has a 3xx status code
func (o *GetAuthorityNameOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get authority name o k response has a 4xx status code
func (o *GetAuthorityNameOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get authority name o k response has a 5xx status code
func (o *GetAuthorityNameOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get authority name o k response a status code equal to that given
func (o *GetAuthorityNameOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get authority name o k response
func (o *GetAuthorityNameOK) Code() int {
	return 200
}

func (o *GetAuthorityNameOK) Error() string {
	return fmt.Sprintf("[GET /authority/{name}][%d] getAuthorityNameOK  %+v", 200, o.Payload)
}

func (o *GetAuthorityNameOK) String() string {
	return fmt.Sprintf("[GET /authority/{name}][%d] getAuthorityNameOK  %+v", 200, o.Payload)
}

func (o *GetAuthorityNameOK) GetPayload() *models.ModelsAuthorityResponse {
	return o.Payload
}

func (o *GetAuthorityNameOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ModelsAuthorityResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAuthorityNameBadRequest creates a GetAuthorityNameBadRequest with default headers values
func NewGetAuthorityNameBadRequest() *GetAuthorityNameBadRequest {
	return &GetAuthorityNameBadRequest{}
}

/*
GetAuthorityNameBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type GetAuthorityNameBadRequest struct {
	Payload string
}

// IsSuccess returns true when this get authority name bad request response has a 2xx status code
func (o *GetAuthorityNameBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get authority name bad request response has a 3xx status code
func (o *GetAuthorityNameBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get authority name bad request response has a 4xx status code
func (o *GetAuthorityNameBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this get authority name bad request response has a 5xx status code
func (o *GetAuthorityNameBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this get authority name bad request response a status code equal to that given
func (o *GetAuthorityNameBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the get authority name bad request response
func (o *GetAuthorityNameBadRequest) Code() int {
	return 400
}

func (o *GetAuthorityNameBadRequest) Error() string {
	return fmt.Sprintf("[GET /authority/{name}][%d] getAuthorityNameBadRequest  %+v", 400, o.Payload)
}

func (o *GetAuthorityNameBadRequest) String() string {
	return fmt.Sprintf("[GET /authority/{name}][%d] getAuthorityNameBadRequest  %+v", 400, o.Payload)
}

func (o *GetAuthorityNameBadRequest) GetPayload() string {
	return o.Payload
}

func (o *GetAuthorityNameBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAuthorityNameUnauthorized creates a GetAuthorityNameUnauthorized with default headers values
func NewGetAuthorityNameUnauthorized() *GetAuthorityNameUnauthorized {
	return &GetAuthorityNameUnauthorized{}
}

/*
GetAuthorityNameUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type GetAuthorityNameUnauthorized struct {
	Payload string
}

// IsSuccess returns true when this get authority name unauthorized response has a 2xx status code
func (o *GetAuthorityNameUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get authority name unauthorized response has a 3xx status code
func (o *GetAuthorityNameUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get authority name unauthorized response has a 4xx status code
func (o *GetAuthorityNameUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this get authority name unauthorized response has a 5xx status code
func (o *GetAuthorityNameUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this get authority name unauthorized response a status code equal to that given
func (o *GetAuthorityNameUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the get authority name unauthorized response
func (o *GetAuthorityNameUnauthorized) Code() int {
	return 401
}

func (o *GetAuthorityNameUnauthorized) Error() string {
	return fmt.Sprintf("[GET /authority/{name}][%d] getAuthorityNameUnauthorized  %+v", 401, o.Payload)
}

func (o *GetAuthorityNameUnauthorized) String() string {
	return fmt.Sprintf("[GET /authority/{name}][%d] getAuthorityNameUnauthorized  %+v", 401, o.Payload)
}

func (o *GetAuthorityNameUnauthorized) GetPayload() string {
	return o.Payload
}

func (o *GetAuthorityNameUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAuthorityNameNotFound creates a GetAuthorityNameNotFound with default headers values
func NewGetAuthorityNameNotFound() *GetAuthorityNameNotFound {
	return &GetAuthorityNameNotFound{}
}

/*
GetAuthorityNameNotFound describes a response with status code 404, with default header values.

Not Found
*/
type GetAuthorityNameNotFound struct {
	Payload string
}

// IsSuccess returns true when this get authority name not found response has a 2xx status code
func (o *GetAuthorityNameNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get authority name not found response has a 3xx status code
func (o *GetAuthorityNameNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get authority name not found response has a 4xx status code
func (o *GetAuthorityNameNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get authority name not found response has a 5xx status code
func (o *GetAuthorityNameNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get authority name not found response a status code equal to that given
func (o *GetAuthorityNameNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the get authority name not found response
func (o *GetAuthorityNameNotFound) Code() int {
	return 404
}

func (o *GetAuthorityNameNotFound) Error() string {
	return fmt.Sprintf("[GET /authority/{name}][%d] getAuthorityNameNotFound  %+v", 404, o.Payload)
}

func (o *GetAuthorityNameNotFound) String() string {
	return fmt.Sprintf("[GET /authority/{name}][%d] getAuthorityNameNotFound  %+v", 404, o.Payload)
}

func (o *GetAuthorityNameNotFound) GetPayload() string {
	return o.Payload
}

func (o *GetAuthorityNameNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAuthorityNameConflict creates a GetAuthorityNameConflict with default headers values
func NewGetAuthorityNameConflict() *GetAuthorityNameConflict {
	return &GetAuthorityNameConflict{}
}

/*
GetAuthorityNameConflict describes a response with status code 409, with default header values.

Conflict
*/
type GetAuthorityNameConflict struct {
	Payload string
}

// IsSuccess returns true when this get authority name conflict response has a 2xx status code
func (o *GetAuthorityNameConflict) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get authority name conflict response has a 3xx status code
func (o *GetAuthorityNameConflict) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get authority name conflict response has a 4xx status code
func (o *GetAuthorityNameConflict) IsClientError() bool {
	return true
}

// IsServerError returns true when this get authority name conflict response has a 5xx status code
func (o *GetAuthorityNameConflict) IsServerError() bool {
	return false
}

// IsCode returns true when this get authority name conflict response a status code equal to that given
func (o *GetAuthorityNameConflict) IsCode(code int) bool {
	return code == 409
}

// Code gets the status code for the get authority name conflict response
func (o *GetAuthorityNameConflict) Code() int {
	return 409
}

func (o *GetAuthorityNameConflict) Error() string {
	return fmt.Sprintf("[GET /authority/{name}][%d] getAuthorityNameConflict  %+v", 409, o.Payload)
}

func (o *GetAuthorityNameConflict) String() string {
	return fmt.Sprintf("[GET /authority/{name}][%d] getAuthorityNameConflict  %+v", 409, o.Payload)
}

func (o *GetAuthorityNameConflict) GetPayload() string {
	return o.Payload
}

func (o *GetAuthorityNameConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAuthorityNamePreconditionFailed creates a GetAuthorityNamePreconditionFailed with default headers values
func NewGetAuthorityNamePreconditionFailed() *GetAuthorityNamePreconditionFailed {
	return &GetAuthorityNamePreconditionFailed{}
}

/*
GetAuthorityNamePreconditionFailed describes a response with status code 412, with default header values.

Precondition Failed
*/
type GetAuthorityNamePreconditionFailed struct {
	Payload string
}

// IsSuccess returns true when this get authority name precondition failed response has a 2xx status code
func (o *GetAuthorityNamePreconditionFailed) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get authority name precondition failed response has a 3xx status code
func (o *GetAuthorityNamePreconditionFailed) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get authority name precondition failed response has a 4xx status code
func (o *GetAuthorityNamePreconditionFailed) IsClientError() bool {
	return true
}

// IsServerError returns true when this get authority name precondition failed response has a 5xx status code
func (o *GetAuthorityNamePreconditionFailed) IsServerError() bool {
	return false
}

// IsCode returns true when this get authority name precondition failed response a status code equal to that given
func (o *GetAuthorityNamePreconditionFailed) IsCode(code int) bool {
	return code == 412
}

// Code gets the status code for the get authority name precondition failed response
func (o *GetAuthorityNamePreconditionFailed) Code() int {
	return 412
}

func (o *GetAuthorityNamePreconditionFailed) Error() string {
	return fmt.Sprintf("[GET /authority/{name}][%d] getAuthorityNamePreconditionFailed  %+v", 412, o.Payload)
}

func (o *GetAuthorityNamePreconditionFailed) String() string {
	return fmt.Sprintf("[GET /authority/{name}][%d] getAuthorityNamePreconditionFailed  %+v", 412, o.Payload)
}

func (o *GetAuthorityNamePreconditionFailed) GetPayload() string {
	return o.Payload
}

func (o *GetAuthorityNamePreconditionFailed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAuthorityNameInternalServerError creates a GetAuthorityNameInternalServerError with default headers values
func NewGetAuthorityNameInternalServerError() *GetAuthorityNameInternalServerError {
	return &GetAuthorityNameInternalServerError{}
}

/*
GetAuthorityNameInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type GetAuthorityNameInternalServerError struct {
	Payload string
}

// IsSuccess returns true when this get authority name internal server error response has a 2xx status code
func (o *GetAuthorityNameInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get authority name internal server error response has a 3xx status code
func (o *GetAuthorityNameInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get authority name internal server error response has a 4xx status code
func (o *GetAuthorityNameInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this get authority name internal server error response has a 5xx status code
func (o *GetAuthorityNameInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this get authority name internal server error response a status code equal to that given
func (o *GetAuthorityNameInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the get authority name internal server error response
func (o *GetAuthorityNameInternalServerError) Code() int {
	return 500
}

func (o *GetAuthorityNameInternalServerError) Error() string {
	return fmt.Sprintf("[GET /authority/{name}][%d] getAuthorityNameInternalServerError  %+v", 500, o.Payload)
}

func (o *GetAuthorityNameInternalServerError) String() string {
	return fmt.Sprintf("[GET /authority/{name}][%d] getAuthorityNameInternalServerError  %+v", 500, o.Payload)
}

func (o *GetAuthorityNameInternalServerError) GetPayload() string {
	return o.Payload
}

func (o *GetAuthorityNameInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
