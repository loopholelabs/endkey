// Code generated by go-swagger; DO NOT EDIT.

package certificate

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/loopholelabs/endkey/pkg/client/models"
)

// PostCertificateClientReader is a Reader for the PostCertificateClient structure.
type PostCertificateClientReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PostCertificateClientReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPostCertificateClientOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPostCertificateClientBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewPostCertificateClientUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewPostCertificateClientNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 409:
		result := NewPostCertificateClientConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 412:
		result := NewPostCertificateClientPreconditionFailed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewPostCertificateClientInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /certificate/client] PostCertificateClient", response, response.Code())
	}
}

// NewPostCertificateClientOK creates a PostCertificateClientOK with default headers values
func NewPostCertificateClientOK() *PostCertificateClientOK {
	return &PostCertificateClientOK{}
}

/*
PostCertificateClientOK describes a response with status code 200, with default header values.

OK
*/
type PostCertificateClientOK struct {
	Payload *models.ModelsClientCertificateResponse
}

// IsSuccess returns true when this post certificate client o k response has a 2xx status code
func (o *PostCertificateClientOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this post certificate client o k response has a 3xx status code
func (o *PostCertificateClientOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post certificate client o k response has a 4xx status code
func (o *PostCertificateClientOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this post certificate client o k response has a 5xx status code
func (o *PostCertificateClientOK) IsServerError() bool {
	return false
}

// IsCode returns true when this post certificate client o k response a status code equal to that given
func (o *PostCertificateClientOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the post certificate client o k response
func (o *PostCertificateClientOK) Code() int {
	return 200
}

func (o *PostCertificateClientOK) Error() string {
	return fmt.Sprintf("[POST /certificate/client][%d] postCertificateClientOK  %+v", 200, o.Payload)
}

func (o *PostCertificateClientOK) String() string {
	return fmt.Sprintf("[POST /certificate/client][%d] postCertificateClientOK  %+v", 200, o.Payload)
}

func (o *PostCertificateClientOK) GetPayload() *models.ModelsClientCertificateResponse {
	return o.Payload
}

func (o *PostCertificateClientOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ModelsClientCertificateResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostCertificateClientBadRequest creates a PostCertificateClientBadRequest with default headers values
func NewPostCertificateClientBadRequest() *PostCertificateClientBadRequest {
	return &PostCertificateClientBadRequest{}
}

/*
PostCertificateClientBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type PostCertificateClientBadRequest struct {
	Payload string
}

// IsSuccess returns true when this post certificate client bad request response has a 2xx status code
func (o *PostCertificateClientBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post certificate client bad request response has a 3xx status code
func (o *PostCertificateClientBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post certificate client bad request response has a 4xx status code
func (o *PostCertificateClientBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this post certificate client bad request response has a 5xx status code
func (o *PostCertificateClientBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this post certificate client bad request response a status code equal to that given
func (o *PostCertificateClientBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the post certificate client bad request response
func (o *PostCertificateClientBadRequest) Code() int {
	return 400
}

func (o *PostCertificateClientBadRequest) Error() string {
	return fmt.Sprintf("[POST /certificate/client][%d] postCertificateClientBadRequest  %+v", 400, o.Payload)
}

func (o *PostCertificateClientBadRequest) String() string {
	return fmt.Sprintf("[POST /certificate/client][%d] postCertificateClientBadRequest  %+v", 400, o.Payload)
}

func (o *PostCertificateClientBadRequest) GetPayload() string {
	return o.Payload
}

func (o *PostCertificateClientBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostCertificateClientUnauthorized creates a PostCertificateClientUnauthorized with default headers values
func NewPostCertificateClientUnauthorized() *PostCertificateClientUnauthorized {
	return &PostCertificateClientUnauthorized{}
}

/*
PostCertificateClientUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type PostCertificateClientUnauthorized struct {
	Payload string
}

// IsSuccess returns true when this post certificate client unauthorized response has a 2xx status code
func (o *PostCertificateClientUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post certificate client unauthorized response has a 3xx status code
func (o *PostCertificateClientUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post certificate client unauthorized response has a 4xx status code
func (o *PostCertificateClientUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this post certificate client unauthorized response has a 5xx status code
func (o *PostCertificateClientUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this post certificate client unauthorized response a status code equal to that given
func (o *PostCertificateClientUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the post certificate client unauthorized response
func (o *PostCertificateClientUnauthorized) Code() int {
	return 401
}

func (o *PostCertificateClientUnauthorized) Error() string {
	return fmt.Sprintf("[POST /certificate/client][%d] postCertificateClientUnauthorized  %+v", 401, o.Payload)
}

func (o *PostCertificateClientUnauthorized) String() string {
	return fmt.Sprintf("[POST /certificate/client][%d] postCertificateClientUnauthorized  %+v", 401, o.Payload)
}

func (o *PostCertificateClientUnauthorized) GetPayload() string {
	return o.Payload
}

func (o *PostCertificateClientUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostCertificateClientNotFound creates a PostCertificateClientNotFound with default headers values
func NewPostCertificateClientNotFound() *PostCertificateClientNotFound {
	return &PostCertificateClientNotFound{}
}

/*
PostCertificateClientNotFound describes a response with status code 404, with default header values.

Not Found
*/
type PostCertificateClientNotFound struct {
	Payload string
}

// IsSuccess returns true when this post certificate client not found response has a 2xx status code
func (o *PostCertificateClientNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post certificate client not found response has a 3xx status code
func (o *PostCertificateClientNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post certificate client not found response has a 4xx status code
func (o *PostCertificateClientNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this post certificate client not found response has a 5xx status code
func (o *PostCertificateClientNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this post certificate client not found response a status code equal to that given
func (o *PostCertificateClientNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the post certificate client not found response
func (o *PostCertificateClientNotFound) Code() int {
	return 404
}

func (o *PostCertificateClientNotFound) Error() string {
	return fmt.Sprintf("[POST /certificate/client][%d] postCertificateClientNotFound  %+v", 404, o.Payload)
}

func (o *PostCertificateClientNotFound) String() string {
	return fmt.Sprintf("[POST /certificate/client][%d] postCertificateClientNotFound  %+v", 404, o.Payload)
}

func (o *PostCertificateClientNotFound) GetPayload() string {
	return o.Payload
}

func (o *PostCertificateClientNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostCertificateClientConflict creates a PostCertificateClientConflict with default headers values
func NewPostCertificateClientConflict() *PostCertificateClientConflict {
	return &PostCertificateClientConflict{}
}

/*
PostCertificateClientConflict describes a response with status code 409, with default header values.

Conflict
*/
type PostCertificateClientConflict struct {
	Payload string
}

// IsSuccess returns true when this post certificate client conflict response has a 2xx status code
func (o *PostCertificateClientConflict) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post certificate client conflict response has a 3xx status code
func (o *PostCertificateClientConflict) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post certificate client conflict response has a 4xx status code
func (o *PostCertificateClientConflict) IsClientError() bool {
	return true
}

// IsServerError returns true when this post certificate client conflict response has a 5xx status code
func (o *PostCertificateClientConflict) IsServerError() bool {
	return false
}

// IsCode returns true when this post certificate client conflict response a status code equal to that given
func (o *PostCertificateClientConflict) IsCode(code int) bool {
	return code == 409
}

// Code gets the status code for the post certificate client conflict response
func (o *PostCertificateClientConflict) Code() int {
	return 409
}

func (o *PostCertificateClientConflict) Error() string {
	return fmt.Sprintf("[POST /certificate/client][%d] postCertificateClientConflict  %+v", 409, o.Payload)
}

func (o *PostCertificateClientConflict) String() string {
	return fmt.Sprintf("[POST /certificate/client][%d] postCertificateClientConflict  %+v", 409, o.Payload)
}

func (o *PostCertificateClientConflict) GetPayload() string {
	return o.Payload
}

func (o *PostCertificateClientConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostCertificateClientPreconditionFailed creates a PostCertificateClientPreconditionFailed with default headers values
func NewPostCertificateClientPreconditionFailed() *PostCertificateClientPreconditionFailed {
	return &PostCertificateClientPreconditionFailed{}
}

/*
PostCertificateClientPreconditionFailed describes a response with status code 412, with default header values.

Precondition Failed
*/
type PostCertificateClientPreconditionFailed struct {
	Payload string
}

// IsSuccess returns true when this post certificate client precondition failed response has a 2xx status code
func (o *PostCertificateClientPreconditionFailed) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post certificate client precondition failed response has a 3xx status code
func (o *PostCertificateClientPreconditionFailed) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post certificate client precondition failed response has a 4xx status code
func (o *PostCertificateClientPreconditionFailed) IsClientError() bool {
	return true
}

// IsServerError returns true when this post certificate client precondition failed response has a 5xx status code
func (o *PostCertificateClientPreconditionFailed) IsServerError() bool {
	return false
}

// IsCode returns true when this post certificate client precondition failed response a status code equal to that given
func (o *PostCertificateClientPreconditionFailed) IsCode(code int) bool {
	return code == 412
}

// Code gets the status code for the post certificate client precondition failed response
func (o *PostCertificateClientPreconditionFailed) Code() int {
	return 412
}

func (o *PostCertificateClientPreconditionFailed) Error() string {
	return fmt.Sprintf("[POST /certificate/client][%d] postCertificateClientPreconditionFailed  %+v", 412, o.Payload)
}

func (o *PostCertificateClientPreconditionFailed) String() string {
	return fmt.Sprintf("[POST /certificate/client][%d] postCertificateClientPreconditionFailed  %+v", 412, o.Payload)
}

func (o *PostCertificateClientPreconditionFailed) GetPayload() string {
	return o.Payload
}

func (o *PostCertificateClientPreconditionFailed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostCertificateClientInternalServerError creates a PostCertificateClientInternalServerError with default headers values
func NewPostCertificateClientInternalServerError() *PostCertificateClientInternalServerError {
	return &PostCertificateClientInternalServerError{}
}

/*
PostCertificateClientInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type PostCertificateClientInternalServerError struct {
	Payload string
}

// IsSuccess returns true when this post certificate client internal server error response has a 2xx status code
func (o *PostCertificateClientInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post certificate client internal server error response has a 3xx status code
func (o *PostCertificateClientInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post certificate client internal server error response has a 4xx status code
func (o *PostCertificateClientInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this post certificate client internal server error response has a 5xx status code
func (o *PostCertificateClientInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this post certificate client internal server error response a status code equal to that given
func (o *PostCertificateClientInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the post certificate client internal server error response
func (o *PostCertificateClientInternalServerError) Code() int {
	return 500
}

func (o *PostCertificateClientInternalServerError) Error() string {
	return fmt.Sprintf("[POST /certificate/client][%d] postCertificateClientInternalServerError  %+v", 500, o.Payload)
}

func (o *PostCertificateClientInternalServerError) String() string {
	return fmt.Sprintf("[POST /certificate/client][%d] postCertificateClientInternalServerError  %+v", 500, o.Payload)
}

func (o *PostCertificateClientInternalServerError) GetPayload() string {
	return o.Payload
}

func (o *PostCertificateClientInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
