// Code generated by ent, DO NOT EDIT.

package authority

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/loopholelabs/endkey/internal/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Authority {
	return predicate.Authority(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Authority {
	return predicate.Authority(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Authority {
	return predicate.Authority(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Authority {
	return predicate.Authority(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Authority {
	return predicate.Authority(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Authority {
	return predicate.Authority(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Authority {
	return predicate.Authority(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Authority {
	return predicate.Authority(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Authority {
	return predicate.Authority(sql.FieldLTE(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Authority {
	return predicate.Authority(sql.FieldEQ(FieldCreatedAt, v))
}

// Identifier applies equality check predicate on the "identifier" field. It's identical to IdentifierEQ.
func Identifier(v string) predicate.Authority {
	return predicate.Authority(sql.FieldEQ(FieldIdentifier, v))
}

// CaCertificatePem applies equality check predicate on the "ca_certificate_pem" field. It's identical to CaCertificatePemEQ.
func CaCertificatePem(v []byte) predicate.Authority {
	return predicate.Authority(sql.FieldEQ(FieldCaCertificatePem, v))
}

// EncryptedPrivateKey applies equality check predicate on the "encrypted_private_key" field. It's identical to EncryptedPrivateKeyEQ.
func EncryptedPrivateKey(v string) predicate.Authority {
	return predicate.Authority(sql.FieldEQ(FieldEncryptedPrivateKey, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Authority {
	return predicate.Authority(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Authority {
	return predicate.Authority(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Authority {
	return predicate.Authority(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Authority {
	return predicate.Authority(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Authority {
	return predicate.Authority(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Authority {
	return predicate.Authority(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Authority {
	return predicate.Authority(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Authority {
	return predicate.Authority(sql.FieldLTE(FieldCreatedAt, v))
}

// IdentifierEQ applies the EQ predicate on the "identifier" field.
func IdentifierEQ(v string) predicate.Authority {
	return predicate.Authority(sql.FieldEQ(FieldIdentifier, v))
}

// IdentifierNEQ applies the NEQ predicate on the "identifier" field.
func IdentifierNEQ(v string) predicate.Authority {
	return predicate.Authority(sql.FieldNEQ(FieldIdentifier, v))
}

// IdentifierIn applies the In predicate on the "identifier" field.
func IdentifierIn(vs ...string) predicate.Authority {
	return predicate.Authority(sql.FieldIn(FieldIdentifier, vs...))
}

// IdentifierNotIn applies the NotIn predicate on the "identifier" field.
func IdentifierNotIn(vs ...string) predicate.Authority {
	return predicate.Authority(sql.FieldNotIn(FieldIdentifier, vs...))
}

// IdentifierGT applies the GT predicate on the "identifier" field.
func IdentifierGT(v string) predicate.Authority {
	return predicate.Authority(sql.FieldGT(FieldIdentifier, v))
}

// IdentifierGTE applies the GTE predicate on the "identifier" field.
func IdentifierGTE(v string) predicate.Authority {
	return predicate.Authority(sql.FieldGTE(FieldIdentifier, v))
}

// IdentifierLT applies the LT predicate on the "identifier" field.
func IdentifierLT(v string) predicate.Authority {
	return predicate.Authority(sql.FieldLT(FieldIdentifier, v))
}

// IdentifierLTE applies the LTE predicate on the "identifier" field.
func IdentifierLTE(v string) predicate.Authority {
	return predicate.Authority(sql.FieldLTE(FieldIdentifier, v))
}

// IdentifierContains applies the Contains predicate on the "identifier" field.
func IdentifierContains(v string) predicate.Authority {
	return predicate.Authority(sql.FieldContains(FieldIdentifier, v))
}

// IdentifierHasPrefix applies the HasPrefix predicate on the "identifier" field.
func IdentifierHasPrefix(v string) predicate.Authority {
	return predicate.Authority(sql.FieldHasPrefix(FieldIdentifier, v))
}

// IdentifierHasSuffix applies the HasSuffix predicate on the "identifier" field.
func IdentifierHasSuffix(v string) predicate.Authority {
	return predicate.Authority(sql.FieldHasSuffix(FieldIdentifier, v))
}

// IdentifierEqualFold applies the EqualFold predicate on the "identifier" field.
func IdentifierEqualFold(v string) predicate.Authority {
	return predicate.Authority(sql.FieldEqualFold(FieldIdentifier, v))
}

// IdentifierContainsFold applies the ContainsFold predicate on the "identifier" field.
func IdentifierContainsFold(v string) predicate.Authority {
	return predicate.Authority(sql.FieldContainsFold(FieldIdentifier, v))
}

// CaCertificatePemEQ applies the EQ predicate on the "ca_certificate_pem" field.
func CaCertificatePemEQ(v []byte) predicate.Authority {
	return predicate.Authority(sql.FieldEQ(FieldCaCertificatePem, v))
}

// CaCertificatePemNEQ applies the NEQ predicate on the "ca_certificate_pem" field.
func CaCertificatePemNEQ(v []byte) predicate.Authority {
	return predicate.Authority(sql.FieldNEQ(FieldCaCertificatePem, v))
}

// CaCertificatePemIn applies the In predicate on the "ca_certificate_pem" field.
func CaCertificatePemIn(vs ...[]byte) predicate.Authority {
	return predicate.Authority(sql.FieldIn(FieldCaCertificatePem, vs...))
}

// CaCertificatePemNotIn applies the NotIn predicate on the "ca_certificate_pem" field.
func CaCertificatePemNotIn(vs ...[]byte) predicate.Authority {
	return predicate.Authority(sql.FieldNotIn(FieldCaCertificatePem, vs...))
}

// CaCertificatePemGT applies the GT predicate on the "ca_certificate_pem" field.
func CaCertificatePemGT(v []byte) predicate.Authority {
	return predicate.Authority(sql.FieldGT(FieldCaCertificatePem, v))
}

// CaCertificatePemGTE applies the GTE predicate on the "ca_certificate_pem" field.
func CaCertificatePemGTE(v []byte) predicate.Authority {
	return predicate.Authority(sql.FieldGTE(FieldCaCertificatePem, v))
}

// CaCertificatePemLT applies the LT predicate on the "ca_certificate_pem" field.
func CaCertificatePemLT(v []byte) predicate.Authority {
	return predicate.Authority(sql.FieldLT(FieldCaCertificatePem, v))
}

// CaCertificatePemLTE applies the LTE predicate on the "ca_certificate_pem" field.
func CaCertificatePemLTE(v []byte) predicate.Authority {
	return predicate.Authority(sql.FieldLTE(FieldCaCertificatePem, v))
}

// EncryptedPrivateKeyEQ applies the EQ predicate on the "encrypted_private_key" field.
func EncryptedPrivateKeyEQ(v string) predicate.Authority {
	return predicate.Authority(sql.FieldEQ(FieldEncryptedPrivateKey, v))
}

// EncryptedPrivateKeyNEQ applies the NEQ predicate on the "encrypted_private_key" field.
func EncryptedPrivateKeyNEQ(v string) predicate.Authority {
	return predicate.Authority(sql.FieldNEQ(FieldEncryptedPrivateKey, v))
}

// EncryptedPrivateKeyIn applies the In predicate on the "encrypted_private_key" field.
func EncryptedPrivateKeyIn(vs ...string) predicate.Authority {
	return predicate.Authority(sql.FieldIn(FieldEncryptedPrivateKey, vs...))
}

// EncryptedPrivateKeyNotIn applies the NotIn predicate on the "encrypted_private_key" field.
func EncryptedPrivateKeyNotIn(vs ...string) predicate.Authority {
	return predicate.Authority(sql.FieldNotIn(FieldEncryptedPrivateKey, vs...))
}

// EncryptedPrivateKeyGT applies the GT predicate on the "encrypted_private_key" field.
func EncryptedPrivateKeyGT(v string) predicate.Authority {
	return predicate.Authority(sql.FieldGT(FieldEncryptedPrivateKey, v))
}

// EncryptedPrivateKeyGTE applies the GTE predicate on the "encrypted_private_key" field.
func EncryptedPrivateKeyGTE(v string) predicate.Authority {
	return predicate.Authority(sql.FieldGTE(FieldEncryptedPrivateKey, v))
}

// EncryptedPrivateKeyLT applies the LT predicate on the "encrypted_private_key" field.
func EncryptedPrivateKeyLT(v string) predicate.Authority {
	return predicate.Authority(sql.FieldLT(FieldEncryptedPrivateKey, v))
}

// EncryptedPrivateKeyLTE applies the LTE predicate on the "encrypted_private_key" field.
func EncryptedPrivateKeyLTE(v string) predicate.Authority {
	return predicate.Authority(sql.FieldLTE(FieldEncryptedPrivateKey, v))
}

// EncryptedPrivateKeyContains applies the Contains predicate on the "encrypted_private_key" field.
func EncryptedPrivateKeyContains(v string) predicate.Authority {
	return predicate.Authority(sql.FieldContains(FieldEncryptedPrivateKey, v))
}

// EncryptedPrivateKeyHasPrefix applies the HasPrefix predicate on the "encrypted_private_key" field.
func EncryptedPrivateKeyHasPrefix(v string) predicate.Authority {
	return predicate.Authority(sql.FieldHasPrefix(FieldEncryptedPrivateKey, v))
}

// EncryptedPrivateKeyHasSuffix applies the HasSuffix predicate on the "encrypted_private_key" field.
func EncryptedPrivateKeyHasSuffix(v string) predicate.Authority {
	return predicate.Authority(sql.FieldHasSuffix(FieldEncryptedPrivateKey, v))
}

// EncryptedPrivateKeyEqualFold applies the EqualFold predicate on the "encrypted_private_key" field.
func EncryptedPrivateKeyEqualFold(v string) predicate.Authority {
	return predicate.Authority(sql.FieldEqualFold(FieldEncryptedPrivateKey, v))
}

// EncryptedPrivateKeyContainsFold applies the ContainsFold predicate on the "encrypted_private_key" field.
func EncryptedPrivateKeyContainsFold(v string) predicate.Authority {
	return predicate.Authority(sql.FieldContainsFold(FieldEncryptedPrivateKey, v))
}

// HasAPIKeys applies the HasEdge predicate on the "api_keys" edge.
func HasAPIKeys() predicate.Authority {
	return predicate.Authority(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, APIKeysTable, APIKeysColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasAPIKeysWith applies the HasEdge predicate on the "api_keys" edge with a given conditions (other predicates).
func HasAPIKeysWith(preds ...predicate.APIKey) predicate.Authority {
	return predicate.Authority(func(s *sql.Selector) {
		step := newAPIKeysStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasServerTemplates applies the HasEdge predicate on the "server_templates" edge.
func HasServerTemplates() predicate.Authority {
	return predicate.Authority(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ServerTemplatesTable, ServerTemplatesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasServerTemplatesWith applies the HasEdge predicate on the "server_templates" edge with a given conditions (other predicates).
func HasServerTemplatesWith(preds ...predicate.ServerTemplate) predicate.Authority {
	return predicate.Authority(func(s *sql.Selector) {
		step := newServerTemplatesStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasClientTemplates applies the HasEdge predicate on the "client_templates" edge.
func HasClientTemplates() predicate.Authority {
	return predicate.Authority(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ClientTemplatesTable, ClientTemplatesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasClientTemplatesWith applies the HasEdge predicate on the "client_templates" edge with a given conditions (other predicates).
func HasClientTemplatesWith(preds ...predicate.ClientTemplate) predicate.Authority {
	return predicate.Authority(func(s *sql.Selector) {
		step := newClientTemplatesStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Authority) predicate.Authority {
	return predicate.Authority(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Authority) predicate.Authority {
	return predicate.Authority(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Authority) predicate.Authority {
	return predicate.Authority(func(s *sql.Selector) {
		p(s.Not())
	})
}
