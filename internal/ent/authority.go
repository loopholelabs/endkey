// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/loopholelabs/endkey/internal/ent/authority"
)

// Authority is the model entity for the Authority schema.
type Authority struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// Identifier holds the value of the "identifier" field.
	Identifier string `json:"identifier,omitempty"`
	// CaCertificatePem holds the value of the "ca_certificate_pem" field.
	CaCertificatePem []byte `json:"ca_certificate_pem,omitempty"`
	// EncryptedPrivateKey holds the value of the "encrypted_private_key" field.
	EncryptedPrivateKey string `json:"encrypted_private_key,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the AuthorityQuery when eager-loading is set.
	Edges        AuthorityEdges `json:"edges"`
	selectValues sql.SelectValues
}

// AuthorityEdges holds the relations/edges for other nodes in the graph.
type AuthorityEdges struct {
	// APIKeys holds the value of the api_keys edge.
	APIKeys []*APIKey `json:"api_keys,omitempty"`
	// ServerTemplates holds the value of the server_templates edge.
	ServerTemplates []*ServerTemplate `json:"server_templates,omitempty"`
	// ClientTemplates holds the value of the client_templates edge.
	ClientTemplates []*ClientTemplate `json:"client_templates,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
}

// APIKeysOrErr returns the APIKeys value or an error if the edge
// was not loaded in eager-loading.
func (e AuthorityEdges) APIKeysOrErr() ([]*APIKey, error) {
	if e.loadedTypes[0] {
		return e.APIKeys, nil
	}
	return nil, &NotLoadedError{edge: "api_keys"}
}

// ServerTemplatesOrErr returns the ServerTemplates value or an error if the edge
// was not loaded in eager-loading.
func (e AuthorityEdges) ServerTemplatesOrErr() ([]*ServerTemplate, error) {
	if e.loadedTypes[1] {
		return e.ServerTemplates, nil
	}
	return nil, &NotLoadedError{edge: "server_templates"}
}

// ClientTemplatesOrErr returns the ClientTemplates value or an error if the edge
// was not loaded in eager-loading.
func (e AuthorityEdges) ClientTemplatesOrErr() ([]*ClientTemplate, error) {
	if e.loadedTypes[2] {
		return e.ClientTemplates, nil
	}
	return nil, &NotLoadedError{edge: "client_templates"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Authority) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case authority.FieldCaCertificatePem:
			values[i] = new([]byte)
		case authority.FieldID:
			values[i] = new(sql.NullInt64)
		case authority.FieldIdentifier, authority.FieldEncryptedPrivateKey:
			values[i] = new(sql.NullString)
		case authority.FieldCreatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Authority fields.
func (a *Authority) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case authority.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			a.ID = int(value.Int64)
		case authority.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				a.CreatedAt = value.Time
			}
		case authority.FieldIdentifier:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field identifier", values[i])
			} else if value.Valid {
				a.Identifier = value.String
			}
		case authority.FieldCaCertificatePem:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field ca_certificate_pem", values[i])
			} else if value != nil {
				a.CaCertificatePem = *value
			}
		case authority.FieldEncryptedPrivateKey:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field encrypted_private_key", values[i])
			} else if value.Valid {
				a.EncryptedPrivateKey = value.String
			}
		default:
			a.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Authority.
// This includes values selected through modifiers, order, etc.
func (a *Authority) Value(name string) (ent.Value, error) {
	return a.selectValues.Get(name)
}

// QueryAPIKeys queries the "api_keys" edge of the Authority entity.
func (a *Authority) QueryAPIKeys() *APIKeyQuery {
	return NewAuthorityClient(a.config).QueryAPIKeys(a)
}

// QueryServerTemplates queries the "server_templates" edge of the Authority entity.
func (a *Authority) QueryServerTemplates() *ServerTemplateQuery {
	return NewAuthorityClient(a.config).QueryServerTemplates(a)
}

// QueryClientTemplates queries the "client_templates" edge of the Authority entity.
func (a *Authority) QueryClientTemplates() *ClientTemplateQuery {
	return NewAuthorityClient(a.config).QueryClientTemplates(a)
}

// Update returns a builder for updating this Authority.
// Note that you need to call Authority.Unwrap() before calling this method if this Authority
// was returned from a transaction, and the transaction was committed or rolled back.
func (a *Authority) Update() *AuthorityUpdateOne {
	return NewAuthorityClient(a.config).UpdateOne(a)
}

// Unwrap unwraps the Authority entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (a *Authority) Unwrap() *Authority {
	_tx, ok := a.config.driver.(*txDriver)
	if !ok {
		panic("ent: Authority is not a transactional entity")
	}
	a.config.driver = _tx.drv
	return a
}

// String implements the fmt.Stringer.
func (a *Authority) String() string {
	var builder strings.Builder
	builder.WriteString("Authority(")
	builder.WriteString(fmt.Sprintf("id=%v, ", a.ID))
	builder.WriteString("created_at=")
	builder.WriteString(a.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("identifier=")
	builder.WriteString(a.Identifier)
	builder.WriteString(", ")
	builder.WriteString("ca_certificate_pem=")
	builder.WriteString(fmt.Sprintf("%v", a.CaCertificatePem))
	builder.WriteString(", ")
	builder.WriteString("encrypted_private_key=")
	builder.WriteString(a.EncryptedPrivateKey)
	builder.WriteByte(')')
	return builder.String()
}

// Authorities is a parsable slice of Authority.
type Authorities []*Authority
