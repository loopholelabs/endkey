// Code generated by go-swagger; DO NOT EDIT.

package apikey

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/loopholelabs/endkey/pkg/client/models"
)

// GetApikeyAuthorityNameReader is a Reader for the GetApikeyAuthorityName structure.
type GetApikeyAuthorityNameReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetApikeyAuthorityNameReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetApikeyAuthorityNameOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetApikeyAuthorityNameBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewGetApikeyAuthorityNameUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetApikeyAuthorityNameNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 409:
		result := NewGetApikeyAuthorityNameConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 412:
		result := NewGetApikeyAuthorityNamePreconditionFailed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetApikeyAuthorityNameInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /apikey/{authority_name}] GetApikeyAuthorityName", response, response.Code())
	}
}

// NewGetApikeyAuthorityNameOK creates a GetApikeyAuthorityNameOK with default headers values
func NewGetApikeyAuthorityNameOK() *GetApikeyAuthorityNameOK {
	return &GetApikeyAuthorityNameOK{}
}

/*
GetApikeyAuthorityNameOK describes a response with status code 200, with default header values.

OK
*/
type GetApikeyAuthorityNameOK struct {
	Payload []*models.ModelsAPIKeyResponse
}

// IsSuccess returns true when this get apikey authority name o k response has a 2xx status code
func (o *GetApikeyAuthorityNameOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get apikey authority name o k response has a 3xx status code
func (o *GetApikeyAuthorityNameOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get apikey authority name o k response has a 4xx status code
func (o *GetApikeyAuthorityNameOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get apikey authority name o k response has a 5xx status code
func (o *GetApikeyAuthorityNameOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get apikey authority name o k response a status code equal to that given
func (o *GetApikeyAuthorityNameOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get apikey authority name o k response
func (o *GetApikeyAuthorityNameOK) Code() int {
	return 200
}

func (o *GetApikeyAuthorityNameOK) Error() string {
	return fmt.Sprintf("[GET /apikey/{authority_name}][%d] getApikeyAuthorityNameOK  %+v", 200, o.Payload)
}

func (o *GetApikeyAuthorityNameOK) String() string {
	return fmt.Sprintf("[GET /apikey/{authority_name}][%d] getApikeyAuthorityNameOK  %+v", 200, o.Payload)
}

func (o *GetApikeyAuthorityNameOK) GetPayload() []*models.ModelsAPIKeyResponse {
	return o.Payload
}

func (o *GetApikeyAuthorityNameOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetApikeyAuthorityNameBadRequest creates a GetApikeyAuthorityNameBadRequest with default headers values
func NewGetApikeyAuthorityNameBadRequest() *GetApikeyAuthorityNameBadRequest {
	return &GetApikeyAuthorityNameBadRequest{}
}

/*
GetApikeyAuthorityNameBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type GetApikeyAuthorityNameBadRequest struct {
	Payload string
}

// IsSuccess returns true when this get apikey authority name bad request response has a 2xx status code
func (o *GetApikeyAuthorityNameBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get apikey authority name bad request response has a 3xx status code
func (o *GetApikeyAuthorityNameBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get apikey authority name bad request response has a 4xx status code
func (o *GetApikeyAuthorityNameBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this get apikey authority name bad request response has a 5xx status code
func (o *GetApikeyAuthorityNameBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this get apikey authority name bad request response a status code equal to that given
func (o *GetApikeyAuthorityNameBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the get apikey authority name bad request response
func (o *GetApikeyAuthorityNameBadRequest) Code() int {
	return 400
}

func (o *GetApikeyAuthorityNameBadRequest) Error() string {
	return fmt.Sprintf("[GET /apikey/{authority_name}][%d] getApikeyAuthorityNameBadRequest  %+v", 400, o.Payload)
}

func (o *GetApikeyAuthorityNameBadRequest) String() string {
	return fmt.Sprintf("[GET /apikey/{authority_name}][%d] getApikeyAuthorityNameBadRequest  %+v", 400, o.Payload)
}

func (o *GetApikeyAuthorityNameBadRequest) GetPayload() string {
	return o.Payload
}

func (o *GetApikeyAuthorityNameBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetApikeyAuthorityNameUnauthorized creates a GetApikeyAuthorityNameUnauthorized with default headers values
func NewGetApikeyAuthorityNameUnauthorized() *GetApikeyAuthorityNameUnauthorized {
	return &GetApikeyAuthorityNameUnauthorized{}
}

/*
GetApikeyAuthorityNameUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type GetApikeyAuthorityNameUnauthorized struct {
	Payload string
}

// IsSuccess returns true when this get apikey authority name unauthorized response has a 2xx status code
func (o *GetApikeyAuthorityNameUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get apikey authority name unauthorized response has a 3xx status code
func (o *GetApikeyAuthorityNameUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get apikey authority name unauthorized response has a 4xx status code
func (o *GetApikeyAuthorityNameUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this get apikey authority name unauthorized response has a 5xx status code
func (o *GetApikeyAuthorityNameUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this get apikey authority name unauthorized response a status code equal to that given
func (o *GetApikeyAuthorityNameUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the get apikey authority name unauthorized response
func (o *GetApikeyAuthorityNameUnauthorized) Code() int {
	return 401
}

func (o *GetApikeyAuthorityNameUnauthorized) Error() string {
	return fmt.Sprintf("[GET /apikey/{authority_name}][%d] getApikeyAuthorityNameUnauthorized  %+v", 401, o.Payload)
}

func (o *GetApikeyAuthorityNameUnauthorized) String() string {
	return fmt.Sprintf("[GET /apikey/{authority_name}][%d] getApikeyAuthorityNameUnauthorized  %+v", 401, o.Payload)
}

func (o *GetApikeyAuthorityNameUnauthorized) GetPayload() string {
	return o.Payload
}

func (o *GetApikeyAuthorityNameUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetApikeyAuthorityNameNotFound creates a GetApikeyAuthorityNameNotFound with default headers values
func NewGetApikeyAuthorityNameNotFound() *GetApikeyAuthorityNameNotFound {
	return &GetApikeyAuthorityNameNotFound{}
}

/*
GetApikeyAuthorityNameNotFound describes a response with status code 404, with default header values.

Not Found
*/
type GetApikeyAuthorityNameNotFound struct {
	Payload string
}

// IsSuccess returns true when this get apikey authority name not found response has a 2xx status code
func (o *GetApikeyAuthorityNameNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get apikey authority name not found response has a 3xx status code
func (o *GetApikeyAuthorityNameNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get apikey authority name not found response has a 4xx status code
func (o *GetApikeyAuthorityNameNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get apikey authority name not found response has a 5xx status code
func (o *GetApikeyAuthorityNameNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get apikey authority name not found response a status code equal to that given
func (o *GetApikeyAuthorityNameNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the get apikey authority name not found response
func (o *GetApikeyAuthorityNameNotFound) Code() int {
	return 404
}

func (o *GetApikeyAuthorityNameNotFound) Error() string {
	return fmt.Sprintf("[GET /apikey/{authority_name}][%d] getApikeyAuthorityNameNotFound  %+v", 404, o.Payload)
}

func (o *GetApikeyAuthorityNameNotFound) String() string {
	return fmt.Sprintf("[GET /apikey/{authority_name}][%d] getApikeyAuthorityNameNotFound  %+v", 404, o.Payload)
}

func (o *GetApikeyAuthorityNameNotFound) GetPayload() string {
	return o.Payload
}

func (o *GetApikeyAuthorityNameNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetApikeyAuthorityNameConflict creates a GetApikeyAuthorityNameConflict with default headers values
func NewGetApikeyAuthorityNameConflict() *GetApikeyAuthorityNameConflict {
	return &GetApikeyAuthorityNameConflict{}
}

/*
GetApikeyAuthorityNameConflict describes a response with status code 409, with default header values.

Conflict
*/
type GetApikeyAuthorityNameConflict struct {
	Payload string
}

// IsSuccess returns true when this get apikey authority name conflict response has a 2xx status code
func (o *GetApikeyAuthorityNameConflict) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get apikey authority name conflict response has a 3xx status code
func (o *GetApikeyAuthorityNameConflict) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get apikey authority name conflict response has a 4xx status code
func (o *GetApikeyAuthorityNameConflict) IsClientError() bool {
	return true
}

// IsServerError returns true when this get apikey authority name conflict response has a 5xx status code
func (o *GetApikeyAuthorityNameConflict) IsServerError() bool {
	return false
}

// IsCode returns true when this get apikey authority name conflict response a status code equal to that given
func (o *GetApikeyAuthorityNameConflict) IsCode(code int) bool {
	return code == 409
}

// Code gets the status code for the get apikey authority name conflict response
func (o *GetApikeyAuthorityNameConflict) Code() int {
	return 409
}

func (o *GetApikeyAuthorityNameConflict) Error() string {
	return fmt.Sprintf("[GET /apikey/{authority_name}][%d] getApikeyAuthorityNameConflict  %+v", 409, o.Payload)
}

func (o *GetApikeyAuthorityNameConflict) String() string {
	return fmt.Sprintf("[GET /apikey/{authority_name}][%d] getApikeyAuthorityNameConflict  %+v", 409, o.Payload)
}

func (o *GetApikeyAuthorityNameConflict) GetPayload() string {
	return o.Payload
}

func (o *GetApikeyAuthorityNameConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetApikeyAuthorityNamePreconditionFailed creates a GetApikeyAuthorityNamePreconditionFailed with default headers values
func NewGetApikeyAuthorityNamePreconditionFailed() *GetApikeyAuthorityNamePreconditionFailed {
	return &GetApikeyAuthorityNamePreconditionFailed{}
}

/*
GetApikeyAuthorityNamePreconditionFailed describes a response with status code 412, with default header values.

Precondition Failed
*/
type GetApikeyAuthorityNamePreconditionFailed struct {
	Payload string
}

// IsSuccess returns true when this get apikey authority name precondition failed response has a 2xx status code
func (o *GetApikeyAuthorityNamePreconditionFailed) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get apikey authority name precondition failed response has a 3xx status code
func (o *GetApikeyAuthorityNamePreconditionFailed) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get apikey authority name precondition failed response has a 4xx status code
func (o *GetApikeyAuthorityNamePreconditionFailed) IsClientError() bool {
	return true
}

// IsServerError returns true when this get apikey authority name precondition failed response has a 5xx status code
func (o *GetApikeyAuthorityNamePreconditionFailed) IsServerError() bool {
	return false
}

// IsCode returns true when this get apikey authority name precondition failed response a status code equal to that given
func (o *GetApikeyAuthorityNamePreconditionFailed) IsCode(code int) bool {
	return code == 412
}

// Code gets the status code for the get apikey authority name precondition failed response
func (o *GetApikeyAuthorityNamePreconditionFailed) Code() int {
	return 412
}

func (o *GetApikeyAuthorityNamePreconditionFailed) Error() string {
	return fmt.Sprintf("[GET /apikey/{authority_name}][%d] getApikeyAuthorityNamePreconditionFailed  %+v", 412, o.Payload)
}

func (o *GetApikeyAuthorityNamePreconditionFailed) String() string {
	return fmt.Sprintf("[GET /apikey/{authority_name}][%d] getApikeyAuthorityNamePreconditionFailed  %+v", 412, o.Payload)
}

func (o *GetApikeyAuthorityNamePreconditionFailed) GetPayload() string {
	return o.Payload
}

func (o *GetApikeyAuthorityNamePreconditionFailed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetApikeyAuthorityNameInternalServerError creates a GetApikeyAuthorityNameInternalServerError with default headers values
func NewGetApikeyAuthorityNameInternalServerError() *GetApikeyAuthorityNameInternalServerError {
	return &GetApikeyAuthorityNameInternalServerError{}
}

/*
GetApikeyAuthorityNameInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type GetApikeyAuthorityNameInternalServerError struct {
	Payload string
}

// IsSuccess returns true when this get apikey authority name internal server error response has a 2xx status code
func (o *GetApikeyAuthorityNameInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get apikey authority name internal server error response has a 3xx status code
func (o *GetApikeyAuthorityNameInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get apikey authority name internal server error response has a 4xx status code
func (o *GetApikeyAuthorityNameInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this get apikey authority name internal server error response has a 5xx status code
func (o *GetApikeyAuthorityNameInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this get apikey authority name internal server error response a status code equal to that given
func (o *GetApikeyAuthorityNameInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the get apikey authority name internal server error response
func (o *GetApikeyAuthorityNameInternalServerError) Code() int {
	return 500
}

func (o *GetApikeyAuthorityNameInternalServerError) Error() string {
	return fmt.Sprintf("[GET /apikey/{authority_name}][%d] getApikeyAuthorityNameInternalServerError  %+v", 500, o.Payload)
}

func (o *GetApikeyAuthorityNameInternalServerError) String() string {
	return fmt.Sprintf("[GET /apikey/{authority_name}][%d] getApikeyAuthorityNameInternalServerError  %+v", 500, o.Payload)
}

func (o *GetApikeyAuthorityNameInternalServerError) GetPayload() string {
	return o.Payload
}

func (o *GetApikeyAuthorityNameInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
