// Code generated by ent, DO NOT EDIT.

package authority

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the authority type in the database.
	Label = "authority"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldIdentifier holds the string denoting the identifier field in the database.
	FieldIdentifier = "identifier"
	// FieldCaCertificatePem holds the string denoting the ca_certificate_pem field in the database.
	FieldCaCertificatePem = "ca_certificate_pem"
	// FieldEncryptedPrivateKey holds the string denoting the encrypted_private_key field in the database.
	FieldEncryptedPrivateKey = "encrypted_private_key"
	// EdgeAPIKeys holds the string denoting the api_keys edge name in mutations.
	EdgeAPIKeys = "api_keys"
	// EdgeServerTemplates holds the string denoting the server_templates edge name in mutations.
	EdgeServerTemplates = "server_templates"
	// EdgeClientTemplates holds the string denoting the client_templates edge name in mutations.
	EdgeClientTemplates = "client_templates"
	// Table holds the table name of the authority in the database.
	Table = "authorities"
	// APIKeysTable is the table that holds the api_keys relation/edge.
	APIKeysTable = "api_keys"
	// APIKeysInverseTable is the table name for the APIKey entity.
	// It exists in this package in order to avoid circular dependency with the "apikey" package.
	APIKeysInverseTable = "api_keys"
	// APIKeysColumn is the table column denoting the api_keys relation/edge.
	APIKeysColumn = "authority_api_keys"
	// ServerTemplatesTable is the table that holds the server_templates relation/edge.
	ServerTemplatesTable = "server_templates"
	// ServerTemplatesInverseTable is the table name for the ServerTemplate entity.
	// It exists in this package in order to avoid circular dependency with the "servertemplate" package.
	ServerTemplatesInverseTable = "server_templates"
	// ServerTemplatesColumn is the table column denoting the server_templates relation/edge.
	ServerTemplatesColumn = "authority_server_templates"
	// ClientTemplatesTable is the table that holds the client_templates relation/edge.
	ClientTemplatesTable = "client_templates"
	// ClientTemplatesInverseTable is the table name for the ClientTemplate entity.
	// It exists in this package in order to avoid circular dependency with the "clienttemplate" package.
	ClientTemplatesInverseTable = "client_templates"
	// ClientTemplatesColumn is the table column denoting the client_templates relation/edge.
	ClientTemplatesColumn = "authority_client_templates"
)

// Columns holds all SQL columns for authority fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldIdentifier,
	FieldCaCertificatePem,
	FieldEncryptedPrivateKey,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// IdentifierValidator is a validator for the "identifier" field. It is called by the builders before save.
	IdentifierValidator func(string) error
	// CaCertificatePemValidator is a validator for the "ca_certificate_pem" field. It is called by the builders before save.
	CaCertificatePemValidator func([]byte) error
	// EncryptedPrivateKeyValidator is a validator for the "encrypted_private_key" field. It is called by the builders before save.
	EncryptedPrivateKeyValidator func(string) error
)

// OrderOption defines the ordering options for the Authority queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByIdentifier orders the results by the identifier field.
func ByIdentifier(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIdentifier, opts...).ToFunc()
}

// ByEncryptedPrivateKey orders the results by the encrypted_private_key field.
func ByEncryptedPrivateKey(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEncryptedPrivateKey, opts...).ToFunc()
}

// ByAPIKeysCount orders the results by api_keys count.
func ByAPIKeysCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newAPIKeysStep(), opts...)
	}
}

// ByAPIKeys orders the results by api_keys terms.
func ByAPIKeys(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newAPIKeysStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByServerTemplatesCount orders the results by server_templates count.
func ByServerTemplatesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newServerTemplatesStep(), opts...)
	}
}

// ByServerTemplates orders the results by server_templates terms.
func ByServerTemplates(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newServerTemplatesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByClientTemplatesCount orders the results by client_templates count.
func ByClientTemplatesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newClientTemplatesStep(), opts...)
	}
}

// ByClientTemplates orders the results by client_templates terms.
func ByClientTemplates(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newClientTemplatesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newAPIKeysStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(APIKeysInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, APIKeysTable, APIKeysColumn),
	)
}
func newServerTemplatesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ServerTemplatesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, ServerTemplatesTable, ServerTemplatesColumn),
	)
}
func newClientTemplatesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ClientTemplatesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, ClientTemplatesTable, ClientTemplatesColumn),
	)
}
