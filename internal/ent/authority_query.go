// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/loopholelabs/endkey/internal/ent/apikey"
	"github.com/loopholelabs/endkey/internal/ent/authority"
	"github.com/loopholelabs/endkey/internal/ent/clienttemplate"
	"github.com/loopholelabs/endkey/internal/ent/predicate"
	"github.com/loopholelabs/endkey/internal/ent/servertemplate"
)

// AuthorityQuery is the builder for querying Authority entities.
type AuthorityQuery struct {
	config
	ctx                 *QueryContext
	order               []authority.OrderOption
	inters              []Interceptor
	predicates          []predicate.Authority
	withAPIKeys         *APIKeyQuery
	withServerTemplates *ServerTemplateQuery
	withClientTemplates *ClientTemplateQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the AuthorityQuery builder.
func (aq *AuthorityQuery) Where(ps ...predicate.Authority) *AuthorityQuery {
	aq.predicates = append(aq.predicates, ps...)
	return aq
}

// Limit the number of records to be returned by this query.
func (aq *AuthorityQuery) Limit(limit int) *AuthorityQuery {
	aq.ctx.Limit = &limit
	return aq
}

// Offset to start from.
func (aq *AuthorityQuery) Offset(offset int) *AuthorityQuery {
	aq.ctx.Offset = &offset
	return aq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (aq *AuthorityQuery) Unique(unique bool) *AuthorityQuery {
	aq.ctx.Unique = &unique
	return aq
}

// Order specifies how the records should be ordered.
func (aq *AuthorityQuery) Order(o ...authority.OrderOption) *AuthorityQuery {
	aq.order = append(aq.order, o...)
	return aq
}

// QueryAPIKeys chains the current query on the "api_keys" edge.
func (aq *AuthorityQuery) QueryAPIKeys() *APIKeyQuery {
	query := (&APIKeyClient{config: aq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := aq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := aq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(authority.Table, authority.FieldID, selector),
			sqlgraph.To(apikey.Table, apikey.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, authority.APIKeysTable, authority.APIKeysColumn),
		)
		fromU = sqlgraph.SetNeighbors(aq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryServerTemplates chains the current query on the "server_templates" edge.
func (aq *AuthorityQuery) QueryServerTemplates() *ServerTemplateQuery {
	query := (&ServerTemplateClient{config: aq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := aq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := aq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(authority.Table, authority.FieldID, selector),
			sqlgraph.To(servertemplate.Table, servertemplate.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, authority.ServerTemplatesTable, authority.ServerTemplatesColumn),
		)
		fromU = sqlgraph.SetNeighbors(aq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryClientTemplates chains the current query on the "client_templates" edge.
func (aq *AuthorityQuery) QueryClientTemplates() *ClientTemplateQuery {
	query := (&ClientTemplateClient{config: aq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := aq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := aq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(authority.Table, authority.FieldID, selector),
			sqlgraph.To(clienttemplate.Table, clienttemplate.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, authority.ClientTemplatesTable, authority.ClientTemplatesColumn),
		)
		fromU = sqlgraph.SetNeighbors(aq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first Authority entity from the query.
// Returns a *NotFoundError when no Authority was found.
func (aq *AuthorityQuery) First(ctx context.Context) (*Authority, error) {
	nodes, err := aq.Limit(1).All(setContextOp(ctx, aq.ctx, "First"))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{authority.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (aq *AuthorityQuery) FirstX(ctx context.Context) *Authority {
	node, err := aq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first Authority ID from the query.
// Returns a *NotFoundError when no Authority ID was found.
func (aq *AuthorityQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = aq.Limit(1).IDs(setContextOp(ctx, aq.ctx, "FirstID")); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{authority.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (aq *AuthorityQuery) FirstIDX(ctx context.Context) int {
	id, err := aq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single Authority entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one Authority entity is found.
// Returns a *NotFoundError when no Authority entities are found.
func (aq *AuthorityQuery) Only(ctx context.Context) (*Authority, error) {
	nodes, err := aq.Limit(2).All(setContextOp(ctx, aq.ctx, "Only"))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{authority.Label}
	default:
		return nil, &NotSingularError{authority.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (aq *AuthorityQuery) OnlyX(ctx context.Context) *Authority {
	node, err := aq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only Authority ID in the query.
// Returns a *NotSingularError when more than one Authority ID is found.
// Returns a *NotFoundError when no entities are found.
func (aq *AuthorityQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = aq.Limit(2).IDs(setContextOp(ctx, aq.ctx, "OnlyID")); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{authority.Label}
	default:
		err = &NotSingularError{authority.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (aq *AuthorityQuery) OnlyIDX(ctx context.Context) int {
	id, err := aq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of Authorities.
func (aq *AuthorityQuery) All(ctx context.Context) ([]*Authority, error) {
	ctx = setContextOp(ctx, aq.ctx, "All")
	if err := aq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*Authority, *AuthorityQuery]()
	return withInterceptors[[]*Authority](ctx, aq, qr, aq.inters)
}

// AllX is like All, but panics if an error occurs.
func (aq *AuthorityQuery) AllX(ctx context.Context) []*Authority {
	nodes, err := aq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of Authority IDs.
func (aq *AuthorityQuery) IDs(ctx context.Context) (ids []int, err error) {
	if aq.ctx.Unique == nil && aq.path != nil {
		aq.Unique(true)
	}
	ctx = setContextOp(ctx, aq.ctx, "IDs")
	if err = aq.Select(authority.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (aq *AuthorityQuery) IDsX(ctx context.Context) []int {
	ids, err := aq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (aq *AuthorityQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, aq.ctx, "Count")
	if err := aq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, aq, querierCount[*AuthorityQuery](), aq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (aq *AuthorityQuery) CountX(ctx context.Context) int {
	count, err := aq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (aq *AuthorityQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, aq.ctx, "Exist")
	switch _, err := aq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (aq *AuthorityQuery) ExistX(ctx context.Context) bool {
	exist, err := aq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the AuthorityQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (aq *AuthorityQuery) Clone() *AuthorityQuery {
	if aq == nil {
		return nil
	}
	return &AuthorityQuery{
		config:              aq.config,
		ctx:                 aq.ctx.Clone(),
		order:               append([]authority.OrderOption{}, aq.order...),
		inters:              append([]Interceptor{}, aq.inters...),
		predicates:          append([]predicate.Authority{}, aq.predicates...),
		withAPIKeys:         aq.withAPIKeys.Clone(),
		withServerTemplates: aq.withServerTemplates.Clone(),
		withClientTemplates: aq.withClientTemplates.Clone(),
		// clone intermediate query.
		sql:  aq.sql.Clone(),
		path: aq.path,
	}
}

// WithAPIKeys tells the query-builder to eager-load the nodes that are connected to
// the "api_keys" edge. The optional arguments are used to configure the query builder of the edge.
func (aq *AuthorityQuery) WithAPIKeys(opts ...func(*APIKeyQuery)) *AuthorityQuery {
	query := (&APIKeyClient{config: aq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	aq.withAPIKeys = query
	return aq
}

// WithServerTemplates tells the query-builder to eager-load the nodes that are connected to
// the "server_templates" edge. The optional arguments are used to configure the query builder of the edge.
func (aq *AuthorityQuery) WithServerTemplates(opts ...func(*ServerTemplateQuery)) *AuthorityQuery {
	query := (&ServerTemplateClient{config: aq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	aq.withServerTemplates = query
	return aq
}

// WithClientTemplates tells the query-builder to eager-load the nodes that are connected to
// the "client_templates" edge. The optional arguments are used to configure the query builder of the edge.
func (aq *AuthorityQuery) WithClientTemplates(opts ...func(*ClientTemplateQuery)) *AuthorityQuery {
	query := (&ClientTemplateClient{config: aq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	aq.withClientTemplates = query
	return aq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.Authority.Query().
//		GroupBy(authority.FieldCreatedAt).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (aq *AuthorityQuery) GroupBy(field string, fields ...string) *AuthorityGroupBy {
	aq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &AuthorityGroupBy{build: aq}
	grbuild.flds = &aq.ctx.Fields
	grbuild.label = authority.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//	}
//
//	client.Authority.Query().
//		Select(authority.FieldCreatedAt).
//		Scan(ctx, &v)
func (aq *AuthorityQuery) Select(fields ...string) *AuthoritySelect {
	aq.ctx.Fields = append(aq.ctx.Fields, fields...)
	sbuild := &AuthoritySelect{AuthorityQuery: aq}
	sbuild.label = authority.Label
	sbuild.flds, sbuild.scan = &aq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a AuthoritySelect configured with the given aggregations.
func (aq *AuthorityQuery) Aggregate(fns ...AggregateFunc) *AuthoritySelect {
	return aq.Select().Aggregate(fns...)
}

func (aq *AuthorityQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range aq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, aq); err != nil {
				return err
			}
		}
	}
	for _, f := range aq.ctx.Fields {
		if !authority.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if aq.path != nil {
		prev, err := aq.path(ctx)
		if err != nil {
			return err
		}
		aq.sql = prev
	}
	return nil
}

func (aq *AuthorityQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*Authority, error) {
	var (
		nodes       = []*Authority{}
		_spec       = aq.querySpec()
		loadedTypes = [3]bool{
			aq.withAPIKeys != nil,
			aq.withServerTemplates != nil,
			aq.withClientTemplates != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*Authority).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &Authority{config: aq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, aq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := aq.withAPIKeys; query != nil {
		if err := aq.loadAPIKeys(ctx, query, nodes,
			func(n *Authority) { n.Edges.APIKeys = []*APIKey{} },
			func(n *Authority, e *APIKey) { n.Edges.APIKeys = append(n.Edges.APIKeys, e) }); err != nil {
			return nil, err
		}
	}
	if query := aq.withServerTemplates; query != nil {
		if err := aq.loadServerTemplates(ctx, query, nodes,
			func(n *Authority) { n.Edges.ServerTemplates = []*ServerTemplate{} },
			func(n *Authority, e *ServerTemplate) { n.Edges.ServerTemplates = append(n.Edges.ServerTemplates, e) }); err != nil {
			return nil, err
		}
	}
	if query := aq.withClientTemplates; query != nil {
		if err := aq.loadClientTemplates(ctx, query, nodes,
			func(n *Authority) { n.Edges.ClientTemplates = []*ClientTemplate{} },
			func(n *Authority, e *ClientTemplate) { n.Edges.ClientTemplates = append(n.Edges.ClientTemplates, e) }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (aq *AuthorityQuery) loadAPIKeys(ctx context.Context, query *APIKeyQuery, nodes []*Authority, init func(*Authority), assign func(*Authority, *APIKey)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int]*Authority)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.APIKey(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(authority.APIKeysColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.authority_api_keys
		if fk == nil {
			return fmt.Errorf(`foreign-key "authority_api_keys" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "authority_api_keys" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (aq *AuthorityQuery) loadServerTemplates(ctx context.Context, query *ServerTemplateQuery, nodes []*Authority, init func(*Authority), assign func(*Authority, *ServerTemplate)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int]*Authority)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.ServerTemplate(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(authority.ServerTemplatesColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.authority_server_templates
		if fk == nil {
			return fmt.Errorf(`foreign-key "authority_server_templates" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "authority_server_templates" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (aq *AuthorityQuery) loadClientTemplates(ctx context.Context, query *ClientTemplateQuery, nodes []*Authority, init func(*Authority), assign func(*Authority, *ClientTemplate)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int]*Authority)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.ClientTemplate(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(authority.ClientTemplatesColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.authority_client_templates
		if fk == nil {
			return fmt.Errorf(`foreign-key "authority_client_templates" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "authority_client_templates" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}

func (aq *AuthorityQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := aq.querySpec()
	_spec.Node.Columns = aq.ctx.Fields
	if len(aq.ctx.Fields) > 0 {
		_spec.Unique = aq.ctx.Unique != nil && *aq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, aq.driver, _spec)
}

func (aq *AuthorityQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(authority.Table, authority.Columns, sqlgraph.NewFieldSpec(authority.FieldID, field.TypeInt))
	_spec.From = aq.sql
	if unique := aq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if aq.path != nil {
		_spec.Unique = true
	}
	if fields := aq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, authority.FieldID)
		for i := range fields {
			if fields[i] != authority.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := aq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := aq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := aq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := aq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (aq *AuthorityQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(aq.driver.Dialect())
	t1 := builder.Table(authority.Table)
	columns := aq.ctx.Fields
	if len(columns) == 0 {
		columns = authority.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if aq.sql != nil {
		selector = aq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if aq.ctx.Unique != nil && *aq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range aq.predicates {
		p(selector)
	}
	for _, p := range aq.order {
		p(selector)
	}
	if offset := aq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := aq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// AuthorityGroupBy is the group-by builder for Authority entities.
type AuthorityGroupBy struct {
	selector
	build *AuthorityQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (agb *AuthorityGroupBy) Aggregate(fns ...AggregateFunc) *AuthorityGroupBy {
	agb.fns = append(agb.fns, fns...)
	return agb
}

// Scan applies the selector query and scans the result into the given value.
func (agb *AuthorityGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, agb.build.ctx, "GroupBy")
	if err := agb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*AuthorityQuery, *AuthorityGroupBy](ctx, agb.build, agb, agb.build.inters, v)
}

func (agb *AuthorityGroupBy) sqlScan(ctx context.Context, root *AuthorityQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(agb.fns))
	for _, fn := range agb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*agb.flds)+len(agb.fns))
		for _, f := range *agb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*agb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := agb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// AuthoritySelect is the builder for selecting fields of Authority entities.
type AuthoritySelect struct {
	*AuthorityQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (as *AuthoritySelect) Aggregate(fns ...AggregateFunc) *AuthoritySelect {
	as.fns = append(as.fns, fns...)
	return as
}

// Scan applies the selector query and scans the result into the given value.
func (as *AuthoritySelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, as.ctx, "Select")
	if err := as.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*AuthorityQuery, *AuthoritySelect](ctx, as.AuthorityQuery, as, as.inters, v)
}

func (as *AuthoritySelect) sqlScan(ctx context.Context, root *AuthorityQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(as.fns))
	for _, fn := range as.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*as.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := as.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
