// Code generated by go-swagger; DO NOT EDIT.

package rootkey

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/loopholelabs/endkey/pkg/client/models"
)

// PostRootkeyRotateNameReader is a Reader for the PostRootkeyRotateName structure.
type PostRootkeyRotateNameReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PostRootkeyRotateNameReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPostRootkeyRotateNameOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPostRootkeyRotateNameBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewPostRootkeyRotateNameUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewPostRootkeyRotateNameNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 409:
		result := NewPostRootkeyRotateNameConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 412:
		result := NewPostRootkeyRotateNamePreconditionFailed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewPostRootkeyRotateNameInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /rootkey/rotate/{name}] PostRootkeyRotateName", response, response.Code())
	}
}

// NewPostRootkeyRotateNameOK creates a PostRootkeyRotateNameOK with default headers values
func NewPostRootkeyRotateNameOK() *PostRootkeyRotateNameOK {
	return &PostRootkeyRotateNameOK{}
}

/*
PostRootkeyRotateNameOK describes a response with status code 200, with default header values.

OK
*/
type PostRootkeyRotateNameOK struct {
	Payload *models.ModelsRootKeyResponse
}

// IsSuccess returns true when this post rootkey rotate name o k response has a 2xx status code
func (o *PostRootkeyRotateNameOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this post rootkey rotate name o k response has a 3xx status code
func (o *PostRootkeyRotateNameOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post rootkey rotate name o k response has a 4xx status code
func (o *PostRootkeyRotateNameOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this post rootkey rotate name o k response has a 5xx status code
func (o *PostRootkeyRotateNameOK) IsServerError() bool {
	return false
}

// IsCode returns true when this post rootkey rotate name o k response a status code equal to that given
func (o *PostRootkeyRotateNameOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the post rootkey rotate name o k response
func (o *PostRootkeyRotateNameOK) Code() int {
	return 200
}

func (o *PostRootkeyRotateNameOK) Error() string {
	return fmt.Sprintf("[POST /rootkey/rotate/{name}][%d] postRootkeyRotateNameOK  %+v", 200, o.Payload)
}

func (o *PostRootkeyRotateNameOK) String() string {
	return fmt.Sprintf("[POST /rootkey/rotate/{name}][%d] postRootkeyRotateNameOK  %+v", 200, o.Payload)
}

func (o *PostRootkeyRotateNameOK) GetPayload() *models.ModelsRootKeyResponse {
	return o.Payload
}

func (o *PostRootkeyRotateNameOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ModelsRootKeyResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostRootkeyRotateNameBadRequest creates a PostRootkeyRotateNameBadRequest with default headers values
func NewPostRootkeyRotateNameBadRequest() *PostRootkeyRotateNameBadRequest {
	return &PostRootkeyRotateNameBadRequest{}
}

/*
PostRootkeyRotateNameBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type PostRootkeyRotateNameBadRequest struct {
	Payload string
}

// IsSuccess returns true when this post rootkey rotate name bad request response has a 2xx status code
func (o *PostRootkeyRotateNameBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post rootkey rotate name bad request response has a 3xx status code
func (o *PostRootkeyRotateNameBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post rootkey rotate name bad request response has a 4xx status code
func (o *PostRootkeyRotateNameBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this post rootkey rotate name bad request response has a 5xx status code
func (o *PostRootkeyRotateNameBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this post rootkey rotate name bad request response a status code equal to that given
func (o *PostRootkeyRotateNameBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the post rootkey rotate name bad request response
func (o *PostRootkeyRotateNameBadRequest) Code() int {
	return 400
}

func (o *PostRootkeyRotateNameBadRequest) Error() string {
	return fmt.Sprintf("[POST /rootkey/rotate/{name}][%d] postRootkeyRotateNameBadRequest  %+v", 400, o.Payload)
}

func (o *PostRootkeyRotateNameBadRequest) String() string {
	return fmt.Sprintf("[POST /rootkey/rotate/{name}][%d] postRootkeyRotateNameBadRequest  %+v", 400, o.Payload)
}

func (o *PostRootkeyRotateNameBadRequest) GetPayload() string {
	return o.Payload
}

func (o *PostRootkeyRotateNameBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostRootkeyRotateNameUnauthorized creates a PostRootkeyRotateNameUnauthorized with default headers values
func NewPostRootkeyRotateNameUnauthorized() *PostRootkeyRotateNameUnauthorized {
	return &PostRootkeyRotateNameUnauthorized{}
}

/*
PostRootkeyRotateNameUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type PostRootkeyRotateNameUnauthorized struct {
	Payload string
}

// IsSuccess returns true when this post rootkey rotate name unauthorized response has a 2xx status code
func (o *PostRootkeyRotateNameUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post rootkey rotate name unauthorized response has a 3xx status code
func (o *PostRootkeyRotateNameUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post rootkey rotate name unauthorized response has a 4xx status code
func (o *PostRootkeyRotateNameUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this post rootkey rotate name unauthorized response has a 5xx status code
func (o *PostRootkeyRotateNameUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this post rootkey rotate name unauthorized response a status code equal to that given
func (o *PostRootkeyRotateNameUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the post rootkey rotate name unauthorized response
func (o *PostRootkeyRotateNameUnauthorized) Code() int {
	return 401
}

func (o *PostRootkeyRotateNameUnauthorized) Error() string {
	return fmt.Sprintf("[POST /rootkey/rotate/{name}][%d] postRootkeyRotateNameUnauthorized  %+v", 401, o.Payload)
}

func (o *PostRootkeyRotateNameUnauthorized) String() string {
	return fmt.Sprintf("[POST /rootkey/rotate/{name}][%d] postRootkeyRotateNameUnauthorized  %+v", 401, o.Payload)
}

func (o *PostRootkeyRotateNameUnauthorized) GetPayload() string {
	return o.Payload
}

func (o *PostRootkeyRotateNameUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostRootkeyRotateNameNotFound creates a PostRootkeyRotateNameNotFound with default headers values
func NewPostRootkeyRotateNameNotFound() *PostRootkeyRotateNameNotFound {
	return &PostRootkeyRotateNameNotFound{}
}

/*
PostRootkeyRotateNameNotFound describes a response with status code 404, with default header values.

Not Found
*/
type PostRootkeyRotateNameNotFound struct {
	Payload string
}

// IsSuccess returns true when this post rootkey rotate name not found response has a 2xx status code
func (o *PostRootkeyRotateNameNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post rootkey rotate name not found response has a 3xx status code
func (o *PostRootkeyRotateNameNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post rootkey rotate name not found response has a 4xx status code
func (o *PostRootkeyRotateNameNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this post rootkey rotate name not found response has a 5xx status code
func (o *PostRootkeyRotateNameNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this post rootkey rotate name not found response a status code equal to that given
func (o *PostRootkeyRotateNameNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the post rootkey rotate name not found response
func (o *PostRootkeyRotateNameNotFound) Code() int {
	return 404
}

func (o *PostRootkeyRotateNameNotFound) Error() string {
	return fmt.Sprintf("[POST /rootkey/rotate/{name}][%d] postRootkeyRotateNameNotFound  %+v", 404, o.Payload)
}

func (o *PostRootkeyRotateNameNotFound) String() string {
	return fmt.Sprintf("[POST /rootkey/rotate/{name}][%d] postRootkeyRotateNameNotFound  %+v", 404, o.Payload)
}

func (o *PostRootkeyRotateNameNotFound) GetPayload() string {
	return o.Payload
}

func (o *PostRootkeyRotateNameNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostRootkeyRotateNameConflict creates a PostRootkeyRotateNameConflict with default headers values
func NewPostRootkeyRotateNameConflict() *PostRootkeyRotateNameConflict {
	return &PostRootkeyRotateNameConflict{}
}

/*
PostRootkeyRotateNameConflict describes a response with status code 409, with default header values.

Conflict
*/
type PostRootkeyRotateNameConflict struct {
	Payload string
}

// IsSuccess returns true when this post rootkey rotate name conflict response has a 2xx status code
func (o *PostRootkeyRotateNameConflict) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post rootkey rotate name conflict response has a 3xx status code
func (o *PostRootkeyRotateNameConflict) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post rootkey rotate name conflict response has a 4xx status code
func (o *PostRootkeyRotateNameConflict) IsClientError() bool {
	return true
}

// IsServerError returns true when this post rootkey rotate name conflict response has a 5xx status code
func (o *PostRootkeyRotateNameConflict) IsServerError() bool {
	return false
}

// IsCode returns true when this post rootkey rotate name conflict response a status code equal to that given
func (o *PostRootkeyRotateNameConflict) IsCode(code int) bool {
	return code == 409
}

// Code gets the status code for the post rootkey rotate name conflict response
func (o *PostRootkeyRotateNameConflict) Code() int {
	return 409
}

func (o *PostRootkeyRotateNameConflict) Error() string {
	return fmt.Sprintf("[POST /rootkey/rotate/{name}][%d] postRootkeyRotateNameConflict  %+v", 409, o.Payload)
}

func (o *PostRootkeyRotateNameConflict) String() string {
	return fmt.Sprintf("[POST /rootkey/rotate/{name}][%d] postRootkeyRotateNameConflict  %+v", 409, o.Payload)
}

func (o *PostRootkeyRotateNameConflict) GetPayload() string {
	return o.Payload
}

func (o *PostRootkeyRotateNameConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostRootkeyRotateNamePreconditionFailed creates a PostRootkeyRotateNamePreconditionFailed with default headers values
func NewPostRootkeyRotateNamePreconditionFailed() *PostRootkeyRotateNamePreconditionFailed {
	return &PostRootkeyRotateNamePreconditionFailed{}
}

/*
PostRootkeyRotateNamePreconditionFailed describes a response with status code 412, with default header values.

Precondition Failed
*/
type PostRootkeyRotateNamePreconditionFailed struct {
	Payload string
}

// IsSuccess returns true when this post rootkey rotate name precondition failed response has a 2xx status code
func (o *PostRootkeyRotateNamePreconditionFailed) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post rootkey rotate name precondition failed response has a 3xx status code
func (o *PostRootkeyRotateNamePreconditionFailed) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post rootkey rotate name precondition failed response has a 4xx status code
func (o *PostRootkeyRotateNamePreconditionFailed) IsClientError() bool {
	return true
}

// IsServerError returns true when this post rootkey rotate name precondition failed response has a 5xx status code
func (o *PostRootkeyRotateNamePreconditionFailed) IsServerError() bool {
	return false
}

// IsCode returns true when this post rootkey rotate name precondition failed response a status code equal to that given
func (o *PostRootkeyRotateNamePreconditionFailed) IsCode(code int) bool {
	return code == 412
}

// Code gets the status code for the post rootkey rotate name precondition failed response
func (o *PostRootkeyRotateNamePreconditionFailed) Code() int {
	return 412
}

func (o *PostRootkeyRotateNamePreconditionFailed) Error() string {
	return fmt.Sprintf("[POST /rootkey/rotate/{name}][%d] postRootkeyRotateNamePreconditionFailed  %+v", 412, o.Payload)
}

func (o *PostRootkeyRotateNamePreconditionFailed) String() string {
	return fmt.Sprintf("[POST /rootkey/rotate/{name}][%d] postRootkeyRotateNamePreconditionFailed  %+v", 412, o.Payload)
}

func (o *PostRootkeyRotateNamePreconditionFailed) GetPayload() string {
	return o.Payload
}

func (o *PostRootkeyRotateNamePreconditionFailed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostRootkeyRotateNameInternalServerError creates a PostRootkeyRotateNameInternalServerError with default headers values
func NewPostRootkeyRotateNameInternalServerError() *PostRootkeyRotateNameInternalServerError {
	return &PostRootkeyRotateNameInternalServerError{}
}

/*
PostRootkeyRotateNameInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type PostRootkeyRotateNameInternalServerError struct {
	Payload string
}

// IsSuccess returns true when this post rootkey rotate name internal server error response has a 2xx status code
func (o *PostRootkeyRotateNameInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post rootkey rotate name internal server error response has a 3xx status code
func (o *PostRootkeyRotateNameInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post rootkey rotate name internal server error response has a 4xx status code
func (o *PostRootkeyRotateNameInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this post rootkey rotate name internal server error response has a 5xx status code
func (o *PostRootkeyRotateNameInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this post rootkey rotate name internal server error response a status code equal to that given
func (o *PostRootkeyRotateNameInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the post rootkey rotate name internal server error response
func (o *PostRootkeyRotateNameInternalServerError) Code() int {
	return 500
}

func (o *PostRootkeyRotateNameInternalServerError) Error() string {
	return fmt.Sprintf("[POST /rootkey/rotate/{name}][%d] postRootkeyRotateNameInternalServerError  %+v", 500, o.Payload)
}

func (o *PostRootkeyRotateNameInternalServerError) String() string {
	return fmt.Sprintf("[POST /rootkey/rotate/{name}][%d] postRootkeyRotateNameInternalServerError  %+v", 500, o.Payload)
}

func (o *PostRootkeyRotateNameInternalServerError) GetPayload() string {
	return o.Payload
}

func (o *PostRootkeyRotateNameInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
