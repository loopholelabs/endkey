// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"log"

	"github.com/loopholelabs/endkey/internal/ent/migrate"

	"entgo.io/ent"
	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/loopholelabs/endkey/internal/ent/apikey"
	"github.com/loopholelabs/endkey/internal/ent/authority"
	"github.com/loopholelabs/endkey/internal/ent/rootkey"
	"github.com/loopholelabs/endkey/internal/ent/template"
	"github.com/loopholelabs/endkey/internal/ent/userkey"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// APIKey is the client for interacting with the APIKey builders.
	APIKey *APIKeyClient
	// Authority is the client for interacting with the Authority builders.
	Authority *AuthorityClient
	// RootKey is the client for interacting with the RootKey builders.
	RootKey *RootKeyClient
	// Template is the client for interacting with the Template builders.
	Template *TemplateClient
	// UserKey is the client for interacting with the UserKey builders.
	UserKey *UserKeyClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	cfg := config{log: log.Println, hooks: &hooks{}, inters: &inters{}}
	cfg.options(opts...)
	client := &Client{config: cfg}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.APIKey = NewAPIKeyClient(c.config)
	c.Authority = NewAuthorityClient(c.config)
	c.RootKey = NewRootKeyClient(c.config)
	c.Template = NewTemplateClient(c.config)
	c.UserKey = NewUserKeyClient(c.config)
}

type (
	// config is the configuration for the client and its builder.
	config struct {
		// driver used for executing database requests.
		driver dialect.Driver
		// debug enable a debug logging.
		debug bool
		// log used for logging on debug mode.
		log func(...any)
		// hooks to execute on mutations.
		hooks *hooks
		// interceptors to execute on queries.
		inters *inters
	}
	// Option function to configure the client.
	Option func(*config)
)

// options applies the options on the config object.
func (c *config) options(opts ...Option) {
	for _, opt := range opts {
		opt(c)
	}
	if c.debug {
		c.driver = dialect.Debug(c.driver, c.log)
	}
}

// Debug enables debug logging on the ent.Driver.
func Debug() Option {
	return func(c *config) {
		c.debug = true
	}
}

// Log sets the logging function for debug mode.
func Log(fn func(...any)) Option {
	return func(c *config) {
		c.log = fn
	}
}

// Driver configures the client driver.
func Driver(driver dialect.Driver) Option {
	return func(c *config) {
		c.driver = driver
	}
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:       ctx,
		config:    cfg,
		APIKey:    NewAPIKeyClient(cfg),
		Authority: NewAuthorityClient(cfg),
		RootKey:   NewRootKeyClient(cfg),
		Template:  NewTemplateClient(cfg),
		UserKey:   NewUserKeyClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		ctx:       ctx,
		config:    cfg,
		APIKey:    NewAPIKeyClient(cfg),
		Authority: NewAuthorityClient(cfg),
		RootKey:   NewRootKeyClient(cfg),
		Template:  NewTemplateClient(cfg),
		UserKey:   NewUserKeyClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		APIKey.
//		Query().
//		Count(ctx)
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	c.APIKey.Use(hooks...)
	c.Authority.Use(hooks...)
	c.RootKey.Use(hooks...)
	c.Template.Use(hooks...)
	c.UserKey.Use(hooks...)
}

// Intercept adds the query interceptors to all the entity clients.
// In order to add interceptors to a specific client, call: `client.Node.Intercept(...)`.
func (c *Client) Intercept(interceptors ...Interceptor) {
	c.APIKey.Intercept(interceptors...)
	c.Authority.Intercept(interceptors...)
	c.RootKey.Intercept(interceptors...)
	c.Template.Intercept(interceptors...)
	c.UserKey.Intercept(interceptors...)
}

// Mutate implements the ent.Mutator interface.
func (c *Client) Mutate(ctx context.Context, m Mutation) (Value, error) {
	switch m := m.(type) {
	case *APIKeyMutation:
		return c.APIKey.mutate(ctx, m)
	case *AuthorityMutation:
		return c.Authority.mutate(ctx, m)
	case *RootKeyMutation:
		return c.RootKey.mutate(ctx, m)
	case *TemplateMutation:
		return c.Template.mutate(ctx, m)
	case *UserKeyMutation:
		return c.UserKey.mutate(ctx, m)
	default:
		return nil, fmt.Errorf("ent: unknown mutation type %T", m)
	}
}

// APIKeyClient is a client for the APIKey schema.
type APIKeyClient struct {
	config
}

// NewAPIKeyClient returns a client for the APIKey from the given config.
func NewAPIKeyClient(c config) *APIKeyClient {
	return &APIKeyClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `apikey.Hooks(f(g(h())))`.
func (c *APIKeyClient) Use(hooks ...Hook) {
	c.hooks.APIKey = append(c.hooks.APIKey, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `apikey.Intercept(f(g(h())))`.
func (c *APIKeyClient) Intercept(interceptors ...Interceptor) {
	c.inters.APIKey = append(c.inters.APIKey, interceptors...)
}

// Create returns a builder for creating a APIKey entity.
func (c *APIKeyClient) Create() *APIKeyCreate {
	mutation := newAPIKeyMutation(c.config, OpCreate)
	return &APIKeyCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of APIKey entities.
func (c *APIKeyClient) CreateBulk(builders ...*APIKeyCreate) *APIKeyCreateBulk {
	return &APIKeyCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for APIKey.
func (c *APIKeyClient) Update() *APIKeyUpdate {
	mutation := newAPIKeyMutation(c.config, OpUpdate)
	return &APIKeyUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *APIKeyClient) UpdateOne(ak *APIKey) *APIKeyUpdateOne {
	mutation := newAPIKeyMutation(c.config, OpUpdateOne, withAPIKey(ak))
	return &APIKeyUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *APIKeyClient) UpdateOneID(id string) *APIKeyUpdateOne {
	mutation := newAPIKeyMutation(c.config, OpUpdateOne, withAPIKeyID(id))
	return &APIKeyUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for APIKey.
func (c *APIKeyClient) Delete() *APIKeyDelete {
	mutation := newAPIKeyMutation(c.config, OpDelete)
	return &APIKeyDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *APIKeyClient) DeleteOne(ak *APIKey) *APIKeyDeleteOne {
	return c.DeleteOneID(ak.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *APIKeyClient) DeleteOneID(id string) *APIKeyDeleteOne {
	builder := c.Delete().Where(apikey.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &APIKeyDeleteOne{builder}
}

// Query returns a query builder for APIKey.
func (c *APIKeyClient) Query() *APIKeyQuery {
	return &APIKeyQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeAPIKey},
		inters: c.Interceptors(),
	}
}

// Get returns a APIKey entity by its id.
func (c *APIKeyClient) Get(ctx context.Context, id string) (*APIKey, error) {
	return c.Query().Where(apikey.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *APIKeyClient) GetX(ctx context.Context, id string) *APIKey {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryAuthority queries the authority edge of a APIKey.
func (c *APIKeyClient) QueryAuthority(ak *APIKey) *AuthorityQuery {
	query := (&AuthorityClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ak.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(apikey.Table, apikey.FieldID, id),
			sqlgraph.To(authority.Table, authority.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, apikey.AuthorityTable, apikey.AuthorityColumn),
		)
		fromV = sqlgraph.Neighbors(ak.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryTemplate queries the template edge of a APIKey.
func (c *APIKeyClient) QueryTemplate(ak *APIKey) *TemplateQuery {
	query := (&TemplateClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ak.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(apikey.Table, apikey.FieldID, id),
			sqlgraph.To(template.Table, template.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, apikey.TemplateTable, apikey.TemplateColumn),
		)
		fromV = sqlgraph.Neighbors(ak.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *APIKeyClient) Hooks() []Hook {
	return c.hooks.APIKey
}

// Interceptors returns the client interceptors.
func (c *APIKeyClient) Interceptors() []Interceptor {
	return c.inters.APIKey
}

func (c *APIKeyClient) mutate(ctx context.Context, m *APIKeyMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&APIKeyCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&APIKeyUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&APIKeyUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&APIKeyDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown APIKey mutation op: %q", m.Op())
	}
}

// AuthorityClient is a client for the Authority schema.
type AuthorityClient struct {
	config
}

// NewAuthorityClient returns a client for the Authority from the given config.
func NewAuthorityClient(c config) *AuthorityClient {
	return &AuthorityClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `authority.Hooks(f(g(h())))`.
func (c *AuthorityClient) Use(hooks ...Hook) {
	c.hooks.Authority = append(c.hooks.Authority, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `authority.Intercept(f(g(h())))`.
func (c *AuthorityClient) Intercept(interceptors ...Interceptor) {
	c.inters.Authority = append(c.inters.Authority, interceptors...)
}

// Create returns a builder for creating a Authority entity.
func (c *AuthorityClient) Create() *AuthorityCreate {
	mutation := newAuthorityMutation(c.config, OpCreate)
	return &AuthorityCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Authority entities.
func (c *AuthorityClient) CreateBulk(builders ...*AuthorityCreate) *AuthorityCreateBulk {
	return &AuthorityCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Authority.
func (c *AuthorityClient) Update() *AuthorityUpdate {
	mutation := newAuthorityMutation(c.config, OpUpdate)
	return &AuthorityUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *AuthorityClient) UpdateOne(a *Authority) *AuthorityUpdateOne {
	mutation := newAuthorityMutation(c.config, OpUpdateOne, withAuthority(a))
	return &AuthorityUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *AuthorityClient) UpdateOneID(id string) *AuthorityUpdateOne {
	mutation := newAuthorityMutation(c.config, OpUpdateOne, withAuthorityID(id))
	return &AuthorityUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Authority.
func (c *AuthorityClient) Delete() *AuthorityDelete {
	mutation := newAuthorityMutation(c.config, OpDelete)
	return &AuthorityDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *AuthorityClient) DeleteOne(a *Authority) *AuthorityDeleteOne {
	return c.DeleteOneID(a.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *AuthorityClient) DeleteOneID(id string) *AuthorityDeleteOne {
	builder := c.Delete().Where(authority.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &AuthorityDeleteOne{builder}
}

// Query returns a query builder for Authority.
func (c *AuthorityClient) Query() *AuthorityQuery {
	return &AuthorityQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeAuthority},
		inters: c.Interceptors(),
	}
}

// Get returns a Authority entity by its id.
func (c *AuthorityClient) Get(ctx context.Context, id string) (*Authority, error) {
	return c.Query().Where(authority.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *AuthorityClient) GetX(ctx context.Context, id string) *Authority {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryUserKey queries the user_key edge of a Authority.
func (c *AuthorityClient) QueryUserKey(a *Authority) *UserKeyQuery {
	query := (&UserKeyClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := a.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(authority.Table, authority.FieldID, id),
			sqlgraph.To(userkey.Table, userkey.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, authority.UserKeyTable, authority.UserKeyColumn),
		)
		fromV = sqlgraph.Neighbors(a.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryAPIKeys queries the api_keys edge of a Authority.
func (c *AuthorityClient) QueryAPIKeys(a *Authority) *APIKeyQuery {
	query := (&APIKeyClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := a.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(authority.Table, authority.FieldID, id),
			sqlgraph.To(apikey.Table, apikey.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, authority.APIKeysTable, authority.APIKeysColumn),
		)
		fromV = sqlgraph.Neighbors(a.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryTemplates queries the templates edge of a Authority.
func (c *AuthorityClient) QueryTemplates(a *Authority) *TemplateQuery {
	query := (&TemplateClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := a.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(authority.Table, authority.FieldID, id),
			sqlgraph.To(template.Table, template.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, authority.TemplatesTable, authority.TemplatesColumn),
		)
		fromV = sqlgraph.Neighbors(a.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *AuthorityClient) Hooks() []Hook {
	return c.hooks.Authority
}

// Interceptors returns the client interceptors.
func (c *AuthorityClient) Interceptors() []Interceptor {
	return c.inters.Authority
}

func (c *AuthorityClient) mutate(ctx context.Context, m *AuthorityMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&AuthorityCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&AuthorityUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&AuthorityUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&AuthorityDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Authority mutation op: %q", m.Op())
	}
}

// RootKeyClient is a client for the RootKey schema.
type RootKeyClient struct {
	config
}

// NewRootKeyClient returns a client for the RootKey from the given config.
func NewRootKeyClient(c config) *RootKeyClient {
	return &RootKeyClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `rootkey.Hooks(f(g(h())))`.
func (c *RootKeyClient) Use(hooks ...Hook) {
	c.hooks.RootKey = append(c.hooks.RootKey, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `rootkey.Intercept(f(g(h())))`.
func (c *RootKeyClient) Intercept(interceptors ...Interceptor) {
	c.inters.RootKey = append(c.inters.RootKey, interceptors...)
}

// Create returns a builder for creating a RootKey entity.
func (c *RootKeyClient) Create() *RootKeyCreate {
	mutation := newRootKeyMutation(c.config, OpCreate)
	return &RootKeyCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of RootKey entities.
func (c *RootKeyClient) CreateBulk(builders ...*RootKeyCreate) *RootKeyCreateBulk {
	return &RootKeyCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for RootKey.
func (c *RootKeyClient) Update() *RootKeyUpdate {
	mutation := newRootKeyMutation(c.config, OpUpdate)
	return &RootKeyUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *RootKeyClient) UpdateOne(rk *RootKey) *RootKeyUpdateOne {
	mutation := newRootKeyMutation(c.config, OpUpdateOne, withRootKey(rk))
	return &RootKeyUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *RootKeyClient) UpdateOneID(id string) *RootKeyUpdateOne {
	mutation := newRootKeyMutation(c.config, OpUpdateOne, withRootKeyID(id))
	return &RootKeyUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for RootKey.
func (c *RootKeyClient) Delete() *RootKeyDelete {
	mutation := newRootKeyMutation(c.config, OpDelete)
	return &RootKeyDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *RootKeyClient) DeleteOne(rk *RootKey) *RootKeyDeleteOne {
	return c.DeleteOneID(rk.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *RootKeyClient) DeleteOneID(id string) *RootKeyDeleteOne {
	builder := c.Delete().Where(rootkey.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &RootKeyDeleteOne{builder}
}

// Query returns a query builder for RootKey.
func (c *RootKeyClient) Query() *RootKeyQuery {
	return &RootKeyQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeRootKey},
		inters: c.Interceptors(),
	}
}

// Get returns a RootKey entity by its id.
func (c *RootKeyClient) Get(ctx context.Context, id string) (*RootKey, error) {
	return c.Query().Where(rootkey.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *RootKeyClient) GetX(ctx context.Context, id string) *RootKey {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryUserKeys queries the user_keys edge of a RootKey.
func (c *RootKeyClient) QueryUserKeys(rk *RootKey) *UserKeyQuery {
	query := (&UserKeyClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := rk.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(rootkey.Table, rootkey.FieldID, id),
			sqlgraph.To(userkey.Table, userkey.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, rootkey.UserKeysTable, rootkey.UserKeysColumn),
		)
		fromV = sqlgraph.Neighbors(rk.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *RootKeyClient) Hooks() []Hook {
	return c.hooks.RootKey
}

// Interceptors returns the client interceptors.
func (c *RootKeyClient) Interceptors() []Interceptor {
	return c.inters.RootKey
}

func (c *RootKeyClient) mutate(ctx context.Context, m *RootKeyMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&RootKeyCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&RootKeyUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&RootKeyUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&RootKeyDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown RootKey mutation op: %q", m.Op())
	}
}

// TemplateClient is a client for the Template schema.
type TemplateClient struct {
	config
}

// NewTemplateClient returns a client for the Template from the given config.
func NewTemplateClient(c config) *TemplateClient {
	return &TemplateClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `template.Hooks(f(g(h())))`.
func (c *TemplateClient) Use(hooks ...Hook) {
	c.hooks.Template = append(c.hooks.Template, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `template.Intercept(f(g(h())))`.
func (c *TemplateClient) Intercept(interceptors ...Interceptor) {
	c.inters.Template = append(c.inters.Template, interceptors...)
}

// Create returns a builder for creating a Template entity.
func (c *TemplateClient) Create() *TemplateCreate {
	mutation := newTemplateMutation(c.config, OpCreate)
	return &TemplateCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Template entities.
func (c *TemplateClient) CreateBulk(builders ...*TemplateCreate) *TemplateCreateBulk {
	return &TemplateCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Template.
func (c *TemplateClient) Update() *TemplateUpdate {
	mutation := newTemplateMutation(c.config, OpUpdate)
	return &TemplateUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *TemplateClient) UpdateOne(t *Template) *TemplateUpdateOne {
	mutation := newTemplateMutation(c.config, OpUpdateOne, withTemplate(t))
	return &TemplateUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *TemplateClient) UpdateOneID(id string) *TemplateUpdateOne {
	mutation := newTemplateMutation(c.config, OpUpdateOne, withTemplateID(id))
	return &TemplateUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Template.
func (c *TemplateClient) Delete() *TemplateDelete {
	mutation := newTemplateMutation(c.config, OpDelete)
	return &TemplateDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *TemplateClient) DeleteOne(t *Template) *TemplateDeleteOne {
	return c.DeleteOneID(t.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *TemplateClient) DeleteOneID(id string) *TemplateDeleteOne {
	builder := c.Delete().Where(template.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &TemplateDeleteOne{builder}
}

// Query returns a query builder for Template.
func (c *TemplateClient) Query() *TemplateQuery {
	return &TemplateQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeTemplate},
		inters: c.Interceptors(),
	}
}

// Get returns a Template entity by its id.
func (c *TemplateClient) Get(ctx context.Context, id string) (*Template, error) {
	return c.Query().Where(template.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *TemplateClient) GetX(ctx context.Context, id string) *Template {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryAuthority queries the authority edge of a Template.
func (c *TemplateClient) QueryAuthority(t *Template) *AuthorityQuery {
	query := (&AuthorityClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := t.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(template.Table, template.FieldID, id),
			sqlgraph.To(authority.Table, authority.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, template.AuthorityTable, template.AuthorityColumn),
		)
		fromV = sqlgraph.Neighbors(t.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryAPIKeys queries the api_keys edge of a Template.
func (c *TemplateClient) QueryAPIKeys(t *Template) *APIKeyQuery {
	query := (&APIKeyClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := t.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(template.Table, template.FieldID, id),
			sqlgraph.To(apikey.Table, apikey.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, template.APIKeysTable, template.APIKeysColumn),
		)
		fromV = sqlgraph.Neighbors(t.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *TemplateClient) Hooks() []Hook {
	return c.hooks.Template
}

// Interceptors returns the client interceptors.
func (c *TemplateClient) Interceptors() []Interceptor {
	return c.inters.Template
}

func (c *TemplateClient) mutate(ctx context.Context, m *TemplateMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&TemplateCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&TemplateUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&TemplateUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&TemplateDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Template mutation op: %q", m.Op())
	}
}

// UserKeyClient is a client for the UserKey schema.
type UserKeyClient struct {
	config
}

// NewUserKeyClient returns a client for the UserKey from the given config.
func NewUserKeyClient(c config) *UserKeyClient {
	return &UserKeyClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `userkey.Hooks(f(g(h())))`.
func (c *UserKeyClient) Use(hooks ...Hook) {
	c.hooks.UserKey = append(c.hooks.UserKey, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `userkey.Intercept(f(g(h())))`.
func (c *UserKeyClient) Intercept(interceptors ...Interceptor) {
	c.inters.UserKey = append(c.inters.UserKey, interceptors...)
}

// Create returns a builder for creating a UserKey entity.
func (c *UserKeyClient) Create() *UserKeyCreate {
	mutation := newUserKeyMutation(c.config, OpCreate)
	return &UserKeyCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of UserKey entities.
func (c *UserKeyClient) CreateBulk(builders ...*UserKeyCreate) *UserKeyCreateBulk {
	return &UserKeyCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for UserKey.
func (c *UserKeyClient) Update() *UserKeyUpdate {
	mutation := newUserKeyMutation(c.config, OpUpdate)
	return &UserKeyUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UserKeyClient) UpdateOne(uk *UserKey) *UserKeyUpdateOne {
	mutation := newUserKeyMutation(c.config, OpUpdateOne, withUserKey(uk))
	return &UserKeyUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *UserKeyClient) UpdateOneID(id string) *UserKeyUpdateOne {
	mutation := newUserKeyMutation(c.config, OpUpdateOne, withUserKeyID(id))
	return &UserKeyUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for UserKey.
func (c *UserKeyClient) Delete() *UserKeyDelete {
	mutation := newUserKeyMutation(c.config, OpDelete)
	return &UserKeyDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *UserKeyClient) DeleteOne(uk *UserKey) *UserKeyDeleteOne {
	return c.DeleteOneID(uk.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *UserKeyClient) DeleteOneID(id string) *UserKeyDeleteOne {
	builder := c.Delete().Where(userkey.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &UserKeyDeleteOne{builder}
}

// Query returns a query builder for UserKey.
func (c *UserKeyClient) Query() *UserKeyQuery {
	return &UserKeyQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeUserKey},
		inters: c.Interceptors(),
	}
}

// Get returns a UserKey entity by its id.
func (c *UserKeyClient) Get(ctx context.Context, id string) (*UserKey, error) {
	return c.Query().Where(userkey.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UserKeyClient) GetX(ctx context.Context, id string) *UserKey {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryRootKey queries the root_key edge of a UserKey.
func (c *UserKeyClient) QueryRootKey(uk *UserKey) *RootKeyQuery {
	query := (&RootKeyClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := uk.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(userkey.Table, userkey.FieldID, id),
			sqlgraph.To(rootkey.Table, rootkey.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, userkey.RootKeyTable, userkey.RootKeyColumn),
		)
		fromV = sqlgraph.Neighbors(uk.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryAuthorities queries the authorities edge of a UserKey.
func (c *UserKeyClient) QueryAuthorities(uk *UserKey) *AuthorityQuery {
	query := (&AuthorityClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := uk.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(userkey.Table, userkey.FieldID, id),
			sqlgraph.To(authority.Table, authority.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, userkey.AuthoritiesTable, userkey.AuthoritiesColumn),
		)
		fromV = sqlgraph.Neighbors(uk.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *UserKeyClient) Hooks() []Hook {
	return c.hooks.UserKey
}

// Interceptors returns the client interceptors.
func (c *UserKeyClient) Interceptors() []Interceptor {
	return c.inters.UserKey
}

func (c *UserKeyClient) mutate(ctx context.Context, m *UserKeyMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&UserKeyCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&UserKeyUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&UserKeyUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&UserKeyDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown UserKey mutation op: %q", m.Op())
	}
}

// hooks and interceptors per client, for fast access.
type (
	hooks struct {
		APIKey, Authority, RootKey, Template, UserKey []ent.Hook
	}
	inters struct {
		APIKey, Authority, RootKey, Template, UserKey []ent.Interceptor
	}
)
