// Code generated by go-swagger; DO NOT EDIT.

package authority

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// DeleteAuthorityNameReader is a Reader for the DeleteAuthorityName structure.
type DeleteAuthorityNameReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DeleteAuthorityNameReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewDeleteAuthorityNameOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewDeleteAuthorityNameBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewDeleteAuthorityNameUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewDeleteAuthorityNameNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 409:
		result := NewDeleteAuthorityNameConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 412:
		result := NewDeleteAuthorityNamePreconditionFailed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewDeleteAuthorityNameInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[DELETE /authority/{name}] DeleteAuthorityName", response, response.Code())
	}
}

// NewDeleteAuthorityNameOK creates a DeleteAuthorityNameOK with default headers values
func NewDeleteAuthorityNameOK() *DeleteAuthorityNameOK {
	return &DeleteAuthorityNameOK{}
}

/*
DeleteAuthorityNameOK describes a response with status code 200, with default header values.

OK
*/
type DeleteAuthorityNameOK struct {
	Payload string
}

// IsSuccess returns true when this delete authority name o k response has a 2xx status code
func (o *DeleteAuthorityNameOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this delete authority name o k response has a 3xx status code
func (o *DeleteAuthorityNameOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete authority name o k response has a 4xx status code
func (o *DeleteAuthorityNameOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this delete authority name o k response has a 5xx status code
func (o *DeleteAuthorityNameOK) IsServerError() bool {
	return false
}

// IsCode returns true when this delete authority name o k response a status code equal to that given
func (o *DeleteAuthorityNameOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the delete authority name o k response
func (o *DeleteAuthorityNameOK) Code() int {
	return 200
}

func (o *DeleteAuthorityNameOK) Error() string {
	return fmt.Sprintf("[DELETE /authority/{name}][%d] deleteAuthorityNameOK  %+v", 200, o.Payload)
}

func (o *DeleteAuthorityNameOK) String() string {
	return fmt.Sprintf("[DELETE /authority/{name}][%d] deleteAuthorityNameOK  %+v", 200, o.Payload)
}

func (o *DeleteAuthorityNameOK) GetPayload() string {
	return o.Payload
}

func (o *DeleteAuthorityNameOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteAuthorityNameBadRequest creates a DeleteAuthorityNameBadRequest with default headers values
func NewDeleteAuthorityNameBadRequest() *DeleteAuthorityNameBadRequest {
	return &DeleteAuthorityNameBadRequest{}
}

/*
DeleteAuthorityNameBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type DeleteAuthorityNameBadRequest struct {
	Payload string
}

// IsSuccess returns true when this delete authority name bad request response has a 2xx status code
func (o *DeleteAuthorityNameBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete authority name bad request response has a 3xx status code
func (o *DeleteAuthorityNameBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete authority name bad request response has a 4xx status code
func (o *DeleteAuthorityNameBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete authority name bad request response has a 5xx status code
func (o *DeleteAuthorityNameBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this delete authority name bad request response a status code equal to that given
func (o *DeleteAuthorityNameBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the delete authority name bad request response
func (o *DeleteAuthorityNameBadRequest) Code() int {
	return 400
}

func (o *DeleteAuthorityNameBadRequest) Error() string {
	return fmt.Sprintf("[DELETE /authority/{name}][%d] deleteAuthorityNameBadRequest  %+v", 400, o.Payload)
}

func (o *DeleteAuthorityNameBadRequest) String() string {
	return fmt.Sprintf("[DELETE /authority/{name}][%d] deleteAuthorityNameBadRequest  %+v", 400, o.Payload)
}

func (o *DeleteAuthorityNameBadRequest) GetPayload() string {
	return o.Payload
}

func (o *DeleteAuthorityNameBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteAuthorityNameUnauthorized creates a DeleteAuthorityNameUnauthorized with default headers values
func NewDeleteAuthorityNameUnauthorized() *DeleteAuthorityNameUnauthorized {
	return &DeleteAuthorityNameUnauthorized{}
}

/*
DeleteAuthorityNameUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type DeleteAuthorityNameUnauthorized struct {
	Payload string
}

// IsSuccess returns true when this delete authority name unauthorized response has a 2xx status code
func (o *DeleteAuthorityNameUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete authority name unauthorized response has a 3xx status code
func (o *DeleteAuthorityNameUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete authority name unauthorized response has a 4xx status code
func (o *DeleteAuthorityNameUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete authority name unauthorized response has a 5xx status code
func (o *DeleteAuthorityNameUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this delete authority name unauthorized response a status code equal to that given
func (o *DeleteAuthorityNameUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the delete authority name unauthorized response
func (o *DeleteAuthorityNameUnauthorized) Code() int {
	return 401
}

func (o *DeleteAuthorityNameUnauthorized) Error() string {
	return fmt.Sprintf("[DELETE /authority/{name}][%d] deleteAuthorityNameUnauthorized  %+v", 401, o.Payload)
}

func (o *DeleteAuthorityNameUnauthorized) String() string {
	return fmt.Sprintf("[DELETE /authority/{name}][%d] deleteAuthorityNameUnauthorized  %+v", 401, o.Payload)
}

func (o *DeleteAuthorityNameUnauthorized) GetPayload() string {
	return o.Payload
}

func (o *DeleteAuthorityNameUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteAuthorityNameNotFound creates a DeleteAuthorityNameNotFound with default headers values
func NewDeleteAuthorityNameNotFound() *DeleteAuthorityNameNotFound {
	return &DeleteAuthorityNameNotFound{}
}

/*
DeleteAuthorityNameNotFound describes a response with status code 404, with default header values.

Not Found
*/
type DeleteAuthorityNameNotFound struct {
	Payload string
}

// IsSuccess returns true when this delete authority name not found response has a 2xx status code
func (o *DeleteAuthorityNameNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete authority name not found response has a 3xx status code
func (o *DeleteAuthorityNameNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete authority name not found response has a 4xx status code
func (o *DeleteAuthorityNameNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete authority name not found response has a 5xx status code
func (o *DeleteAuthorityNameNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this delete authority name not found response a status code equal to that given
func (o *DeleteAuthorityNameNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the delete authority name not found response
func (o *DeleteAuthorityNameNotFound) Code() int {
	return 404
}

func (o *DeleteAuthorityNameNotFound) Error() string {
	return fmt.Sprintf("[DELETE /authority/{name}][%d] deleteAuthorityNameNotFound  %+v", 404, o.Payload)
}

func (o *DeleteAuthorityNameNotFound) String() string {
	return fmt.Sprintf("[DELETE /authority/{name}][%d] deleteAuthorityNameNotFound  %+v", 404, o.Payload)
}

func (o *DeleteAuthorityNameNotFound) GetPayload() string {
	return o.Payload
}

func (o *DeleteAuthorityNameNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteAuthorityNameConflict creates a DeleteAuthorityNameConflict with default headers values
func NewDeleteAuthorityNameConflict() *DeleteAuthorityNameConflict {
	return &DeleteAuthorityNameConflict{}
}

/*
DeleteAuthorityNameConflict describes a response with status code 409, with default header values.

Conflict
*/
type DeleteAuthorityNameConflict struct {
	Payload string
}

// IsSuccess returns true when this delete authority name conflict response has a 2xx status code
func (o *DeleteAuthorityNameConflict) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete authority name conflict response has a 3xx status code
func (o *DeleteAuthorityNameConflict) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete authority name conflict response has a 4xx status code
func (o *DeleteAuthorityNameConflict) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete authority name conflict response has a 5xx status code
func (o *DeleteAuthorityNameConflict) IsServerError() bool {
	return false
}

// IsCode returns true when this delete authority name conflict response a status code equal to that given
func (o *DeleteAuthorityNameConflict) IsCode(code int) bool {
	return code == 409
}

// Code gets the status code for the delete authority name conflict response
func (o *DeleteAuthorityNameConflict) Code() int {
	return 409
}

func (o *DeleteAuthorityNameConflict) Error() string {
	return fmt.Sprintf("[DELETE /authority/{name}][%d] deleteAuthorityNameConflict  %+v", 409, o.Payload)
}

func (o *DeleteAuthorityNameConflict) String() string {
	return fmt.Sprintf("[DELETE /authority/{name}][%d] deleteAuthorityNameConflict  %+v", 409, o.Payload)
}

func (o *DeleteAuthorityNameConflict) GetPayload() string {
	return o.Payload
}

func (o *DeleteAuthorityNameConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteAuthorityNamePreconditionFailed creates a DeleteAuthorityNamePreconditionFailed with default headers values
func NewDeleteAuthorityNamePreconditionFailed() *DeleteAuthorityNamePreconditionFailed {
	return &DeleteAuthorityNamePreconditionFailed{}
}

/*
DeleteAuthorityNamePreconditionFailed describes a response with status code 412, with default header values.

Precondition Failed
*/
type DeleteAuthorityNamePreconditionFailed struct {
	Payload string
}

// IsSuccess returns true when this delete authority name precondition failed response has a 2xx status code
func (o *DeleteAuthorityNamePreconditionFailed) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete authority name precondition failed response has a 3xx status code
func (o *DeleteAuthorityNamePreconditionFailed) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete authority name precondition failed response has a 4xx status code
func (o *DeleteAuthorityNamePreconditionFailed) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete authority name precondition failed response has a 5xx status code
func (o *DeleteAuthorityNamePreconditionFailed) IsServerError() bool {
	return false
}

// IsCode returns true when this delete authority name precondition failed response a status code equal to that given
func (o *DeleteAuthorityNamePreconditionFailed) IsCode(code int) bool {
	return code == 412
}

// Code gets the status code for the delete authority name precondition failed response
func (o *DeleteAuthorityNamePreconditionFailed) Code() int {
	return 412
}

func (o *DeleteAuthorityNamePreconditionFailed) Error() string {
	return fmt.Sprintf("[DELETE /authority/{name}][%d] deleteAuthorityNamePreconditionFailed  %+v", 412, o.Payload)
}

func (o *DeleteAuthorityNamePreconditionFailed) String() string {
	return fmt.Sprintf("[DELETE /authority/{name}][%d] deleteAuthorityNamePreconditionFailed  %+v", 412, o.Payload)
}

func (o *DeleteAuthorityNamePreconditionFailed) GetPayload() string {
	return o.Payload
}

func (o *DeleteAuthorityNamePreconditionFailed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteAuthorityNameInternalServerError creates a DeleteAuthorityNameInternalServerError with default headers values
func NewDeleteAuthorityNameInternalServerError() *DeleteAuthorityNameInternalServerError {
	return &DeleteAuthorityNameInternalServerError{}
}

/*
DeleteAuthorityNameInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type DeleteAuthorityNameInternalServerError struct {
	Payload string
}

// IsSuccess returns true when this delete authority name internal server error response has a 2xx status code
func (o *DeleteAuthorityNameInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete authority name internal server error response has a 3xx status code
func (o *DeleteAuthorityNameInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete authority name internal server error response has a 4xx status code
func (o *DeleteAuthorityNameInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this delete authority name internal server error response has a 5xx status code
func (o *DeleteAuthorityNameInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this delete authority name internal server error response a status code equal to that given
func (o *DeleteAuthorityNameInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the delete authority name internal server error response
func (o *DeleteAuthorityNameInternalServerError) Code() int {
	return 500
}

func (o *DeleteAuthorityNameInternalServerError) Error() string {
	return fmt.Sprintf("[DELETE /authority/{name}][%d] deleteAuthorityNameInternalServerError  %+v", 500, o.Payload)
}

func (o *DeleteAuthorityNameInternalServerError) String() string {
	return fmt.Sprintf("[DELETE /authority/{name}][%d] deleteAuthorityNameInternalServerError  %+v", 500, o.Payload)
}

func (o *DeleteAuthorityNameInternalServerError) GetPayload() string {
	return o.Payload
}

func (o *DeleteAuthorityNameInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
