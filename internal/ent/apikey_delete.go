// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/loopholelabs/endkey/internal/ent/apikey"
	"github.com/loopholelabs/endkey/internal/ent/predicate"
)

// APIKeyDelete is the builder for deleting a APIKey entity.
type APIKeyDelete struct {
	config
	hooks    []Hook
	mutation *APIKeyMutation
}

// Where appends a list predicates to the APIKeyDelete builder.
func (akd *APIKeyDelete) Where(ps ...predicate.APIKey) *APIKeyDelete {
	akd.mutation.Where(ps...)
	return akd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (akd *APIKeyDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, akd.sqlExec, akd.mutation, akd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (akd *APIKeyDelete) ExecX(ctx context.Context) int {
	n, err := akd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (akd *APIKeyDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(apikey.Table, sqlgraph.NewFieldSpec(apikey.FieldID, field.TypeString))
	if ps := akd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, akd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	akd.mutation.done = true
	return affected, err
}

// APIKeyDeleteOne is the builder for deleting a single APIKey entity.
type APIKeyDeleteOne struct {
	akd *APIKeyDelete
}

// Where appends a list predicates to the APIKeyDelete builder.
func (akdo *APIKeyDeleteOne) Where(ps ...predicate.APIKey) *APIKeyDeleteOne {
	akdo.akd.mutation.Where(ps...)
	return akdo
}

// Exec executes the deletion query.
func (akdo *APIKeyDeleteOne) Exec(ctx context.Context) error {
	n, err := akdo.akd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{apikey.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (akdo *APIKeyDeleteOne) ExecX(ctx context.Context) {
	if err := akdo.Exec(ctx); err != nil {
		panic(err)
	}
}
