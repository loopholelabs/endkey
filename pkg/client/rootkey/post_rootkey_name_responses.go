// Code generated by go-swagger; DO NOT EDIT.

package rootkey

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/loopholelabs/endkey/pkg/client/models"
)

// PostRootkeyNameReader is a Reader for the PostRootkeyName structure.
type PostRootkeyNameReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PostRootkeyNameReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPostRootkeyNameOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPostRootkeyNameBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewPostRootkeyNameUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewPostRootkeyNameNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 409:
		result := NewPostRootkeyNameConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 412:
		result := NewPostRootkeyNamePreconditionFailed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewPostRootkeyNameInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /rootkey/{name}] PostRootkeyName", response, response.Code())
	}
}

// NewPostRootkeyNameOK creates a PostRootkeyNameOK with default headers values
func NewPostRootkeyNameOK() *PostRootkeyNameOK {
	return &PostRootkeyNameOK{}
}

/*
PostRootkeyNameOK describes a response with status code 200, with default header values.

OK
*/
type PostRootkeyNameOK struct {
	Payload *models.ModelsRootKeyResponse
}

// IsSuccess returns true when this post rootkey name o k response has a 2xx status code
func (o *PostRootkeyNameOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this post rootkey name o k response has a 3xx status code
func (o *PostRootkeyNameOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post rootkey name o k response has a 4xx status code
func (o *PostRootkeyNameOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this post rootkey name o k response has a 5xx status code
func (o *PostRootkeyNameOK) IsServerError() bool {
	return false
}

// IsCode returns true when this post rootkey name o k response a status code equal to that given
func (o *PostRootkeyNameOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the post rootkey name o k response
func (o *PostRootkeyNameOK) Code() int {
	return 200
}

func (o *PostRootkeyNameOK) Error() string {
	return fmt.Sprintf("[POST /rootkey/{name}][%d] postRootkeyNameOK  %+v", 200, o.Payload)
}

func (o *PostRootkeyNameOK) String() string {
	return fmt.Sprintf("[POST /rootkey/{name}][%d] postRootkeyNameOK  %+v", 200, o.Payload)
}

func (o *PostRootkeyNameOK) GetPayload() *models.ModelsRootKeyResponse {
	return o.Payload
}

func (o *PostRootkeyNameOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ModelsRootKeyResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostRootkeyNameBadRequest creates a PostRootkeyNameBadRequest with default headers values
func NewPostRootkeyNameBadRequest() *PostRootkeyNameBadRequest {
	return &PostRootkeyNameBadRequest{}
}

/*
PostRootkeyNameBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type PostRootkeyNameBadRequest struct {
	Payload string
}

// IsSuccess returns true when this post rootkey name bad request response has a 2xx status code
func (o *PostRootkeyNameBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post rootkey name bad request response has a 3xx status code
func (o *PostRootkeyNameBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post rootkey name bad request response has a 4xx status code
func (o *PostRootkeyNameBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this post rootkey name bad request response has a 5xx status code
func (o *PostRootkeyNameBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this post rootkey name bad request response a status code equal to that given
func (o *PostRootkeyNameBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the post rootkey name bad request response
func (o *PostRootkeyNameBadRequest) Code() int {
	return 400
}

func (o *PostRootkeyNameBadRequest) Error() string {
	return fmt.Sprintf("[POST /rootkey/{name}][%d] postRootkeyNameBadRequest  %+v", 400, o.Payload)
}

func (o *PostRootkeyNameBadRequest) String() string {
	return fmt.Sprintf("[POST /rootkey/{name}][%d] postRootkeyNameBadRequest  %+v", 400, o.Payload)
}

func (o *PostRootkeyNameBadRequest) GetPayload() string {
	return o.Payload
}

func (o *PostRootkeyNameBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostRootkeyNameUnauthorized creates a PostRootkeyNameUnauthorized with default headers values
func NewPostRootkeyNameUnauthorized() *PostRootkeyNameUnauthorized {
	return &PostRootkeyNameUnauthorized{}
}

/*
PostRootkeyNameUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type PostRootkeyNameUnauthorized struct {
	Payload string
}

// IsSuccess returns true when this post rootkey name unauthorized response has a 2xx status code
func (o *PostRootkeyNameUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post rootkey name unauthorized response has a 3xx status code
func (o *PostRootkeyNameUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post rootkey name unauthorized response has a 4xx status code
func (o *PostRootkeyNameUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this post rootkey name unauthorized response has a 5xx status code
func (o *PostRootkeyNameUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this post rootkey name unauthorized response a status code equal to that given
func (o *PostRootkeyNameUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the post rootkey name unauthorized response
func (o *PostRootkeyNameUnauthorized) Code() int {
	return 401
}

func (o *PostRootkeyNameUnauthorized) Error() string {
	return fmt.Sprintf("[POST /rootkey/{name}][%d] postRootkeyNameUnauthorized  %+v", 401, o.Payload)
}

func (o *PostRootkeyNameUnauthorized) String() string {
	return fmt.Sprintf("[POST /rootkey/{name}][%d] postRootkeyNameUnauthorized  %+v", 401, o.Payload)
}

func (o *PostRootkeyNameUnauthorized) GetPayload() string {
	return o.Payload
}

func (o *PostRootkeyNameUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostRootkeyNameNotFound creates a PostRootkeyNameNotFound with default headers values
func NewPostRootkeyNameNotFound() *PostRootkeyNameNotFound {
	return &PostRootkeyNameNotFound{}
}

/*
PostRootkeyNameNotFound describes a response with status code 404, with default header values.

Not Found
*/
type PostRootkeyNameNotFound struct {
	Payload string
}

// IsSuccess returns true when this post rootkey name not found response has a 2xx status code
func (o *PostRootkeyNameNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post rootkey name not found response has a 3xx status code
func (o *PostRootkeyNameNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post rootkey name not found response has a 4xx status code
func (o *PostRootkeyNameNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this post rootkey name not found response has a 5xx status code
func (o *PostRootkeyNameNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this post rootkey name not found response a status code equal to that given
func (o *PostRootkeyNameNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the post rootkey name not found response
func (o *PostRootkeyNameNotFound) Code() int {
	return 404
}

func (o *PostRootkeyNameNotFound) Error() string {
	return fmt.Sprintf("[POST /rootkey/{name}][%d] postRootkeyNameNotFound  %+v", 404, o.Payload)
}

func (o *PostRootkeyNameNotFound) String() string {
	return fmt.Sprintf("[POST /rootkey/{name}][%d] postRootkeyNameNotFound  %+v", 404, o.Payload)
}

func (o *PostRootkeyNameNotFound) GetPayload() string {
	return o.Payload
}

func (o *PostRootkeyNameNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostRootkeyNameConflict creates a PostRootkeyNameConflict with default headers values
func NewPostRootkeyNameConflict() *PostRootkeyNameConflict {
	return &PostRootkeyNameConflict{}
}

/*
PostRootkeyNameConflict describes a response with status code 409, with default header values.

Conflict
*/
type PostRootkeyNameConflict struct {
	Payload string
}

// IsSuccess returns true when this post rootkey name conflict response has a 2xx status code
func (o *PostRootkeyNameConflict) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post rootkey name conflict response has a 3xx status code
func (o *PostRootkeyNameConflict) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post rootkey name conflict response has a 4xx status code
func (o *PostRootkeyNameConflict) IsClientError() bool {
	return true
}

// IsServerError returns true when this post rootkey name conflict response has a 5xx status code
func (o *PostRootkeyNameConflict) IsServerError() bool {
	return false
}

// IsCode returns true when this post rootkey name conflict response a status code equal to that given
func (o *PostRootkeyNameConflict) IsCode(code int) bool {
	return code == 409
}

// Code gets the status code for the post rootkey name conflict response
func (o *PostRootkeyNameConflict) Code() int {
	return 409
}

func (o *PostRootkeyNameConflict) Error() string {
	return fmt.Sprintf("[POST /rootkey/{name}][%d] postRootkeyNameConflict  %+v", 409, o.Payload)
}

func (o *PostRootkeyNameConflict) String() string {
	return fmt.Sprintf("[POST /rootkey/{name}][%d] postRootkeyNameConflict  %+v", 409, o.Payload)
}

func (o *PostRootkeyNameConflict) GetPayload() string {
	return o.Payload
}

func (o *PostRootkeyNameConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostRootkeyNamePreconditionFailed creates a PostRootkeyNamePreconditionFailed with default headers values
func NewPostRootkeyNamePreconditionFailed() *PostRootkeyNamePreconditionFailed {
	return &PostRootkeyNamePreconditionFailed{}
}

/*
PostRootkeyNamePreconditionFailed describes a response with status code 412, with default header values.

Precondition Failed
*/
type PostRootkeyNamePreconditionFailed struct {
	Payload string
}

// IsSuccess returns true when this post rootkey name precondition failed response has a 2xx status code
func (o *PostRootkeyNamePreconditionFailed) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post rootkey name precondition failed response has a 3xx status code
func (o *PostRootkeyNamePreconditionFailed) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post rootkey name precondition failed response has a 4xx status code
func (o *PostRootkeyNamePreconditionFailed) IsClientError() bool {
	return true
}

// IsServerError returns true when this post rootkey name precondition failed response has a 5xx status code
func (o *PostRootkeyNamePreconditionFailed) IsServerError() bool {
	return false
}

// IsCode returns true when this post rootkey name precondition failed response a status code equal to that given
func (o *PostRootkeyNamePreconditionFailed) IsCode(code int) bool {
	return code == 412
}

// Code gets the status code for the post rootkey name precondition failed response
func (o *PostRootkeyNamePreconditionFailed) Code() int {
	return 412
}

func (o *PostRootkeyNamePreconditionFailed) Error() string {
	return fmt.Sprintf("[POST /rootkey/{name}][%d] postRootkeyNamePreconditionFailed  %+v", 412, o.Payload)
}

func (o *PostRootkeyNamePreconditionFailed) String() string {
	return fmt.Sprintf("[POST /rootkey/{name}][%d] postRootkeyNamePreconditionFailed  %+v", 412, o.Payload)
}

func (o *PostRootkeyNamePreconditionFailed) GetPayload() string {
	return o.Payload
}

func (o *PostRootkeyNamePreconditionFailed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostRootkeyNameInternalServerError creates a PostRootkeyNameInternalServerError with default headers values
func NewPostRootkeyNameInternalServerError() *PostRootkeyNameInternalServerError {
	return &PostRootkeyNameInternalServerError{}
}

/*
PostRootkeyNameInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type PostRootkeyNameInternalServerError struct {
	Payload string
}

// IsSuccess returns true when this post rootkey name internal server error response has a 2xx status code
func (o *PostRootkeyNameInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post rootkey name internal server error response has a 3xx status code
func (o *PostRootkeyNameInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post rootkey name internal server error response has a 4xx status code
func (o *PostRootkeyNameInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this post rootkey name internal server error response has a 5xx status code
func (o *PostRootkeyNameInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this post rootkey name internal server error response a status code equal to that given
func (o *PostRootkeyNameInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the post rootkey name internal server error response
func (o *PostRootkeyNameInternalServerError) Code() int {
	return 500
}

func (o *PostRootkeyNameInternalServerError) Error() string {
	return fmt.Sprintf("[POST /rootkey/{name}][%d] postRootkeyNameInternalServerError  %+v", 500, o.Payload)
}

func (o *PostRootkeyNameInternalServerError) String() string {
	return fmt.Sprintf("[POST /rootkey/{name}][%d] postRootkeyNameInternalServerError  %+v", 500, o.Payload)
}

func (o *PostRootkeyNameInternalServerError) GetPayload() string {
	return o.Payload
}

func (o *PostRootkeyNameInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
