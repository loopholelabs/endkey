// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/loopholelabs/endkey/internal/ent/apikey"
	"github.com/loopholelabs/endkey/internal/ent/authority"
	"github.com/loopholelabs/endkey/internal/ent/clienttemplate"
	"github.com/loopholelabs/endkey/internal/ent/servertemplate"
)

// APIKey is the model entity for the APIKey schema.
type APIKey struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Salt holds the value of the "salt" field.
	Salt []byte `json:"salt,omitempty"`
	// Hash holds the value of the "hash" field.
	Hash []byte `json:"hash,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the APIKeyQuery when eager-loading is set.
	Edges                    APIKeyEdges `json:"edges"`
	authority_api_keys       *string
	client_template_api_keys *string
	server_template_api_keys *string
	selectValues             sql.SelectValues
}

// APIKeyEdges holds the relations/edges for other nodes in the graph.
type APIKeyEdges struct {
	// Authority holds the value of the authority edge.
	Authority *Authority `json:"authority,omitempty"`
	// ServerTemplate holds the value of the server_template edge.
	ServerTemplate *ServerTemplate `json:"server_template,omitempty"`
	// ClientTemplate holds the value of the client_template edge.
	ClientTemplate *ClientTemplate `json:"client_template,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
}

// AuthorityOrErr returns the Authority value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e APIKeyEdges) AuthorityOrErr() (*Authority, error) {
	if e.loadedTypes[0] {
		if e.Authority == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: authority.Label}
		}
		return e.Authority, nil
	}
	return nil, &NotLoadedError{edge: "authority"}
}

// ServerTemplateOrErr returns the ServerTemplate value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e APIKeyEdges) ServerTemplateOrErr() (*ServerTemplate, error) {
	if e.loadedTypes[1] {
		if e.ServerTemplate == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: servertemplate.Label}
		}
		return e.ServerTemplate, nil
	}
	return nil, &NotLoadedError{edge: "server_template"}
}

// ClientTemplateOrErr returns the ClientTemplate value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e APIKeyEdges) ClientTemplateOrErr() (*ClientTemplate, error) {
	if e.loadedTypes[2] {
		if e.ClientTemplate == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: clienttemplate.Label}
		}
		return e.ClientTemplate, nil
	}
	return nil, &NotLoadedError{edge: "client_template"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*APIKey) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case apikey.FieldSalt, apikey.FieldHash:
			values[i] = new([]byte)
		case apikey.FieldID, apikey.FieldName:
			values[i] = new(sql.NullString)
		case apikey.FieldCreatedAt:
			values[i] = new(sql.NullTime)
		case apikey.ForeignKeys[0]: // authority_api_keys
			values[i] = new(sql.NullString)
		case apikey.ForeignKeys[1]: // client_template_api_keys
			values[i] = new(sql.NullString)
		case apikey.ForeignKeys[2]: // server_template_api_keys
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the APIKey fields.
func (ak *APIKey) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case apikey.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				ak.ID = value.String
			}
		case apikey.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				ak.CreatedAt = value.Time
			}
		case apikey.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				ak.Name = value.String
			}
		case apikey.FieldSalt:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field salt", values[i])
			} else if value != nil {
				ak.Salt = *value
			}
		case apikey.FieldHash:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field hash", values[i])
			} else if value != nil {
				ak.Hash = *value
			}
		case apikey.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field authority_api_keys", values[i])
			} else if value.Valid {
				ak.authority_api_keys = new(string)
				*ak.authority_api_keys = value.String
			}
		case apikey.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field client_template_api_keys", values[i])
			} else if value.Valid {
				ak.client_template_api_keys = new(string)
				*ak.client_template_api_keys = value.String
			}
		case apikey.ForeignKeys[2]:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field server_template_api_keys", values[i])
			} else if value.Valid {
				ak.server_template_api_keys = new(string)
				*ak.server_template_api_keys = value.String
			}
		default:
			ak.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the APIKey.
// This includes values selected through modifiers, order, etc.
func (ak *APIKey) Value(name string) (ent.Value, error) {
	return ak.selectValues.Get(name)
}

// QueryAuthority queries the "authority" edge of the APIKey entity.
func (ak *APIKey) QueryAuthority() *AuthorityQuery {
	return NewAPIKeyClient(ak.config).QueryAuthority(ak)
}

// QueryServerTemplate queries the "server_template" edge of the APIKey entity.
func (ak *APIKey) QueryServerTemplate() *ServerTemplateQuery {
	return NewAPIKeyClient(ak.config).QueryServerTemplate(ak)
}

// QueryClientTemplate queries the "client_template" edge of the APIKey entity.
func (ak *APIKey) QueryClientTemplate() *ClientTemplateQuery {
	return NewAPIKeyClient(ak.config).QueryClientTemplate(ak)
}

// Update returns a builder for updating this APIKey.
// Note that you need to call APIKey.Unwrap() before calling this method if this APIKey
// was returned from a transaction, and the transaction was committed or rolled back.
func (ak *APIKey) Update() *APIKeyUpdateOne {
	return NewAPIKeyClient(ak.config).UpdateOne(ak)
}

// Unwrap unwraps the APIKey entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ak *APIKey) Unwrap() *APIKey {
	_tx, ok := ak.config.driver.(*txDriver)
	if !ok {
		panic("ent: APIKey is not a transactional entity")
	}
	ak.config.driver = _tx.drv
	return ak
}

// String implements the fmt.Stringer.
func (ak *APIKey) String() string {
	var builder strings.Builder
	builder.WriteString("APIKey(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ak.ID))
	builder.WriteString("created_at=")
	builder.WriteString(ak.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(ak.Name)
	builder.WriteString(", ")
	builder.WriteString("salt=")
	builder.WriteString(fmt.Sprintf("%v", ak.Salt))
	builder.WriteString(", ")
	builder.WriteString("hash=")
	builder.WriteString(fmt.Sprintf("%v", ak.Hash))
	builder.WriteByte(')')
	return builder.String()
}

// APIKeys is a parsable slice of APIKey.
type APIKeys []*APIKey
