// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/loopholelabs/endkey/internal/ent/apikey"
	"github.com/loopholelabs/endkey/internal/ent/authority"
	"github.com/loopholelabs/endkey/internal/ent/predicate"
	"github.com/loopholelabs/endkey/internal/ent/template"
	"github.com/loopholelabs/endkey/internal/ent/userkey"
)

// AuthorityUpdate is the builder for updating Authority entities.
type AuthorityUpdate struct {
	config
	hooks    []Hook
	mutation *AuthorityMutation
}

// Where appends a list predicates to the AuthorityUpdate builder.
func (au *AuthorityUpdate) Where(ps ...predicate.Authority) *AuthorityUpdate {
	au.mutation.Where(ps...)
	return au
}

// SetCaCertificatePem sets the "ca_certificate_pem" field.
func (au *AuthorityUpdate) SetCaCertificatePem(b []byte) *AuthorityUpdate {
	au.mutation.SetCaCertificatePem(b)
	return au
}

// SetEncryptedPrivateKey sets the "encrypted_private_key" field.
func (au *AuthorityUpdate) SetEncryptedPrivateKey(s string) *AuthorityUpdate {
	au.mutation.SetEncryptedPrivateKey(s)
	return au
}

// SetUserKeyID sets the "user_key" edge to the UserKey entity by ID.
func (au *AuthorityUpdate) SetUserKeyID(id string) *AuthorityUpdate {
	au.mutation.SetUserKeyID(id)
	return au
}

// SetNillableUserKeyID sets the "user_key" edge to the UserKey entity by ID if the given value is not nil.
func (au *AuthorityUpdate) SetNillableUserKeyID(id *string) *AuthorityUpdate {
	if id != nil {
		au = au.SetUserKeyID(*id)
	}
	return au
}

// SetUserKey sets the "user_key" edge to the UserKey entity.
func (au *AuthorityUpdate) SetUserKey(u *UserKey) *AuthorityUpdate {
	return au.SetUserKeyID(u.ID)
}

// AddAPIKeyIDs adds the "api_keys" edge to the APIKey entity by IDs.
func (au *AuthorityUpdate) AddAPIKeyIDs(ids ...string) *AuthorityUpdate {
	au.mutation.AddAPIKeyIDs(ids...)
	return au
}

// AddAPIKeys adds the "api_keys" edges to the APIKey entity.
func (au *AuthorityUpdate) AddAPIKeys(a ...*APIKey) *AuthorityUpdate {
	ids := make([]string, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return au.AddAPIKeyIDs(ids...)
}

// AddTemplateIDs adds the "templates" edge to the Template entity by IDs.
func (au *AuthorityUpdate) AddTemplateIDs(ids ...string) *AuthorityUpdate {
	au.mutation.AddTemplateIDs(ids...)
	return au
}

// AddTemplates adds the "templates" edges to the Template entity.
func (au *AuthorityUpdate) AddTemplates(t ...*Template) *AuthorityUpdate {
	ids := make([]string, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return au.AddTemplateIDs(ids...)
}

// Mutation returns the AuthorityMutation object of the builder.
func (au *AuthorityUpdate) Mutation() *AuthorityMutation {
	return au.mutation
}

// ClearUserKey clears the "user_key" edge to the UserKey entity.
func (au *AuthorityUpdate) ClearUserKey() *AuthorityUpdate {
	au.mutation.ClearUserKey()
	return au
}

// ClearAPIKeys clears all "api_keys" edges to the APIKey entity.
func (au *AuthorityUpdate) ClearAPIKeys() *AuthorityUpdate {
	au.mutation.ClearAPIKeys()
	return au
}

// RemoveAPIKeyIDs removes the "api_keys" edge to APIKey entities by IDs.
func (au *AuthorityUpdate) RemoveAPIKeyIDs(ids ...string) *AuthorityUpdate {
	au.mutation.RemoveAPIKeyIDs(ids...)
	return au
}

// RemoveAPIKeys removes "api_keys" edges to APIKey entities.
func (au *AuthorityUpdate) RemoveAPIKeys(a ...*APIKey) *AuthorityUpdate {
	ids := make([]string, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return au.RemoveAPIKeyIDs(ids...)
}

// ClearTemplates clears all "templates" edges to the Template entity.
func (au *AuthorityUpdate) ClearTemplates() *AuthorityUpdate {
	au.mutation.ClearTemplates()
	return au
}

// RemoveTemplateIDs removes the "templates" edge to Template entities by IDs.
func (au *AuthorityUpdate) RemoveTemplateIDs(ids ...string) *AuthorityUpdate {
	au.mutation.RemoveTemplateIDs(ids...)
	return au
}

// RemoveTemplates removes "templates" edges to Template entities.
func (au *AuthorityUpdate) RemoveTemplates(t ...*Template) *AuthorityUpdate {
	ids := make([]string, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return au.RemoveTemplateIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (au *AuthorityUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, au.sqlSave, au.mutation, au.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (au *AuthorityUpdate) SaveX(ctx context.Context) int {
	affected, err := au.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (au *AuthorityUpdate) Exec(ctx context.Context) error {
	_, err := au.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (au *AuthorityUpdate) ExecX(ctx context.Context) {
	if err := au.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (au *AuthorityUpdate) check() error {
	if v, ok := au.mutation.CaCertificatePem(); ok {
		if err := authority.CaCertificatePemValidator(v); err != nil {
			return &ValidationError{Name: "ca_certificate_pem", err: fmt.Errorf(`ent: validator failed for field "Authority.ca_certificate_pem": %w`, err)}
		}
	}
	if v, ok := au.mutation.EncryptedPrivateKey(); ok {
		if err := authority.EncryptedPrivateKeyValidator(v); err != nil {
			return &ValidationError{Name: "encrypted_private_key", err: fmt.Errorf(`ent: validator failed for field "Authority.encrypted_private_key": %w`, err)}
		}
	}
	return nil
}

func (au *AuthorityUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := au.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(authority.Table, authority.Columns, sqlgraph.NewFieldSpec(authority.FieldID, field.TypeString))
	if ps := au.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := au.mutation.CaCertificatePem(); ok {
		_spec.SetField(authority.FieldCaCertificatePem, field.TypeBytes, value)
	}
	if value, ok := au.mutation.EncryptedPrivateKey(); ok {
		_spec.SetField(authority.FieldEncryptedPrivateKey, field.TypeString, value)
	}
	if au.mutation.UserKeyCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   authority.UserKeyTable,
			Columns: []string{authority.UserKeyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userkey.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.UserKeyIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   authority.UserKeyTable,
			Columns: []string{authority.UserKeyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userkey.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if au.mutation.APIKeysCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   authority.APIKeysTable,
			Columns: []string{authority.APIKeysColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(apikey.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.RemovedAPIKeysIDs(); len(nodes) > 0 && !au.mutation.APIKeysCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   authority.APIKeysTable,
			Columns: []string{authority.APIKeysColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(apikey.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.APIKeysIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   authority.APIKeysTable,
			Columns: []string{authority.APIKeysColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(apikey.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if au.mutation.TemplatesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   authority.TemplatesTable,
			Columns: []string{authority.TemplatesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(template.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.RemovedTemplatesIDs(); len(nodes) > 0 && !au.mutation.TemplatesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   authority.TemplatesTable,
			Columns: []string{authority.TemplatesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(template.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.TemplatesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   authority.TemplatesTable,
			Columns: []string{authority.TemplatesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(template.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, au.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{authority.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	au.mutation.done = true
	return n, nil
}

// AuthorityUpdateOne is the builder for updating a single Authority entity.
type AuthorityUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *AuthorityMutation
}

// SetCaCertificatePem sets the "ca_certificate_pem" field.
func (auo *AuthorityUpdateOne) SetCaCertificatePem(b []byte) *AuthorityUpdateOne {
	auo.mutation.SetCaCertificatePem(b)
	return auo
}

// SetEncryptedPrivateKey sets the "encrypted_private_key" field.
func (auo *AuthorityUpdateOne) SetEncryptedPrivateKey(s string) *AuthorityUpdateOne {
	auo.mutation.SetEncryptedPrivateKey(s)
	return auo
}

// SetUserKeyID sets the "user_key" edge to the UserKey entity by ID.
func (auo *AuthorityUpdateOne) SetUserKeyID(id string) *AuthorityUpdateOne {
	auo.mutation.SetUserKeyID(id)
	return auo
}

// SetNillableUserKeyID sets the "user_key" edge to the UserKey entity by ID if the given value is not nil.
func (auo *AuthorityUpdateOne) SetNillableUserKeyID(id *string) *AuthorityUpdateOne {
	if id != nil {
		auo = auo.SetUserKeyID(*id)
	}
	return auo
}

// SetUserKey sets the "user_key" edge to the UserKey entity.
func (auo *AuthorityUpdateOne) SetUserKey(u *UserKey) *AuthorityUpdateOne {
	return auo.SetUserKeyID(u.ID)
}

// AddAPIKeyIDs adds the "api_keys" edge to the APIKey entity by IDs.
func (auo *AuthorityUpdateOne) AddAPIKeyIDs(ids ...string) *AuthorityUpdateOne {
	auo.mutation.AddAPIKeyIDs(ids...)
	return auo
}

// AddAPIKeys adds the "api_keys" edges to the APIKey entity.
func (auo *AuthorityUpdateOne) AddAPIKeys(a ...*APIKey) *AuthorityUpdateOne {
	ids := make([]string, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return auo.AddAPIKeyIDs(ids...)
}

// AddTemplateIDs adds the "templates" edge to the Template entity by IDs.
func (auo *AuthorityUpdateOne) AddTemplateIDs(ids ...string) *AuthorityUpdateOne {
	auo.mutation.AddTemplateIDs(ids...)
	return auo
}

// AddTemplates adds the "templates" edges to the Template entity.
func (auo *AuthorityUpdateOne) AddTemplates(t ...*Template) *AuthorityUpdateOne {
	ids := make([]string, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return auo.AddTemplateIDs(ids...)
}

// Mutation returns the AuthorityMutation object of the builder.
func (auo *AuthorityUpdateOne) Mutation() *AuthorityMutation {
	return auo.mutation
}

// ClearUserKey clears the "user_key" edge to the UserKey entity.
func (auo *AuthorityUpdateOne) ClearUserKey() *AuthorityUpdateOne {
	auo.mutation.ClearUserKey()
	return auo
}

// ClearAPIKeys clears all "api_keys" edges to the APIKey entity.
func (auo *AuthorityUpdateOne) ClearAPIKeys() *AuthorityUpdateOne {
	auo.mutation.ClearAPIKeys()
	return auo
}

// RemoveAPIKeyIDs removes the "api_keys" edge to APIKey entities by IDs.
func (auo *AuthorityUpdateOne) RemoveAPIKeyIDs(ids ...string) *AuthorityUpdateOne {
	auo.mutation.RemoveAPIKeyIDs(ids...)
	return auo
}

// RemoveAPIKeys removes "api_keys" edges to APIKey entities.
func (auo *AuthorityUpdateOne) RemoveAPIKeys(a ...*APIKey) *AuthorityUpdateOne {
	ids := make([]string, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return auo.RemoveAPIKeyIDs(ids...)
}

// ClearTemplates clears all "templates" edges to the Template entity.
func (auo *AuthorityUpdateOne) ClearTemplates() *AuthorityUpdateOne {
	auo.mutation.ClearTemplates()
	return auo
}

// RemoveTemplateIDs removes the "templates" edge to Template entities by IDs.
func (auo *AuthorityUpdateOne) RemoveTemplateIDs(ids ...string) *AuthorityUpdateOne {
	auo.mutation.RemoveTemplateIDs(ids...)
	return auo
}

// RemoveTemplates removes "templates" edges to Template entities.
func (auo *AuthorityUpdateOne) RemoveTemplates(t ...*Template) *AuthorityUpdateOne {
	ids := make([]string, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return auo.RemoveTemplateIDs(ids...)
}

// Where appends a list predicates to the AuthorityUpdate builder.
func (auo *AuthorityUpdateOne) Where(ps ...predicate.Authority) *AuthorityUpdateOne {
	auo.mutation.Where(ps...)
	return auo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (auo *AuthorityUpdateOne) Select(field string, fields ...string) *AuthorityUpdateOne {
	auo.fields = append([]string{field}, fields...)
	return auo
}

// Save executes the query and returns the updated Authority entity.
func (auo *AuthorityUpdateOne) Save(ctx context.Context) (*Authority, error) {
	return withHooks(ctx, auo.sqlSave, auo.mutation, auo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (auo *AuthorityUpdateOne) SaveX(ctx context.Context) *Authority {
	node, err := auo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (auo *AuthorityUpdateOne) Exec(ctx context.Context) error {
	_, err := auo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (auo *AuthorityUpdateOne) ExecX(ctx context.Context) {
	if err := auo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (auo *AuthorityUpdateOne) check() error {
	if v, ok := auo.mutation.CaCertificatePem(); ok {
		if err := authority.CaCertificatePemValidator(v); err != nil {
			return &ValidationError{Name: "ca_certificate_pem", err: fmt.Errorf(`ent: validator failed for field "Authority.ca_certificate_pem": %w`, err)}
		}
	}
	if v, ok := auo.mutation.EncryptedPrivateKey(); ok {
		if err := authority.EncryptedPrivateKeyValidator(v); err != nil {
			return &ValidationError{Name: "encrypted_private_key", err: fmt.Errorf(`ent: validator failed for field "Authority.encrypted_private_key": %w`, err)}
		}
	}
	return nil
}

func (auo *AuthorityUpdateOne) sqlSave(ctx context.Context) (_node *Authority, err error) {
	if err := auo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(authority.Table, authority.Columns, sqlgraph.NewFieldSpec(authority.FieldID, field.TypeString))
	id, ok := auo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Authority.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := auo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, authority.FieldID)
		for _, f := range fields {
			if !authority.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != authority.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := auo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := auo.mutation.CaCertificatePem(); ok {
		_spec.SetField(authority.FieldCaCertificatePem, field.TypeBytes, value)
	}
	if value, ok := auo.mutation.EncryptedPrivateKey(); ok {
		_spec.SetField(authority.FieldEncryptedPrivateKey, field.TypeString, value)
	}
	if auo.mutation.UserKeyCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   authority.UserKeyTable,
			Columns: []string{authority.UserKeyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userkey.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.UserKeyIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   authority.UserKeyTable,
			Columns: []string{authority.UserKeyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userkey.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if auo.mutation.APIKeysCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   authority.APIKeysTable,
			Columns: []string{authority.APIKeysColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(apikey.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.RemovedAPIKeysIDs(); len(nodes) > 0 && !auo.mutation.APIKeysCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   authority.APIKeysTable,
			Columns: []string{authority.APIKeysColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(apikey.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.APIKeysIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   authority.APIKeysTable,
			Columns: []string{authority.APIKeysColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(apikey.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if auo.mutation.TemplatesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   authority.TemplatesTable,
			Columns: []string{authority.TemplatesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(template.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.RemovedTemplatesIDs(); len(nodes) > 0 && !auo.mutation.TemplatesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   authority.TemplatesTable,
			Columns: []string{authority.TemplatesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(template.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.TemplatesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   authority.TemplatesTable,
			Columns: []string{authority.TemplatesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(template.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Authority{config: auo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, auo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{authority.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	auo.mutation.done = true
	return _node, nil
}
