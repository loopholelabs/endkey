// Code generated by go-swagger; DO NOT EDIT.

package certificate

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/loopholelabs/endkey/pkg/client/models"
)

// GetCertificateReader is a Reader for the GetCertificate structure.
type GetCertificateReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetCertificateReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetCertificateOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetCertificateBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewGetCertificateUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetCertificateNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 409:
		result := NewGetCertificateConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 412:
		result := NewGetCertificatePreconditionFailed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetCertificateInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /certificate] GetCertificate", response, response.Code())
	}
}

// NewGetCertificateOK creates a GetCertificateOK with default headers values
func NewGetCertificateOK() *GetCertificateOK {
	return &GetCertificateOK{}
}

/*
GetCertificateOK describes a response with status code 200, with default header values.

OK
*/
type GetCertificateOK struct {
	Payload *models.ModelsCAResponse
}

// IsSuccess returns true when this get certificate o k response has a 2xx status code
func (o *GetCertificateOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get certificate o k response has a 3xx status code
func (o *GetCertificateOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get certificate o k response has a 4xx status code
func (o *GetCertificateOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get certificate o k response has a 5xx status code
func (o *GetCertificateOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get certificate o k response a status code equal to that given
func (o *GetCertificateOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get certificate o k response
func (o *GetCertificateOK) Code() int {
	return 200
}

func (o *GetCertificateOK) Error() string {
	return fmt.Sprintf("[GET /certificate][%d] getCertificateOK  %+v", 200, o.Payload)
}

func (o *GetCertificateOK) String() string {
	return fmt.Sprintf("[GET /certificate][%d] getCertificateOK  %+v", 200, o.Payload)
}

func (o *GetCertificateOK) GetPayload() *models.ModelsCAResponse {
	return o.Payload
}

func (o *GetCertificateOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ModelsCAResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetCertificateBadRequest creates a GetCertificateBadRequest with default headers values
func NewGetCertificateBadRequest() *GetCertificateBadRequest {
	return &GetCertificateBadRequest{}
}

/*
GetCertificateBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type GetCertificateBadRequest struct {
	Payload string
}

// IsSuccess returns true when this get certificate bad request response has a 2xx status code
func (o *GetCertificateBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get certificate bad request response has a 3xx status code
func (o *GetCertificateBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get certificate bad request response has a 4xx status code
func (o *GetCertificateBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this get certificate bad request response has a 5xx status code
func (o *GetCertificateBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this get certificate bad request response a status code equal to that given
func (o *GetCertificateBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the get certificate bad request response
func (o *GetCertificateBadRequest) Code() int {
	return 400
}

func (o *GetCertificateBadRequest) Error() string {
	return fmt.Sprintf("[GET /certificate][%d] getCertificateBadRequest  %+v", 400, o.Payload)
}

func (o *GetCertificateBadRequest) String() string {
	return fmt.Sprintf("[GET /certificate][%d] getCertificateBadRequest  %+v", 400, o.Payload)
}

func (o *GetCertificateBadRequest) GetPayload() string {
	return o.Payload
}

func (o *GetCertificateBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetCertificateUnauthorized creates a GetCertificateUnauthorized with default headers values
func NewGetCertificateUnauthorized() *GetCertificateUnauthorized {
	return &GetCertificateUnauthorized{}
}

/*
GetCertificateUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type GetCertificateUnauthorized struct {
	Payload string
}

// IsSuccess returns true when this get certificate unauthorized response has a 2xx status code
func (o *GetCertificateUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get certificate unauthorized response has a 3xx status code
func (o *GetCertificateUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get certificate unauthorized response has a 4xx status code
func (o *GetCertificateUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this get certificate unauthorized response has a 5xx status code
func (o *GetCertificateUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this get certificate unauthorized response a status code equal to that given
func (o *GetCertificateUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the get certificate unauthorized response
func (o *GetCertificateUnauthorized) Code() int {
	return 401
}

func (o *GetCertificateUnauthorized) Error() string {
	return fmt.Sprintf("[GET /certificate][%d] getCertificateUnauthorized  %+v", 401, o.Payload)
}

func (o *GetCertificateUnauthorized) String() string {
	return fmt.Sprintf("[GET /certificate][%d] getCertificateUnauthorized  %+v", 401, o.Payload)
}

func (o *GetCertificateUnauthorized) GetPayload() string {
	return o.Payload
}

func (o *GetCertificateUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetCertificateNotFound creates a GetCertificateNotFound with default headers values
func NewGetCertificateNotFound() *GetCertificateNotFound {
	return &GetCertificateNotFound{}
}

/*
GetCertificateNotFound describes a response with status code 404, with default header values.

Not Found
*/
type GetCertificateNotFound struct {
	Payload string
}

// IsSuccess returns true when this get certificate not found response has a 2xx status code
func (o *GetCertificateNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get certificate not found response has a 3xx status code
func (o *GetCertificateNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get certificate not found response has a 4xx status code
func (o *GetCertificateNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get certificate not found response has a 5xx status code
func (o *GetCertificateNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get certificate not found response a status code equal to that given
func (o *GetCertificateNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the get certificate not found response
func (o *GetCertificateNotFound) Code() int {
	return 404
}

func (o *GetCertificateNotFound) Error() string {
	return fmt.Sprintf("[GET /certificate][%d] getCertificateNotFound  %+v", 404, o.Payload)
}

func (o *GetCertificateNotFound) String() string {
	return fmt.Sprintf("[GET /certificate][%d] getCertificateNotFound  %+v", 404, o.Payload)
}

func (o *GetCertificateNotFound) GetPayload() string {
	return o.Payload
}

func (o *GetCertificateNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetCertificateConflict creates a GetCertificateConflict with default headers values
func NewGetCertificateConflict() *GetCertificateConflict {
	return &GetCertificateConflict{}
}

/*
GetCertificateConflict describes a response with status code 409, with default header values.

Conflict
*/
type GetCertificateConflict struct {
	Payload string
}

// IsSuccess returns true when this get certificate conflict response has a 2xx status code
func (o *GetCertificateConflict) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get certificate conflict response has a 3xx status code
func (o *GetCertificateConflict) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get certificate conflict response has a 4xx status code
func (o *GetCertificateConflict) IsClientError() bool {
	return true
}

// IsServerError returns true when this get certificate conflict response has a 5xx status code
func (o *GetCertificateConflict) IsServerError() bool {
	return false
}

// IsCode returns true when this get certificate conflict response a status code equal to that given
func (o *GetCertificateConflict) IsCode(code int) bool {
	return code == 409
}

// Code gets the status code for the get certificate conflict response
func (o *GetCertificateConflict) Code() int {
	return 409
}

func (o *GetCertificateConflict) Error() string {
	return fmt.Sprintf("[GET /certificate][%d] getCertificateConflict  %+v", 409, o.Payload)
}

func (o *GetCertificateConflict) String() string {
	return fmt.Sprintf("[GET /certificate][%d] getCertificateConflict  %+v", 409, o.Payload)
}

func (o *GetCertificateConflict) GetPayload() string {
	return o.Payload
}

func (o *GetCertificateConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetCertificatePreconditionFailed creates a GetCertificatePreconditionFailed with default headers values
func NewGetCertificatePreconditionFailed() *GetCertificatePreconditionFailed {
	return &GetCertificatePreconditionFailed{}
}

/*
GetCertificatePreconditionFailed describes a response with status code 412, with default header values.

Precondition Failed
*/
type GetCertificatePreconditionFailed struct {
	Payload string
}

// IsSuccess returns true when this get certificate precondition failed response has a 2xx status code
func (o *GetCertificatePreconditionFailed) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get certificate precondition failed response has a 3xx status code
func (o *GetCertificatePreconditionFailed) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get certificate precondition failed response has a 4xx status code
func (o *GetCertificatePreconditionFailed) IsClientError() bool {
	return true
}

// IsServerError returns true when this get certificate precondition failed response has a 5xx status code
func (o *GetCertificatePreconditionFailed) IsServerError() bool {
	return false
}

// IsCode returns true when this get certificate precondition failed response a status code equal to that given
func (o *GetCertificatePreconditionFailed) IsCode(code int) bool {
	return code == 412
}

// Code gets the status code for the get certificate precondition failed response
func (o *GetCertificatePreconditionFailed) Code() int {
	return 412
}

func (o *GetCertificatePreconditionFailed) Error() string {
	return fmt.Sprintf("[GET /certificate][%d] getCertificatePreconditionFailed  %+v", 412, o.Payload)
}

func (o *GetCertificatePreconditionFailed) String() string {
	return fmt.Sprintf("[GET /certificate][%d] getCertificatePreconditionFailed  %+v", 412, o.Payload)
}

func (o *GetCertificatePreconditionFailed) GetPayload() string {
	return o.Payload
}

func (o *GetCertificatePreconditionFailed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetCertificateInternalServerError creates a GetCertificateInternalServerError with default headers values
func NewGetCertificateInternalServerError() *GetCertificateInternalServerError {
	return &GetCertificateInternalServerError{}
}

/*
GetCertificateInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type GetCertificateInternalServerError struct {
	Payload string
}

// IsSuccess returns true when this get certificate internal server error response has a 2xx status code
func (o *GetCertificateInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get certificate internal server error response has a 3xx status code
func (o *GetCertificateInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get certificate internal server error response has a 4xx status code
func (o *GetCertificateInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this get certificate internal server error response has a 5xx status code
func (o *GetCertificateInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this get certificate internal server error response a status code equal to that given
func (o *GetCertificateInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the get certificate internal server error response
func (o *GetCertificateInternalServerError) Code() int {
	return 500
}

func (o *GetCertificateInternalServerError) Error() string {
	return fmt.Sprintf("[GET /certificate][%d] getCertificateInternalServerError  %+v", 500, o.Payload)
}

func (o *GetCertificateInternalServerError) String() string {
	return fmt.Sprintf("[GET /certificate][%d] getCertificateInternalServerError  %+v", 500, o.Payload)
}

func (o *GetCertificateInternalServerError) GetPayload() string {
	return o.Payload
}

func (o *GetCertificateInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
