// Code generated by go-swagger; DO NOT EDIT.

package rootkey

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new rootkey API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for rootkey API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	DeleteRootkeyName(params *DeleteRootkeyNameParams, opts ...ClientOption) (*DeleteRootkeyNameOK, error)

	GetRootkey(params *GetRootkeyParams, opts ...ClientOption) (*GetRootkeyOK, error)

	PostRootkeyName(params *PostRootkeyNameParams, opts ...ClientOption) (*PostRootkeyNameOK, error)

	PostRootkeyRotateName(params *PostRootkeyRotateNameParams, opts ...ClientOption) (*PostRootkeyRotateNameOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
DeleteRootkeyName Delete a Root Key
*/
func (a *Client) DeleteRootkeyName(params *DeleteRootkeyNameParams, opts ...ClientOption) (*DeleteRootkeyNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteRootkeyNameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteRootkeyName",
		Method:             "DELETE",
		PathPattern:        "/rootkey/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteRootkeyNameReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteRootkeyNameOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteRootkeyName: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetRootkey Lists all the root keys
*/
func (a *Client) GetRootkey(params *GetRootkeyParams, opts ...ClientOption) (*GetRootkeyOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetRootkeyParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetRootkey",
		Method:             "GET",
		PathPattern:        "/rootkey",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetRootkeyReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetRootkeyOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetRootkey: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostRootkeyName Create a new Root Key
*/
func (a *Client) PostRootkeyName(params *PostRootkeyNameParams, opts ...ClientOption) (*PostRootkeyNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostRootkeyNameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostRootkeyName",
		Method:             "POST",
		PathPattern:        "/rootkey/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostRootkeyNameReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostRootkeyNameOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostRootkeyName: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostRootkeyRotateName Rotates a given Root Key
*/
func (a *Client) PostRootkeyRotateName(params *PostRootkeyRotateNameParams, opts ...ClientOption) (*PostRootkeyRotateNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostRootkeyRotateNameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostRootkeyRotateName",
		Method:             "POST",
		PathPattern:        "/rootkey/rotate/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostRootkeyRotateNameReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostRootkeyRotateNameOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostRootkeyRotateName: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
