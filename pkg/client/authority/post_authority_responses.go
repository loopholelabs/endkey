// Code generated by go-swagger; DO NOT EDIT.

package authority

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/loopholelabs/endkey/pkg/client/models"
)

// PostAuthorityReader is a Reader for the PostAuthority structure.
type PostAuthorityReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PostAuthorityReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPostAuthorityOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPostAuthorityBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewPostAuthorityUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewPostAuthorityNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 409:
		result := NewPostAuthorityConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 412:
		result := NewPostAuthorityPreconditionFailed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewPostAuthorityInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /authority] PostAuthority", response, response.Code())
	}
}

// NewPostAuthorityOK creates a PostAuthorityOK with default headers values
func NewPostAuthorityOK() *PostAuthorityOK {
	return &PostAuthorityOK{}
}

/*
PostAuthorityOK describes a response with status code 200, with default header values.

OK
*/
type PostAuthorityOK struct {
	Payload *models.ModelsAuthorityResponse
}

// IsSuccess returns true when this post authority o k response has a 2xx status code
func (o *PostAuthorityOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this post authority o k response has a 3xx status code
func (o *PostAuthorityOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post authority o k response has a 4xx status code
func (o *PostAuthorityOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this post authority o k response has a 5xx status code
func (o *PostAuthorityOK) IsServerError() bool {
	return false
}

// IsCode returns true when this post authority o k response a status code equal to that given
func (o *PostAuthorityOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the post authority o k response
func (o *PostAuthorityOK) Code() int {
	return 200
}

func (o *PostAuthorityOK) Error() string {
	return fmt.Sprintf("[POST /authority][%d] postAuthorityOK  %+v", 200, o.Payload)
}

func (o *PostAuthorityOK) String() string {
	return fmt.Sprintf("[POST /authority][%d] postAuthorityOK  %+v", 200, o.Payload)
}

func (o *PostAuthorityOK) GetPayload() *models.ModelsAuthorityResponse {
	return o.Payload
}

func (o *PostAuthorityOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ModelsAuthorityResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostAuthorityBadRequest creates a PostAuthorityBadRequest with default headers values
func NewPostAuthorityBadRequest() *PostAuthorityBadRequest {
	return &PostAuthorityBadRequest{}
}

/*
PostAuthorityBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type PostAuthorityBadRequest struct {
	Payload string
}

// IsSuccess returns true when this post authority bad request response has a 2xx status code
func (o *PostAuthorityBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post authority bad request response has a 3xx status code
func (o *PostAuthorityBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post authority bad request response has a 4xx status code
func (o *PostAuthorityBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this post authority bad request response has a 5xx status code
func (o *PostAuthorityBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this post authority bad request response a status code equal to that given
func (o *PostAuthorityBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the post authority bad request response
func (o *PostAuthorityBadRequest) Code() int {
	return 400
}

func (o *PostAuthorityBadRequest) Error() string {
	return fmt.Sprintf("[POST /authority][%d] postAuthorityBadRequest  %+v", 400, o.Payload)
}

func (o *PostAuthorityBadRequest) String() string {
	return fmt.Sprintf("[POST /authority][%d] postAuthorityBadRequest  %+v", 400, o.Payload)
}

func (o *PostAuthorityBadRequest) GetPayload() string {
	return o.Payload
}

func (o *PostAuthorityBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostAuthorityUnauthorized creates a PostAuthorityUnauthorized with default headers values
func NewPostAuthorityUnauthorized() *PostAuthorityUnauthorized {
	return &PostAuthorityUnauthorized{}
}

/*
PostAuthorityUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type PostAuthorityUnauthorized struct {
	Payload string
}

// IsSuccess returns true when this post authority unauthorized response has a 2xx status code
func (o *PostAuthorityUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post authority unauthorized response has a 3xx status code
func (o *PostAuthorityUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post authority unauthorized response has a 4xx status code
func (o *PostAuthorityUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this post authority unauthorized response has a 5xx status code
func (o *PostAuthorityUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this post authority unauthorized response a status code equal to that given
func (o *PostAuthorityUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the post authority unauthorized response
func (o *PostAuthorityUnauthorized) Code() int {
	return 401
}

func (o *PostAuthorityUnauthorized) Error() string {
	return fmt.Sprintf("[POST /authority][%d] postAuthorityUnauthorized  %+v", 401, o.Payload)
}

func (o *PostAuthorityUnauthorized) String() string {
	return fmt.Sprintf("[POST /authority][%d] postAuthorityUnauthorized  %+v", 401, o.Payload)
}

func (o *PostAuthorityUnauthorized) GetPayload() string {
	return o.Payload
}

func (o *PostAuthorityUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostAuthorityNotFound creates a PostAuthorityNotFound with default headers values
func NewPostAuthorityNotFound() *PostAuthorityNotFound {
	return &PostAuthorityNotFound{}
}

/*
PostAuthorityNotFound describes a response with status code 404, with default header values.

Not Found
*/
type PostAuthorityNotFound struct {
	Payload string
}

// IsSuccess returns true when this post authority not found response has a 2xx status code
func (o *PostAuthorityNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post authority not found response has a 3xx status code
func (o *PostAuthorityNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post authority not found response has a 4xx status code
func (o *PostAuthorityNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this post authority not found response has a 5xx status code
func (o *PostAuthorityNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this post authority not found response a status code equal to that given
func (o *PostAuthorityNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the post authority not found response
func (o *PostAuthorityNotFound) Code() int {
	return 404
}

func (o *PostAuthorityNotFound) Error() string {
	return fmt.Sprintf("[POST /authority][%d] postAuthorityNotFound  %+v", 404, o.Payload)
}

func (o *PostAuthorityNotFound) String() string {
	return fmt.Sprintf("[POST /authority][%d] postAuthorityNotFound  %+v", 404, o.Payload)
}

func (o *PostAuthorityNotFound) GetPayload() string {
	return o.Payload
}

func (o *PostAuthorityNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostAuthorityConflict creates a PostAuthorityConflict with default headers values
func NewPostAuthorityConflict() *PostAuthorityConflict {
	return &PostAuthorityConflict{}
}

/*
PostAuthorityConflict describes a response with status code 409, with default header values.

Conflict
*/
type PostAuthorityConflict struct {
	Payload string
}

// IsSuccess returns true when this post authority conflict response has a 2xx status code
func (o *PostAuthorityConflict) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post authority conflict response has a 3xx status code
func (o *PostAuthorityConflict) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post authority conflict response has a 4xx status code
func (o *PostAuthorityConflict) IsClientError() bool {
	return true
}

// IsServerError returns true when this post authority conflict response has a 5xx status code
func (o *PostAuthorityConflict) IsServerError() bool {
	return false
}

// IsCode returns true when this post authority conflict response a status code equal to that given
func (o *PostAuthorityConflict) IsCode(code int) bool {
	return code == 409
}

// Code gets the status code for the post authority conflict response
func (o *PostAuthorityConflict) Code() int {
	return 409
}

func (o *PostAuthorityConflict) Error() string {
	return fmt.Sprintf("[POST /authority][%d] postAuthorityConflict  %+v", 409, o.Payload)
}

func (o *PostAuthorityConflict) String() string {
	return fmt.Sprintf("[POST /authority][%d] postAuthorityConflict  %+v", 409, o.Payload)
}

func (o *PostAuthorityConflict) GetPayload() string {
	return o.Payload
}

func (o *PostAuthorityConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostAuthorityPreconditionFailed creates a PostAuthorityPreconditionFailed with default headers values
func NewPostAuthorityPreconditionFailed() *PostAuthorityPreconditionFailed {
	return &PostAuthorityPreconditionFailed{}
}

/*
PostAuthorityPreconditionFailed describes a response with status code 412, with default header values.

Precondition Failed
*/
type PostAuthorityPreconditionFailed struct {
	Payload string
}

// IsSuccess returns true when this post authority precondition failed response has a 2xx status code
func (o *PostAuthorityPreconditionFailed) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post authority precondition failed response has a 3xx status code
func (o *PostAuthorityPreconditionFailed) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post authority precondition failed response has a 4xx status code
func (o *PostAuthorityPreconditionFailed) IsClientError() bool {
	return true
}

// IsServerError returns true when this post authority precondition failed response has a 5xx status code
func (o *PostAuthorityPreconditionFailed) IsServerError() bool {
	return false
}

// IsCode returns true when this post authority precondition failed response a status code equal to that given
func (o *PostAuthorityPreconditionFailed) IsCode(code int) bool {
	return code == 412
}

// Code gets the status code for the post authority precondition failed response
func (o *PostAuthorityPreconditionFailed) Code() int {
	return 412
}

func (o *PostAuthorityPreconditionFailed) Error() string {
	return fmt.Sprintf("[POST /authority][%d] postAuthorityPreconditionFailed  %+v", 412, o.Payload)
}

func (o *PostAuthorityPreconditionFailed) String() string {
	return fmt.Sprintf("[POST /authority][%d] postAuthorityPreconditionFailed  %+v", 412, o.Payload)
}

func (o *PostAuthorityPreconditionFailed) GetPayload() string {
	return o.Payload
}

func (o *PostAuthorityPreconditionFailed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostAuthorityInternalServerError creates a PostAuthorityInternalServerError with default headers values
func NewPostAuthorityInternalServerError() *PostAuthorityInternalServerError {
	return &PostAuthorityInternalServerError{}
}

/*
PostAuthorityInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type PostAuthorityInternalServerError struct {
	Payload string
}

// IsSuccess returns true when this post authority internal server error response has a 2xx status code
func (o *PostAuthorityInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post authority internal server error response has a 3xx status code
func (o *PostAuthorityInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post authority internal server error response has a 4xx status code
func (o *PostAuthorityInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this post authority internal server error response has a 5xx status code
func (o *PostAuthorityInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this post authority internal server error response a status code equal to that given
func (o *PostAuthorityInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the post authority internal server error response
func (o *PostAuthorityInternalServerError) Code() int {
	return 500
}

func (o *PostAuthorityInternalServerError) Error() string {
	return fmt.Sprintf("[POST /authority][%d] postAuthorityInternalServerError  %+v", 500, o.Payload)
}

func (o *PostAuthorityInternalServerError) String() string {
	return fmt.Sprintf("[POST /authority][%d] postAuthorityInternalServerError  %+v", 500, o.Payload)
}

func (o *PostAuthorityInternalServerError) GetPayload() string {
	return o.Payload
}

func (o *PostAuthorityInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
