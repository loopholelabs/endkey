// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/loopholelabs/endkey/internal/ent/apikey"
	"github.com/loopholelabs/endkey/internal/ent/authority"
	"github.com/loopholelabs/endkey/internal/ent/template"
)

// TemplateCreate is the builder for creating a Template entity.
type TemplateCreate struct {
	config
	mutation *TemplateMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (tc *TemplateCreate) SetCreatedAt(t time.Time) *TemplateCreate {
	tc.mutation.SetCreatedAt(t)
	return tc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (tc *TemplateCreate) SetNillableCreatedAt(t *time.Time) *TemplateCreate {
	if t != nil {
		tc.SetCreatedAt(*t)
	}
	return tc
}

// SetName sets the "name" field.
func (tc *TemplateCreate) SetName(s string) *TemplateCreate {
	tc.mutation.SetName(s)
	return tc
}

// SetCommonName sets the "common_name" field.
func (tc *TemplateCreate) SetCommonName(s string) *TemplateCreate {
	tc.mutation.SetCommonName(s)
	return tc
}

// SetTag sets the "tag" field.
func (tc *TemplateCreate) SetTag(s string) *TemplateCreate {
	tc.mutation.SetTag(s)
	return tc
}

// SetValidity sets the "validity" field.
func (tc *TemplateCreate) SetValidity(s string) *TemplateCreate {
	tc.mutation.SetValidity(s)
	return tc
}

// SetDNSNames sets the "dns_names" field.
func (tc *TemplateCreate) SetDNSNames(s []string) *TemplateCreate {
	tc.mutation.SetDNSNames(s)
	return tc
}

// SetAllowAdditionalDNSNames sets the "allow_additional_dns_names" field.
func (tc *TemplateCreate) SetAllowAdditionalDNSNames(b bool) *TemplateCreate {
	tc.mutation.SetAllowAdditionalDNSNames(b)
	return tc
}

// SetNillableAllowAdditionalDNSNames sets the "allow_additional_dns_names" field if the given value is not nil.
func (tc *TemplateCreate) SetNillableAllowAdditionalDNSNames(b *bool) *TemplateCreate {
	if b != nil {
		tc.SetAllowAdditionalDNSNames(*b)
	}
	return tc
}

// SetIPAddresses sets the "ip_addresses" field.
func (tc *TemplateCreate) SetIPAddresses(s []string) *TemplateCreate {
	tc.mutation.SetIPAddresses(s)
	return tc
}

// SetAllowAdditionalIps sets the "allow_additional_ips" field.
func (tc *TemplateCreate) SetAllowAdditionalIps(b bool) *TemplateCreate {
	tc.mutation.SetAllowAdditionalIps(b)
	return tc
}

// SetNillableAllowAdditionalIps sets the "allow_additional_ips" field if the given value is not nil.
func (tc *TemplateCreate) SetNillableAllowAdditionalIps(b *bool) *TemplateCreate {
	if b != nil {
		tc.SetAllowAdditionalIps(*b)
	}
	return tc
}

// SetClient sets the "client" field.
func (tc *TemplateCreate) SetClient(b bool) *TemplateCreate {
	tc.mutation.SetClient(b)
	return tc
}

// SetNillableClient sets the "client" field if the given value is not nil.
func (tc *TemplateCreate) SetNillableClient(b *bool) *TemplateCreate {
	if b != nil {
		tc.SetClient(*b)
	}
	return tc
}

// SetServer sets the "server" field.
func (tc *TemplateCreate) SetServer(b bool) *TemplateCreate {
	tc.mutation.SetServer(b)
	return tc
}

// SetNillableServer sets the "server" field if the given value is not nil.
func (tc *TemplateCreate) SetNillableServer(b *bool) *TemplateCreate {
	if b != nil {
		tc.SetServer(*b)
	}
	return tc
}

// SetID sets the "id" field.
func (tc *TemplateCreate) SetID(s string) *TemplateCreate {
	tc.mutation.SetID(s)
	return tc
}

// SetAuthorityID sets the "authority" edge to the Authority entity by ID.
func (tc *TemplateCreate) SetAuthorityID(id string) *TemplateCreate {
	tc.mutation.SetAuthorityID(id)
	return tc
}

// SetAuthority sets the "authority" edge to the Authority entity.
func (tc *TemplateCreate) SetAuthority(a *Authority) *TemplateCreate {
	return tc.SetAuthorityID(a.ID)
}

// AddAPIKeyIDs adds the "api_keys" edge to the APIKey entity by IDs.
func (tc *TemplateCreate) AddAPIKeyIDs(ids ...string) *TemplateCreate {
	tc.mutation.AddAPIKeyIDs(ids...)
	return tc
}

// AddAPIKeys adds the "api_keys" edges to the APIKey entity.
func (tc *TemplateCreate) AddAPIKeys(a ...*APIKey) *TemplateCreate {
	ids := make([]string, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return tc.AddAPIKeyIDs(ids...)
}

// Mutation returns the TemplateMutation object of the builder.
func (tc *TemplateCreate) Mutation() *TemplateMutation {
	return tc.mutation
}

// Save creates the Template in the database.
func (tc *TemplateCreate) Save(ctx context.Context) (*Template, error) {
	tc.defaults()
	return withHooks(ctx, tc.sqlSave, tc.mutation, tc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (tc *TemplateCreate) SaveX(ctx context.Context) *Template {
	v, err := tc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tc *TemplateCreate) Exec(ctx context.Context) error {
	_, err := tc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tc *TemplateCreate) ExecX(ctx context.Context) {
	if err := tc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tc *TemplateCreate) defaults() {
	if _, ok := tc.mutation.CreatedAt(); !ok {
		v := template.DefaultCreatedAt()
		tc.mutation.SetCreatedAt(v)
	}
	if _, ok := tc.mutation.AllowAdditionalDNSNames(); !ok {
		v := template.DefaultAllowAdditionalDNSNames
		tc.mutation.SetAllowAdditionalDNSNames(v)
	}
	if _, ok := tc.mutation.AllowAdditionalIps(); !ok {
		v := template.DefaultAllowAdditionalIps
		tc.mutation.SetAllowAdditionalIps(v)
	}
	if _, ok := tc.mutation.GetClient(); !ok {
		v := template.DefaultClient
		tc.mutation.SetClient(v)
	}
	if _, ok := tc.mutation.Server(); !ok {
		v := template.DefaultServer
		tc.mutation.SetServer(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tc *TemplateCreate) check() error {
	if _, ok := tc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Template.created_at"`)}
	}
	if _, ok := tc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "Template.name"`)}
	}
	if v, ok := tc.mutation.Name(); ok {
		if err := template.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Template.name": %w`, err)}
		}
	}
	if _, ok := tc.mutation.CommonName(); !ok {
		return &ValidationError{Name: "common_name", err: errors.New(`ent: missing required field "Template.common_name"`)}
	}
	if v, ok := tc.mutation.CommonName(); ok {
		if err := template.CommonNameValidator(v); err != nil {
			return &ValidationError{Name: "common_name", err: fmt.Errorf(`ent: validator failed for field "Template.common_name": %w`, err)}
		}
	}
	if _, ok := tc.mutation.Tag(); !ok {
		return &ValidationError{Name: "tag", err: errors.New(`ent: missing required field "Template.tag"`)}
	}
	if v, ok := tc.mutation.Tag(); ok {
		if err := template.TagValidator(v); err != nil {
			return &ValidationError{Name: "tag", err: fmt.Errorf(`ent: validator failed for field "Template.tag": %w`, err)}
		}
	}
	if _, ok := tc.mutation.Validity(); !ok {
		return &ValidationError{Name: "validity", err: errors.New(`ent: missing required field "Template.validity"`)}
	}
	if v, ok := tc.mutation.Validity(); ok {
		if err := template.ValidityValidator(v); err != nil {
			return &ValidationError{Name: "validity", err: fmt.Errorf(`ent: validator failed for field "Template.validity": %w`, err)}
		}
	}
	if _, ok := tc.mutation.AllowAdditionalDNSNames(); !ok {
		return &ValidationError{Name: "allow_additional_dns_names", err: errors.New(`ent: missing required field "Template.allow_additional_dns_names"`)}
	}
	if _, ok := tc.mutation.AllowAdditionalIps(); !ok {
		return &ValidationError{Name: "allow_additional_ips", err: errors.New(`ent: missing required field "Template.allow_additional_ips"`)}
	}
	if _, ok := tc.mutation.GetClient(); !ok {
		return &ValidationError{Name: "client", err: errors.New(`ent: missing required field "Template.client"`)}
	}
	if _, ok := tc.mutation.Server(); !ok {
		return &ValidationError{Name: "server", err: errors.New(`ent: missing required field "Template.server"`)}
	}
	if v, ok := tc.mutation.ID(); ok {
		if err := template.IDValidator(v); err != nil {
			return &ValidationError{Name: "id", err: fmt.Errorf(`ent: validator failed for field "Template.id": %w`, err)}
		}
	}
	if _, ok := tc.mutation.AuthorityID(); !ok {
		return &ValidationError{Name: "authority", err: errors.New(`ent: missing required edge "Template.authority"`)}
	}
	return nil
}

func (tc *TemplateCreate) sqlSave(ctx context.Context) (*Template, error) {
	if err := tc.check(); err != nil {
		return nil, err
	}
	_node, _spec := tc.createSpec()
	if err := sqlgraph.CreateNode(ctx, tc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected Template.ID type: %T", _spec.ID.Value)
		}
	}
	tc.mutation.id = &_node.ID
	tc.mutation.done = true
	return _node, nil
}

func (tc *TemplateCreate) createSpec() (*Template, *sqlgraph.CreateSpec) {
	var (
		_node = &Template{config: tc.config}
		_spec = sqlgraph.NewCreateSpec(template.Table, sqlgraph.NewFieldSpec(template.FieldID, field.TypeString))
	)
	if id, ok := tc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := tc.mutation.CreatedAt(); ok {
		_spec.SetField(template.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := tc.mutation.Name(); ok {
		_spec.SetField(template.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := tc.mutation.CommonName(); ok {
		_spec.SetField(template.FieldCommonName, field.TypeString, value)
		_node.CommonName = value
	}
	if value, ok := tc.mutation.Tag(); ok {
		_spec.SetField(template.FieldTag, field.TypeString, value)
		_node.Tag = value
	}
	if value, ok := tc.mutation.Validity(); ok {
		_spec.SetField(template.FieldValidity, field.TypeString, value)
		_node.Validity = value
	}
	if value, ok := tc.mutation.DNSNames(); ok {
		_spec.SetField(template.FieldDNSNames, field.TypeJSON, value)
		_node.DNSNames = value
	}
	if value, ok := tc.mutation.AllowAdditionalDNSNames(); ok {
		_spec.SetField(template.FieldAllowAdditionalDNSNames, field.TypeBool, value)
		_node.AllowAdditionalDNSNames = value
	}
	if value, ok := tc.mutation.IPAddresses(); ok {
		_spec.SetField(template.FieldIPAddresses, field.TypeJSON, value)
		_node.IPAddresses = value
	}
	if value, ok := tc.mutation.AllowAdditionalIps(); ok {
		_spec.SetField(template.FieldAllowAdditionalIps, field.TypeBool, value)
		_node.AllowAdditionalIps = value
	}
	if value, ok := tc.mutation.GetClient(); ok {
		_spec.SetField(template.FieldClient, field.TypeBool, value)
		_node.Client = value
	}
	if value, ok := tc.mutation.Server(); ok {
		_spec.SetField(template.FieldServer, field.TypeBool, value)
		_node.Server = value
	}
	if nodes := tc.mutation.AuthorityIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   template.AuthorityTable,
			Columns: []string{template.AuthorityColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(authority.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.authority_templates = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := tc.mutation.APIKeysIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   template.APIKeysTable,
			Columns: []string{template.APIKeysColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(apikey.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// TemplateCreateBulk is the builder for creating many Template entities in bulk.
type TemplateCreateBulk struct {
	config
	builders []*TemplateCreate
}

// Save creates the Template entities in the database.
func (tcb *TemplateCreateBulk) Save(ctx context.Context) ([]*Template, error) {
	specs := make([]*sqlgraph.CreateSpec, len(tcb.builders))
	nodes := make([]*Template, len(tcb.builders))
	mutators := make([]Mutator, len(tcb.builders))
	for i := range tcb.builders {
		func(i int, root context.Context) {
			builder := tcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*TemplateMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, tcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, tcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, tcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (tcb *TemplateCreateBulk) SaveX(ctx context.Context) []*Template {
	v, err := tcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tcb *TemplateCreateBulk) Exec(ctx context.Context) error {
	_, err := tcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tcb *TemplateCreateBulk) ExecX(ctx context.Context) {
	if err := tcb.Exec(ctx); err != nil {
		panic(err)
	}
}
