// Code generated by ent, DO NOT EDIT.

package migrate

import (
	"entgo.io/ent/dialect/sql/schema"
	"entgo.io/ent/schema/field"
)

var (
	// APIKeysColumns holds the columns for the "api_keys" table.
	APIKeysColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString, Unique: true},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "name", Type: field.TypeString},
		{Name: "salt", Type: field.TypeBytes},
		{Name: "hash", Type: field.TypeBytes},
		{Name: "authority_api_keys", Type: field.TypeString},
		{Name: "template_api_keys", Type: field.TypeString},
	}
	// APIKeysTable holds the schema information for the "api_keys" table.
	APIKeysTable = &schema.Table{
		Name:       "api_keys",
		Columns:    APIKeysColumns,
		PrimaryKey: []*schema.Column{APIKeysColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "api_keys_authorities_api_keys",
				Columns:    []*schema.Column{APIKeysColumns[5]},
				RefColumns: []*schema.Column{AuthoritiesColumns[0]},
				OnDelete:   schema.NoAction,
			},
			{
				Symbol:     "api_keys_templates_api_keys",
				Columns:    []*schema.Column{APIKeysColumns[6]},
				RefColumns: []*schema.Column{TemplatesColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
		Indexes: []*schema.Index{
			{
				Name:    "apikey_name_authority_api_keys",
				Unique:  true,
				Columns: []*schema.Column{APIKeysColumns[2], APIKeysColumns[5]},
			},
		},
	}
	// AuthoritiesColumns holds the columns for the "authorities" table.
	AuthoritiesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString, Unique: true},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "name", Type: field.TypeString},
		{Name: "ca_certificate_pem", Type: field.TypeBytes},
		{Name: "encrypted_private_key", Type: field.TypeString},
		{Name: "user_key_authorities", Type: field.TypeString, Nullable: true},
	}
	// AuthoritiesTable holds the schema information for the "authorities" table.
	AuthoritiesTable = &schema.Table{
		Name:       "authorities",
		Columns:    AuthoritiesColumns,
		PrimaryKey: []*schema.Column{AuthoritiesColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "authorities_user_keys_authorities",
				Columns:    []*schema.Column{AuthoritiesColumns[5]},
				RefColumns: []*schema.Column{UserKeysColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
		Indexes: []*schema.Index{
			{
				Name:    "authority_name_user_key_authorities",
				Unique:  true,
				Columns: []*schema.Column{AuthoritiesColumns[2], AuthoritiesColumns[5]},
			},
		},
	}
	// RootKeysColumns holds the columns for the "root_keys" table.
	RootKeysColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString, Unique: true},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "name", Type: field.TypeString, Unique: true},
		{Name: "salt", Type: field.TypeBytes},
		{Name: "hash", Type: field.TypeBytes},
	}
	// RootKeysTable holds the schema information for the "root_keys" table.
	RootKeysTable = &schema.Table{
		Name:       "root_keys",
		Columns:    RootKeysColumns,
		PrimaryKey: []*schema.Column{RootKeysColumns[0]},
	}
	// TemplatesColumns holds the columns for the "templates" table.
	TemplatesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString, Unique: true},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "name", Type: field.TypeString},
		{Name: "common_name", Type: field.TypeString},
		{Name: "tag", Type: field.TypeString},
		{Name: "validity", Type: field.TypeString},
		{Name: "dns_names", Type: field.TypeJSON, Nullable: true},
		{Name: "allow_additional_dns_names", Type: field.TypeBool, Default: false},
		{Name: "ip_addresses", Type: field.TypeJSON, Nullable: true},
		{Name: "allow_additional_ips", Type: field.TypeBool, Default: false},
		{Name: "allow_override_common_name", Type: field.TypeBool, Default: false},
		{Name: "client", Type: field.TypeBool, Default: false},
		{Name: "server", Type: field.TypeBool, Default: false},
		{Name: "authority_templates", Type: field.TypeString},
	}
	// TemplatesTable holds the schema information for the "templates" table.
	TemplatesTable = &schema.Table{
		Name:       "templates",
		Columns:    TemplatesColumns,
		PrimaryKey: []*schema.Column{TemplatesColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "templates_authorities_templates",
				Columns:    []*schema.Column{TemplatesColumns[13]},
				RefColumns: []*schema.Column{AuthoritiesColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
		Indexes: []*schema.Index{
			{
				Name:    "template_name_authority_templates",
				Unique:  true,
				Columns: []*schema.Column{TemplatesColumns[2], TemplatesColumns[13]},
			},
		},
	}
	// UserKeysColumns holds the columns for the "user_keys" table.
	UserKeysColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString, Unique: true},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "name", Type: field.TypeString, Unique: true},
		{Name: "salt", Type: field.TypeBytes},
		{Name: "hash", Type: field.TypeBytes},
		{Name: "root_key_user_keys", Type: field.TypeString, Nullable: true},
	}
	// UserKeysTable holds the schema information for the "user_keys" table.
	UserKeysTable = &schema.Table{
		Name:       "user_keys",
		Columns:    UserKeysColumns,
		PrimaryKey: []*schema.Column{UserKeysColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "user_keys_root_keys_user_keys",
				Columns:    []*schema.Column{UserKeysColumns[5]},
				RefColumns: []*schema.Column{RootKeysColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// Tables holds all the tables in the schema.
	Tables = []*schema.Table{
		APIKeysTable,
		AuthoritiesTable,
		RootKeysTable,
		TemplatesTable,
		UserKeysTable,
	}
)

func init() {
	APIKeysTable.ForeignKeys[0].RefTable = AuthoritiesTable
	APIKeysTable.ForeignKeys[1].RefTable = TemplatesTable
	AuthoritiesTable.ForeignKeys[0].RefTable = UserKeysTable
	TemplatesTable.ForeignKeys[0].RefTable = AuthoritiesTable
	UserKeysTable.ForeignKeys[0].RefTable = RootKeysTable
}
