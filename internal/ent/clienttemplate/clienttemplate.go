// Code generated by ent, DO NOT EDIT.

package clienttemplate

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the clienttemplate type in the database.
	Label = "client_template"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldCommonName holds the string denoting the common_name field in the database.
	FieldCommonName = "common_name"
	// FieldTag holds the string denoting the tag field in the database.
	FieldTag = "tag"
	// FieldValidity holds the string denoting the validity field in the database.
	FieldValidity = "validity"
	// FieldDNSNames holds the string denoting the dns_names field in the database.
	FieldDNSNames = "dns_names"
	// FieldAllowAdditionalDNSNames holds the string denoting the allow_additional_dns_names field in the database.
	FieldAllowAdditionalDNSNames = "allow_additional_dns_names"
	// FieldIPAddresses holds the string denoting the ip_addresses field in the database.
	FieldIPAddresses = "ip_addresses"
	// FieldAllowAdditionalIps holds the string denoting the allow_additional_ips field in the database.
	FieldAllowAdditionalIps = "allow_additional_ips"
	// EdgeAuthority holds the string denoting the authority edge name in mutations.
	EdgeAuthority = "authority"
	// EdgeAPIKeys holds the string denoting the api_keys edge name in mutations.
	EdgeAPIKeys = "api_keys"
	// Table holds the table name of the clienttemplate in the database.
	Table = "client_templates"
	// AuthorityTable is the table that holds the authority relation/edge.
	AuthorityTable = "client_templates"
	// AuthorityInverseTable is the table name for the Authority entity.
	// It exists in this package in order to avoid circular dependency with the "authority" package.
	AuthorityInverseTable = "authorities"
	// AuthorityColumn is the table column denoting the authority relation/edge.
	AuthorityColumn = "authority_client_templates"
	// APIKeysTable is the table that holds the api_keys relation/edge.
	APIKeysTable = "api_keys"
	// APIKeysInverseTable is the table name for the APIKey entity.
	// It exists in this package in order to avoid circular dependency with the "apikey" package.
	APIKeysInverseTable = "api_keys"
	// APIKeysColumn is the table column denoting the api_keys relation/edge.
	APIKeysColumn = "client_template_api_keys"
)

// Columns holds all SQL columns for clienttemplate fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldName,
	FieldCommonName,
	FieldTag,
	FieldValidity,
	FieldDNSNames,
	FieldAllowAdditionalDNSNames,
	FieldIPAddresses,
	FieldAllowAdditionalIps,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "client_templates"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"authority_client_templates",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// NameValidator is a validator for the "name" field. It is called by the builders before save.
	NameValidator func(string) error
	// CommonNameValidator is a validator for the "common_name" field. It is called by the builders before save.
	CommonNameValidator func(string) error
	// TagValidator is a validator for the "tag" field. It is called by the builders before save.
	TagValidator func(string) error
	// ValidityValidator is a validator for the "validity" field. It is called by the builders before save.
	ValidityValidator func(string) error
	// DefaultAllowAdditionalDNSNames holds the default value on creation for the "allow_additional_dns_names" field.
	DefaultAllowAdditionalDNSNames bool
	// DefaultAllowAdditionalIps holds the default value on creation for the "allow_additional_ips" field.
	DefaultAllowAdditionalIps bool
	// IDValidator is a validator for the "id" field. It is called by the builders before save.
	IDValidator func(string) error
)

// OrderOption defines the ordering options for the ClientTemplate queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByCommonName orders the results by the common_name field.
func ByCommonName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCommonName, opts...).ToFunc()
}

// ByTag orders the results by the tag field.
func ByTag(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTag, opts...).ToFunc()
}

// ByValidity orders the results by the validity field.
func ByValidity(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldValidity, opts...).ToFunc()
}

// ByAllowAdditionalDNSNames orders the results by the allow_additional_dns_names field.
func ByAllowAdditionalDNSNames(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAllowAdditionalDNSNames, opts...).ToFunc()
}

// ByAllowAdditionalIps orders the results by the allow_additional_ips field.
func ByAllowAdditionalIps(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAllowAdditionalIps, opts...).ToFunc()
}

// ByAuthorityField orders the results by authority field.
func ByAuthorityField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newAuthorityStep(), sql.OrderByField(field, opts...))
	}
}

// ByAPIKeysCount orders the results by api_keys count.
func ByAPIKeysCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newAPIKeysStep(), opts...)
	}
}

// ByAPIKeys orders the results by api_keys terms.
func ByAPIKeys(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newAPIKeysStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newAuthorityStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(AuthorityInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, AuthorityTable, AuthorityColumn),
	)
}
func newAPIKeysStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(APIKeysInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, APIKeysTable, APIKeysColumn),
	)
}
