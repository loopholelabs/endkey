// Code generated by go-swagger; DO NOT EDIT.

package rootkey

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// DeleteRootkeyNameReader is a Reader for the DeleteRootkeyName structure.
type DeleteRootkeyNameReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DeleteRootkeyNameReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewDeleteRootkeyNameOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewDeleteRootkeyNameBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewDeleteRootkeyNameUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewDeleteRootkeyNameNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 409:
		result := NewDeleteRootkeyNameConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 412:
		result := NewDeleteRootkeyNamePreconditionFailed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewDeleteRootkeyNameInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[DELETE /rootkey/{name}] DeleteRootkeyName", response, response.Code())
	}
}

// NewDeleteRootkeyNameOK creates a DeleteRootkeyNameOK with default headers values
func NewDeleteRootkeyNameOK() *DeleteRootkeyNameOK {
	return &DeleteRootkeyNameOK{}
}

/*
DeleteRootkeyNameOK describes a response with status code 200, with default header values.

OK
*/
type DeleteRootkeyNameOK struct {
	Payload string
}

// IsSuccess returns true when this delete rootkey name o k response has a 2xx status code
func (o *DeleteRootkeyNameOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this delete rootkey name o k response has a 3xx status code
func (o *DeleteRootkeyNameOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete rootkey name o k response has a 4xx status code
func (o *DeleteRootkeyNameOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this delete rootkey name o k response has a 5xx status code
func (o *DeleteRootkeyNameOK) IsServerError() bool {
	return false
}

// IsCode returns true when this delete rootkey name o k response a status code equal to that given
func (o *DeleteRootkeyNameOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the delete rootkey name o k response
func (o *DeleteRootkeyNameOK) Code() int {
	return 200
}

func (o *DeleteRootkeyNameOK) Error() string {
	return fmt.Sprintf("[DELETE /rootkey/{name}][%d] deleteRootkeyNameOK  %+v", 200, o.Payload)
}

func (o *DeleteRootkeyNameOK) String() string {
	return fmt.Sprintf("[DELETE /rootkey/{name}][%d] deleteRootkeyNameOK  %+v", 200, o.Payload)
}

func (o *DeleteRootkeyNameOK) GetPayload() string {
	return o.Payload
}

func (o *DeleteRootkeyNameOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteRootkeyNameBadRequest creates a DeleteRootkeyNameBadRequest with default headers values
func NewDeleteRootkeyNameBadRequest() *DeleteRootkeyNameBadRequest {
	return &DeleteRootkeyNameBadRequest{}
}

/*
DeleteRootkeyNameBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type DeleteRootkeyNameBadRequest struct {
	Payload string
}

// IsSuccess returns true when this delete rootkey name bad request response has a 2xx status code
func (o *DeleteRootkeyNameBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete rootkey name bad request response has a 3xx status code
func (o *DeleteRootkeyNameBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete rootkey name bad request response has a 4xx status code
func (o *DeleteRootkeyNameBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete rootkey name bad request response has a 5xx status code
func (o *DeleteRootkeyNameBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this delete rootkey name bad request response a status code equal to that given
func (o *DeleteRootkeyNameBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the delete rootkey name bad request response
func (o *DeleteRootkeyNameBadRequest) Code() int {
	return 400
}

func (o *DeleteRootkeyNameBadRequest) Error() string {
	return fmt.Sprintf("[DELETE /rootkey/{name}][%d] deleteRootkeyNameBadRequest  %+v", 400, o.Payload)
}

func (o *DeleteRootkeyNameBadRequest) String() string {
	return fmt.Sprintf("[DELETE /rootkey/{name}][%d] deleteRootkeyNameBadRequest  %+v", 400, o.Payload)
}

func (o *DeleteRootkeyNameBadRequest) GetPayload() string {
	return o.Payload
}

func (o *DeleteRootkeyNameBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteRootkeyNameUnauthorized creates a DeleteRootkeyNameUnauthorized with default headers values
func NewDeleteRootkeyNameUnauthorized() *DeleteRootkeyNameUnauthorized {
	return &DeleteRootkeyNameUnauthorized{}
}

/*
DeleteRootkeyNameUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type DeleteRootkeyNameUnauthorized struct {
	Payload string
}

// IsSuccess returns true when this delete rootkey name unauthorized response has a 2xx status code
func (o *DeleteRootkeyNameUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete rootkey name unauthorized response has a 3xx status code
func (o *DeleteRootkeyNameUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete rootkey name unauthorized response has a 4xx status code
func (o *DeleteRootkeyNameUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete rootkey name unauthorized response has a 5xx status code
func (o *DeleteRootkeyNameUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this delete rootkey name unauthorized response a status code equal to that given
func (o *DeleteRootkeyNameUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the delete rootkey name unauthorized response
func (o *DeleteRootkeyNameUnauthorized) Code() int {
	return 401
}

func (o *DeleteRootkeyNameUnauthorized) Error() string {
	return fmt.Sprintf("[DELETE /rootkey/{name}][%d] deleteRootkeyNameUnauthorized  %+v", 401, o.Payload)
}

func (o *DeleteRootkeyNameUnauthorized) String() string {
	return fmt.Sprintf("[DELETE /rootkey/{name}][%d] deleteRootkeyNameUnauthorized  %+v", 401, o.Payload)
}

func (o *DeleteRootkeyNameUnauthorized) GetPayload() string {
	return o.Payload
}

func (o *DeleteRootkeyNameUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteRootkeyNameNotFound creates a DeleteRootkeyNameNotFound with default headers values
func NewDeleteRootkeyNameNotFound() *DeleteRootkeyNameNotFound {
	return &DeleteRootkeyNameNotFound{}
}

/*
DeleteRootkeyNameNotFound describes a response with status code 404, with default header values.

Not Found
*/
type DeleteRootkeyNameNotFound struct {
	Payload string
}

// IsSuccess returns true when this delete rootkey name not found response has a 2xx status code
func (o *DeleteRootkeyNameNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete rootkey name not found response has a 3xx status code
func (o *DeleteRootkeyNameNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete rootkey name not found response has a 4xx status code
func (o *DeleteRootkeyNameNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete rootkey name not found response has a 5xx status code
func (o *DeleteRootkeyNameNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this delete rootkey name not found response a status code equal to that given
func (o *DeleteRootkeyNameNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the delete rootkey name not found response
func (o *DeleteRootkeyNameNotFound) Code() int {
	return 404
}

func (o *DeleteRootkeyNameNotFound) Error() string {
	return fmt.Sprintf("[DELETE /rootkey/{name}][%d] deleteRootkeyNameNotFound  %+v", 404, o.Payload)
}

func (o *DeleteRootkeyNameNotFound) String() string {
	return fmt.Sprintf("[DELETE /rootkey/{name}][%d] deleteRootkeyNameNotFound  %+v", 404, o.Payload)
}

func (o *DeleteRootkeyNameNotFound) GetPayload() string {
	return o.Payload
}

func (o *DeleteRootkeyNameNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteRootkeyNameConflict creates a DeleteRootkeyNameConflict with default headers values
func NewDeleteRootkeyNameConflict() *DeleteRootkeyNameConflict {
	return &DeleteRootkeyNameConflict{}
}

/*
DeleteRootkeyNameConflict describes a response with status code 409, with default header values.

Conflict
*/
type DeleteRootkeyNameConflict struct {
	Payload string
}

// IsSuccess returns true when this delete rootkey name conflict response has a 2xx status code
func (o *DeleteRootkeyNameConflict) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete rootkey name conflict response has a 3xx status code
func (o *DeleteRootkeyNameConflict) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete rootkey name conflict response has a 4xx status code
func (o *DeleteRootkeyNameConflict) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete rootkey name conflict response has a 5xx status code
func (o *DeleteRootkeyNameConflict) IsServerError() bool {
	return false
}

// IsCode returns true when this delete rootkey name conflict response a status code equal to that given
func (o *DeleteRootkeyNameConflict) IsCode(code int) bool {
	return code == 409
}

// Code gets the status code for the delete rootkey name conflict response
func (o *DeleteRootkeyNameConflict) Code() int {
	return 409
}

func (o *DeleteRootkeyNameConflict) Error() string {
	return fmt.Sprintf("[DELETE /rootkey/{name}][%d] deleteRootkeyNameConflict  %+v", 409, o.Payload)
}

func (o *DeleteRootkeyNameConflict) String() string {
	return fmt.Sprintf("[DELETE /rootkey/{name}][%d] deleteRootkeyNameConflict  %+v", 409, o.Payload)
}

func (o *DeleteRootkeyNameConflict) GetPayload() string {
	return o.Payload
}

func (o *DeleteRootkeyNameConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteRootkeyNamePreconditionFailed creates a DeleteRootkeyNamePreconditionFailed with default headers values
func NewDeleteRootkeyNamePreconditionFailed() *DeleteRootkeyNamePreconditionFailed {
	return &DeleteRootkeyNamePreconditionFailed{}
}

/*
DeleteRootkeyNamePreconditionFailed describes a response with status code 412, with default header values.

Precondition Failed
*/
type DeleteRootkeyNamePreconditionFailed struct {
	Payload string
}

// IsSuccess returns true when this delete rootkey name precondition failed response has a 2xx status code
func (o *DeleteRootkeyNamePreconditionFailed) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete rootkey name precondition failed response has a 3xx status code
func (o *DeleteRootkeyNamePreconditionFailed) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete rootkey name precondition failed response has a 4xx status code
func (o *DeleteRootkeyNamePreconditionFailed) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete rootkey name precondition failed response has a 5xx status code
func (o *DeleteRootkeyNamePreconditionFailed) IsServerError() bool {
	return false
}

// IsCode returns true when this delete rootkey name precondition failed response a status code equal to that given
func (o *DeleteRootkeyNamePreconditionFailed) IsCode(code int) bool {
	return code == 412
}

// Code gets the status code for the delete rootkey name precondition failed response
func (o *DeleteRootkeyNamePreconditionFailed) Code() int {
	return 412
}

func (o *DeleteRootkeyNamePreconditionFailed) Error() string {
	return fmt.Sprintf("[DELETE /rootkey/{name}][%d] deleteRootkeyNamePreconditionFailed  %+v", 412, o.Payload)
}

func (o *DeleteRootkeyNamePreconditionFailed) String() string {
	return fmt.Sprintf("[DELETE /rootkey/{name}][%d] deleteRootkeyNamePreconditionFailed  %+v", 412, o.Payload)
}

func (o *DeleteRootkeyNamePreconditionFailed) GetPayload() string {
	return o.Payload
}

func (o *DeleteRootkeyNamePreconditionFailed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteRootkeyNameInternalServerError creates a DeleteRootkeyNameInternalServerError with default headers values
func NewDeleteRootkeyNameInternalServerError() *DeleteRootkeyNameInternalServerError {
	return &DeleteRootkeyNameInternalServerError{}
}

/*
DeleteRootkeyNameInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type DeleteRootkeyNameInternalServerError struct {
	Payload string
}

// IsSuccess returns true when this delete rootkey name internal server error response has a 2xx status code
func (o *DeleteRootkeyNameInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete rootkey name internal server error response has a 3xx status code
func (o *DeleteRootkeyNameInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete rootkey name internal server error response has a 4xx status code
func (o *DeleteRootkeyNameInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this delete rootkey name internal server error response has a 5xx status code
func (o *DeleteRootkeyNameInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this delete rootkey name internal server error response a status code equal to that given
func (o *DeleteRootkeyNameInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the delete rootkey name internal server error response
func (o *DeleteRootkeyNameInternalServerError) Code() int {
	return 500
}

func (o *DeleteRootkeyNameInternalServerError) Error() string {
	return fmt.Sprintf("[DELETE /rootkey/{name}][%d] deleteRootkeyNameInternalServerError  %+v", 500, o.Payload)
}

func (o *DeleteRootkeyNameInternalServerError) String() string {
	return fmt.Sprintf("[DELETE /rootkey/{name}][%d] deleteRootkeyNameInternalServerError  %+v", 500, o.Payload)
}

func (o *DeleteRootkeyNameInternalServerError) GetPayload() string {
	return o.Payload
}

func (o *DeleteRootkeyNameInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
