// Code generated by go-swagger; DO NOT EDIT.

package template

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new template API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for template API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	DeleteTemplateClient(params *DeleteTemplateClientParams, opts ...ClientOption) (*DeleteTemplateClientOK, error)

	DeleteTemplateServer(params *DeleteTemplateServerParams, opts ...ClientOption) (*DeleteTemplateServerOK, error)

	GetTemplateClientAuthorityName(params *GetTemplateClientAuthorityNameParams, opts ...ClientOption) (*GetTemplateClientAuthorityNameOK, error)

	GetTemplateServerAuthorityName(params *GetTemplateServerAuthorityNameParams, opts ...ClientOption) (*GetTemplateServerAuthorityNameOK, error)

	PostTemplateClient(params *PostTemplateClientParams, opts ...ClientOption) (*PostTemplateClientOK, error)

	PostTemplateServer(params *PostTemplateServerParams, opts ...ClientOption) (*PostTemplateServerOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
DeleteTemplateClient Delete a Client Template
*/
func (a *Client) DeleteTemplateClient(params *DeleteTemplateClientParams, opts ...ClientOption) (*DeleteTemplateClientOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteTemplateClientParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteTemplateClient",
		Method:             "DELETE",
		PathPattern:        "/template/client",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteTemplateClientReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteTemplateClientOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteTemplateClient: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteTemplateServer Delete a Server Template
*/
func (a *Client) DeleteTemplateServer(params *DeleteTemplateServerParams, opts ...ClientOption) (*DeleteTemplateServerOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteTemplateServerParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteTemplateServer",
		Method:             "DELETE",
		PathPattern:        "/template/server",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteTemplateServerReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteTemplateServerOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteTemplateServer: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetTemplateClientAuthorityName List all Client Templates
*/
func (a *Client) GetTemplateClientAuthorityName(params *GetTemplateClientAuthorityNameParams, opts ...ClientOption) (*GetTemplateClientAuthorityNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetTemplateClientAuthorityNameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetTemplateClientAuthorityName",
		Method:             "GET",
		PathPattern:        "/template/client/{authority_name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetTemplateClientAuthorityNameReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetTemplateClientAuthorityNameOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetTemplateClientAuthorityName: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetTemplateServerAuthorityName List all Server Templates
*/
func (a *Client) GetTemplateServerAuthorityName(params *GetTemplateServerAuthorityNameParams, opts ...ClientOption) (*GetTemplateServerAuthorityNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetTemplateServerAuthorityNameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetTemplateServerAuthorityName",
		Method:             "GET",
		PathPattern:        "/template/server/{authority_name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetTemplateServerAuthorityNameReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetTemplateServerAuthorityNameOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetTemplateServerAuthorityName: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostTemplateClient Create a new Client Template
*/
func (a *Client) PostTemplateClient(params *PostTemplateClientParams, opts ...ClientOption) (*PostTemplateClientOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostTemplateClientParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostTemplateClient",
		Method:             "POST",
		PathPattern:        "/template/client",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostTemplateClientReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostTemplateClientOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostTemplateClient: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostTemplateServer Create a new Server Template
*/
func (a *Client) PostTemplateServer(params *PostTemplateServerParams, opts ...ClientOption) (*PostTemplateServerOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostTemplateServerParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostTemplateServer",
		Method:             "POST",
		PathPattern:        "/template/server",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostTemplateServerReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostTemplateServerOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostTemplateServer: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
