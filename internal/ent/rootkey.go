// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/loopholelabs/endkey/internal/ent/rootkey"
)

// RootKey is the model entity for the RootKey schema.
type RootKey struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// Identifier holds the value of the "identifier" field.
	Identifier string `json:"identifier,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Salt holds the value of the "salt" field.
	Salt []byte `json:"salt,omitempty"`
	// Hash holds the value of the "hash" field.
	Hash         []byte `json:"hash,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*RootKey) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case rootkey.FieldSalt, rootkey.FieldHash:
			values[i] = new([]byte)
		case rootkey.FieldID:
			values[i] = new(sql.NullInt64)
		case rootkey.FieldIdentifier, rootkey.FieldName:
			values[i] = new(sql.NullString)
		case rootkey.FieldCreatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the RootKey fields.
func (rk *RootKey) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case rootkey.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			rk.ID = int(value.Int64)
		case rootkey.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				rk.CreatedAt = value.Time
			}
		case rootkey.FieldIdentifier:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field identifier", values[i])
			} else if value.Valid {
				rk.Identifier = value.String
			}
		case rootkey.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				rk.Name = value.String
			}
		case rootkey.FieldSalt:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field salt", values[i])
			} else if value != nil {
				rk.Salt = *value
			}
		case rootkey.FieldHash:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field hash", values[i])
			} else if value != nil {
				rk.Hash = *value
			}
		default:
			rk.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the RootKey.
// This includes values selected through modifiers, order, etc.
func (rk *RootKey) Value(name string) (ent.Value, error) {
	return rk.selectValues.Get(name)
}

// Update returns a builder for updating this RootKey.
// Note that you need to call RootKey.Unwrap() before calling this method if this RootKey
// was returned from a transaction, and the transaction was committed or rolled back.
func (rk *RootKey) Update() *RootKeyUpdateOne {
	return NewRootKeyClient(rk.config).UpdateOne(rk)
}

// Unwrap unwraps the RootKey entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (rk *RootKey) Unwrap() *RootKey {
	_tx, ok := rk.config.driver.(*txDriver)
	if !ok {
		panic("ent: RootKey is not a transactional entity")
	}
	rk.config.driver = _tx.drv
	return rk
}

// String implements the fmt.Stringer.
func (rk *RootKey) String() string {
	var builder strings.Builder
	builder.WriteString("RootKey(")
	builder.WriteString(fmt.Sprintf("id=%v, ", rk.ID))
	builder.WriteString("created_at=")
	builder.WriteString(rk.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("identifier=")
	builder.WriteString(rk.Identifier)
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(rk.Name)
	builder.WriteString(", ")
	builder.WriteString("salt=")
	builder.WriteString(fmt.Sprintf("%v", rk.Salt))
	builder.WriteString(", ")
	builder.WriteString("hash=")
	builder.WriteString(fmt.Sprintf("%v", rk.Hash))
	builder.WriteByte(')')
	return builder.String()
}

// RootKeys is a parsable slice of RootKey.
type RootKeys []*RootKey
