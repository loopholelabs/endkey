// Code generated by go-swagger; DO NOT EDIT.

package userkey

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new userkey API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for userkey API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	DeleteUserkeyName(params *DeleteUserkeyNameParams, opts ...ClientOption) (*DeleteUserkeyNameOK, error)

	GetUserkey(params *GetUserkeyParams, opts ...ClientOption) (*GetUserkeyOK, error)

	PostUserkeyName(params *PostUserkeyNameParams, opts ...ClientOption) (*PostUserkeyNameOK, error)

	PostUserkeyRotateName(params *PostUserkeyRotateNameParams, opts ...ClientOption) (*PostUserkeyRotateNameOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
DeleteUserkeyName Delete a User Key
*/
func (a *Client) DeleteUserkeyName(params *DeleteUserkeyNameParams, opts ...ClientOption) (*DeleteUserkeyNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteUserkeyNameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteUserkeyName",
		Method:             "DELETE",
		PathPattern:        "/userkey/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteUserkeyNameReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteUserkeyNameOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteUserkeyName: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetUserkey Lists all the User Keys
*/
func (a *Client) GetUserkey(params *GetUserkeyParams, opts ...ClientOption) (*GetUserkeyOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetUserkeyParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetUserkey",
		Method:             "GET",
		PathPattern:        "/userkey",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetUserkeyReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetUserkeyOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetUserkey: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostUserkeyName Create a new User Key
*/
func (a *Client) PostUserkeyName(params *PostUserkeyNameParams, opts ...ClientOption) (*PostUserkeyNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostUserkeyNameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostUserkeyName",
		Method:             "POST",
		PathPattern:        "/userkey/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostUserkeyNameReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostUserkeyNameOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostUserkeyName: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostUserkeyRotateName Rotates a given User Key
*/
func (a *Client) PostUserkeyRotateName(params *PostUserkeyRotateNameParams, opts ...ClientOption) (*PostUserkeyRotateNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostUserkeyRotateNameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostUserkeyRotateName",
		Method:             "POST",
		PathPattern:        "/userkey/rotate/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostUserkeyRotateNameReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostUserkeyRotateNameOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostUserkeyRotateName: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
