// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/loopholelabs/endkey/internal/ent/apikey"
	"github.com/loopholelabs/endkey/internal/ent/predicate"
	"github.com/loopholelabs/endkey/internal/ent/servertemplate"
)

// ServerTemplateUpdate is the builder for updating ServerTemplate entities.
type ServerTemplateUpdate struct {
	config
	hooks    []Hook
	mutation *ServerTemplateMutation
}

// Where appends a list predicates to the ServerTemplateUpdate builder.
func (stu *ServerTemplateUpdate) Where(ps ...predicate.ServerTemplate) *ServerTemplateUpdate {
	stu.mutation.Where(ps...)
	return stu
}

// AddAPIKeyIDs adds the "api_keys" edge to the APIKey entity by IDs.
func (stu *ServerTemplateUpdate) AddAPIKeyIDs(ids ...string) *ServerTemplateUpdate {
	stu.mutation.AddAPIKeyIDs(ids...)
	return stu
}

// AddAPIKeys adds the "api_keys" edges to the APIKey entity.
func (stu *ServerTemplateUpdate) AddAPIKeys(a ...*APIKey) *ServerTemplateUpdate {
	ids := make([]string, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return stu.AddAPIKeyIDs(ids...)
}

// Mutation returns the ServerTemplateMutation object of the builder.
func (stu *ServerTemplateUpdate) Mutation() *ServerTemplateMutation {
	return stu.mutation
}

// ClearAPIKeys clears all "api_keys" edges to the APIKey entity.
func (stu *ServerTemplateUpdate) ClearAPIKeys() *ServerTemplateUpdate {
	stu.mutation.ClearAPIKeys()
	return stu
}

// RemoveAPIKeyIDs removes the "api_keys" edge to APIKey entities by IDs.
func (stu *ServerTemplateUpdate) RemoveAPIKeyIDs(ids ...string) *ServerTemplateUpdate {
	stu.mutation.RemoveAPIKeyIDs(ids...)
	return stu
}

// RemoveAPIKeys removes "api_keys" edges to APIKey entities.
func (stu *ServerTemplateUpdate) RemoveAPIKeys(a ...*APIKey) *ServerTemplateUpdate {
	ids := make([]string, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return stu.RemoveAPIKeyIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (stu *ServerTemplateUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, stu.sqlSave, stu.mutation, stu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (stu *ServerTemplateUpdate) SaveX(ctx context.Context) int {
	affected, err := stu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (stu *ServerTemplateUpdate) Exec(ctx context.Context) error {
	_, err := stu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (stu *ServerTemplateUpdate) ExecX(ctx context.Context) {
	if err := stu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (stu *ServerTemplateUpdate) check() error {
	if _, ok := stu.mutation.AuthorityID(); stu.mutation.AuthorityCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "ServerTemplate.authority"`)
	}
	return nil
}

func (stu *ServerTemplateUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := stu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(servertemplate.Table, servertemplate.Columns, sqlgraph.NewFieldSpec(servertemplate.FieldID, field.TypeString))
	if ps := stu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if stu.mutation.DNSNamesCleared() {
		_spec.ClearField(servertemplate.FieldDNSNames, field.TypeJSON)
	}
	if stu.mutation.IPAddressesCleared() {
		_spec.ClearField(servertemplate.FieldIPAddresses, field.TypeJSON)
	}
	if stu.mutation.APIKeysCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   servertemplate.APIKeysTable,
			Columns: []string{servertemplate.APIKeysColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(apikey.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := stu.mutation.RemovedAPIKeysIDs(); len(nodes) > 0 && !stu.mutation.APIKeysCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   servertemplate.APIKeysTable,
			Columns: []string{servertemplate.APIKeysColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(apikey.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := stu.mutation.APIKeysIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   servertemplate.APIKeysTable,
			Columns: []string{servertemplate.APIKeysColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(apikey.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, stu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{servertemplate.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	stu.mutation.done = true
	return n, nil
}

// ServerTemplateUpdateOne is the builder for updating a single ServerTemplate entity.
type ServerTemplateUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ServerTemplateMutation
}

// AddAPIKeyIDs adds the "api_keys" edge to the APIKey entity by IDs.
func (stuo *ServerTemplateUpdateOne) AddAPIKeyIDs(ids ...string) *ServerTemplateUpdateOne {
	stuo.mutation.AddAPIKeyIDs(ids...)
	return stuo
}

// AddAPIKeys adds the "api_keys" edges to the APIKey entity.
func (stuo *ServerTemplateUpdateOne) AddAPIKeys(a ...*APIKey) *ServerTemplateUpdateOne {
	ids := make([]string, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return stuo.AddAPIKeyIDs(ids...)
}

// Mutation returns the ServerTemplateMutation object of the builder.
func (stuo *ServerTemplateUpdateOne) Mutation() *ServerTemplateMutation {
	return stuo.mutation
}

// ClearAPIKeys clears all "api_keys" edges to the APIKey entity.
func (stuo *ServerTemplateUpdateOne) ClearAPIKeys() *ServerTemplateUpdateOne {
	stuo.mutation.ClearAPIKeys()
	return stuo
}

// RemoveAPIKeyIDs removes the "api_keys" edge to APIKey entities by IDs.
func (stuo *ServerTemplateUpdateOne) RemoveAPIKeyIDs(ids ...string) *ServerTemplateUpdateOne {
	stuo.mutation.RemoveAPIKeyIDs(ids...)
	return stuo
}

// RemoveAPIKeys removes "api_keys" edges to APIKey entities.
func (stuo *ServerTemplateUpdateOne) RemoveAPIKeys(a ...*APIKey) *ServerTemplateUpdateOne {
	ids := make([]string, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return stuo.RemoveAPIKeyIDs(ids...)
}

// Where appends a list predicates to the ServerTemplateUpdate builder.
func (stuo *ServerTemplateUpdateOne) Where(ps ...predicate.ServerTemplate) *ServerTemplateUpdateOne {
	stuo.mutation.Where(ps...)
	return stuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (stuo *ServerTemplateUpdateOne) Select(field string, fields ...string) *ServerTemplateUpdateOne {
	stuo.fields = append([]string{field}, fields...)
	return stuo
}

// Save executes the query and returns the updated ServerTemplate entity.
func (stuo *ServerTemplateUpdateOne) Save(ctx context.Context) (*ServerTemplate, error) {
	return withHooks(ctx, stuo.sqlSave, stuo.mutation, stuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (stuo *ServerTemplateUpdateOne) SaveX(ctx context.Context) *ServerTemplate {
	node, err := stuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (stuo *ServerTemplateUpdateOne) Exec(ctx context.Context) error {
	_, err := stuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (stuo *ServerTemplateUpdateOne) ExecX(ctx context.Context) {
	if err := stuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (stuo *ServerTemplateUpdateOne) check() error {
	if _, ok := stuo.mutation.AuthorityID(); stuo.mutation.AuthorityCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "ServerTemplate.authority"`)
	}
	return nil
}

func (stuo *ServerTemplateUpdateOne) sqlSave(ctx context.Context) (_node *ServerTemplate, err error) {
	if err := stuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(servertemplate.Table, servertemplate.Columns, sqlgraph.NewFieldSpec(servertemplate.FieldID, field.TypeString))
	id, ok := stuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "ServerTemplate.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := stuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, servertemplate.FieldID)
		for _, f := range fields {
			if !servertemplate.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != servertemplate.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := stuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if stuo.mutation.DNSNamesCleared() {
		_spec.ClearField(servertemplate.FieldDNSNames, field.TypeJSON)
	}
	if stuo.mutation.IPAddressesCleared() {
		_spec.ClearField(servertemplate.FieldIPAddresses, field.TypeJSON)
	}
	if stuo.mutation.APIKeysCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   servertemplate.APIKeysTable,
			Columns: []string{servertemplate.APIKeysColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(apikey.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := stuo.mutation.RemovedAPIKeysIDs(); len(nodes) > 0 && !stuo.mutation.APIKeysCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   servertemplate.APIKeysTable,
			Columns: []string{servertemplate.APIKeysColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(apikey.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := stuo.mutation.APIKeysIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   servertemplate.APIKeysTable,
			Columns: []string{servertemplate.APIKeysColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(apikey.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &ServerTemplate{config: stuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, stuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{servertemplate.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	stuo.mutation.done = true
	return _node, nil
}
